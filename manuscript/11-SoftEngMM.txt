# Κεφάλαιο 11 Μοντέλα και μέθοδοι τεχνολογίας λογισμικού {#modmethdssofteng}


## Ακρωνύμια

|3GL	|3rd Generation Language	   |
|BNF	|Backus-Naur Form		   |
|FDD	|Feature-Driven Development	   |
|IDE	|Integrated Development Environment|
|PBI	|Product Backlog Item  		   |
|RAD	|Rapid Application Development	   |
|UML	|Unified Modeling Language	   |
|XP	|eXtreme Programming		   |


## Εισαγωγή

Τα μοντέλα και οι μέθοδοι μηχανικής λογισμικού επιβάλλουν δομή στην τεχνολογία λογισμικού για να κάνουν την δραστηριότητα
συστηματική, επαναλαμβανομένη και τελικά πιο προσανατολισμένη στην επιτυχία. Τα μοντέλα παρέχουν μια προσέγγιση 
στην επίλυση προβλημάτων, μια σημειογραφεία και διαδικασίες για την κατασκευή και την ανάλυση μοντέλων. 
Οι μέθοδοι παρέχουν μια προσέγγιση στη συστηματική προδιαγραφή, σχεδιασμό, κατασκευή, έλεγχο και επαλήθευση 
του τελικού λογισμικού και των συσχετιζόμενων με αυτό προϊόντων εργασίας.

Οι μέθοδοι και τα μοντέλα τεχνολογίας λογισμικού διαφέρουν σημαντικά στο εύρος τους - από 
την διαχείριση μιας μοναδικής φάσης του κύκλου ζωής του λογισμικού μέχρι και την κάλυψη 
ολοκλήρου του κύκλου ζωής του λογισμικού. Αυτό το γνωστικό πεδίο(ΓΠ) επικεντρώνεται
σε μοντέλα και μεθόδους τα οποία περιλαμβάνουν πολλαπλές φάσεις του κύκλου ζωής του 
λογισμικού, καθώς άλλα γνωστικά πεδία καλύπτουν μεθόδους ειδικές για μια μόνο φάση του κύκλου ζωής.

## Κατανομή των θεμάτων για τα μοντέλα και τις μεθόδους τεχνολογίας λογισμικού

Αυτό το κεφάλαιο των μοντέλων και μεθόδων τεχνολογίας λογισμικού χωρίζεται
σε τέσσερα βασικά μέρη.

  * Η *μοντελοποίηση* αναφέρεται στην γενική πρακτική της μοντελοποίησης
  και παρουσιάζει θέματα στις αρχές της μοντελοποίησης, στις ιδιοτήτων και στην έκφραση
  των μοντέλων, στην σύνταξη της μοντελοποίησης, της σημασιολογία και της πραγματολογίας
  και στις προϋποθέσεις, μετασυνθήκες και σταθερές.
  * Οι *τύποι μοντέλων* αναφέρονται εν μέρει στα μοντέλα και στην συγκέντρωση
  υπομοντέλων και παρέχουν γενικά χαρακτηριστικά των τύπων μοντέλων που συναντώνται συνήθως 
  στην πρακτική της τεχνολογίας λογισμικού.
  * Η *ανάλυση μοντέλων* παρουσιάζει κοινές τεχνικές ανάλυσης που χρησιμοποιούνται στην μοντελοποίηση 
  για την επαλήθευση της πληρότητας, της συνέπειας , της ορθότητας της ανιχνευσιμότητας και της αλληλεπίδρασης.
  * Οι *μέθοδοι τεχνολογίας λογισμικού* παρουσιάζουν ένα σύνολο από κοινά χρησιμοποιούμενες 
  μεθόδους τεχνολογίας λογισμικού. Η συζήτηση καθοδηγεί τον αναγνώστη μέσα από μια περίληψη ευρετικών
  μεθόδων, επίσημων μεθόδων, πρωτότυπων και ευέλικτων μεθόδων.

Η κατανομή των θεμάτων για το Γνωστικό Πεδίο των Μοντέλων και Μεθόδων Τεχνολογίας Λογισμικού απεικονίζεται στο Σχήμα 1.

{id="fig-softengmm-tree"}
![Σχήμα 1 Κατανομή των Θεμάτων στο Γνωστικό Πεδίο των Μοντέλων και των Μεθόδων Τεχνολογίας Λογισμικού.](images/11-SoftEngMM.png)

## Μοντελοποίηση 

Η μοντελοποίηση του λογισμικού γίνεται μια επικρατούσα τεχνική για να βοηθήσει τους μηχανικούς λογισμικού
να κατανοήσουν, να σχεδιάσουν και να επικοινωνήσουν τις πτυχές του λογισμικού στα κατάλληλα
ενδιαφερόμενα μέλη. *Ενδιαφερόμενα μέλη* είναι οι άνθρωποι ή οι ομάδες που έχουν δηλώσει ή υπονοούν το ενδιαφέρον τους
για το λογισμικό (π.χ. οι χρήστες, οι αγοραστές, οι προμηθευτές, οι σχεδιαστές της αρχιτεκτονικής του λογισμικού, 
οι αρχές πιστοποίησης, οι αξιολογητές, οι προγραμματιστές, οι μηχανικοί λογισμικού). Ενώ υπάρχoυν πολλές γλώσσες, 
σημειογραφίες, τεχνικές και εργαλεία μοντελοποίησης στην βιβλιογραφία και στην πράξη, υπάρχουν κάποιες γενικές, ενοποιητικές 
έννοιες που ισχύουν για όλες αυτές. Οι ακόλουθες ενότητες παρέχουν πληροφορίες για αυτές τις γενικές έννοιες.

### *Αρχές Mοντελοποίησης*

Η μοντελοποίηση παρέχει στον μηχανικό του λογισμικού μια
οργανωμένη και συστηματική προσέγγιση για την αναπαράσταση σημαντικών πτυχών του λογισμικού που εξετάζεται, 
διευκολύνοντας τη λήψη αποφάσεων σχετικά με το λογισμικό ή τα στοιχέια του, και την επικοινωνία αυτών των σημαντικών αποφάσεων σε 
άλλους στις κοινότητες των ενδιαφερόμενων. Τρεις γενικές αρχές που διέπουν τις εν λόγω δραστηριότητες μοντελοποίησης:

  * *Μοντελοποίηση των απαραίτητων*: Τα καλά μοντέλα συνήθως δεν αναπαριστούν
  κάθε πτυχή ή χαρακτηριστικό του λογισμικού σε κάθε πιθανή συνθήκη.
  Η μοντελοποίηση συνήθως περιλαμβάνει μόνο εκείνες τις πτυχές ή χαρακτηριστικά που προκαλούν συγκεκριμένες ερωτήσεις, 
  αφαιρώντας οποιαδήποτε μη ουσιώδη πληροφορία. Αυτή η προσέγγιση διατηρεί τα μοντέλα διαχειρίσιμα και χρήσιμα.
  * *Παροχή προοπτικής*: Η μοντελοποίηση παρέχει προβολές του λογισμικού που μελετάται χρησιμοποιώντας καθορισμένους κανόνες για 
  την έκφραση του μοντέλου εντός κάθε προβολής. Αυτή η προσέγγιση που βασίζεται στην προοπτική παρέχει διάσταση στο μοντέλο (π.χ. 
  παρέχοντας μια δομική προβολή, μια συμπεριφορική προβολή, μια χρονική προβολή, μια οργανωτική προβολή και/ή άλλες προβολές εάν είναι σχετικές). 
  Η οργάνωση των πληροφοριών σε προβολές επικεντρώνει τις προσπάθειες μοντελοποίησης λογισμικού σε συγκεκριμένες ανησυχίες σχετικές 
  με αυτήν την προβολή χρησιμοποιώντας την κατάλληλη σημειογραφία, το λεξιλόγιο, τις μεθόδους και τα εργαλεία.
  * *Ενεργοποίηση αποτελεσματικών επικοινωνιών*: Η μοντελοποίηση χρησιμοποιεί το λεξιλόγιο του τομέα εφαρμογής του λογισμικού, 
  μια γλώσσα μοντελοποίησης και σημασιολογική έκφραση (δηλαδή, τη σημασία εντός του γενικού πλαισίου). Όταν χρησιμοποιείται 
  με αυστηρότητα και συστηματικότητα, η μοντελοποίηση οδηγεί σε μια προσέγγιση αναφοράς που διευκολύνει την αποτελεσματική επικοινωνία των 
  πληροφοριών του λογισμικού στους ενδιαφερόμενους φορείς του έργου.

Ένα μοντέλο είναι μια *αφαίρεση* ή μια *απλοποίηση* ενός συστατικού στοιχείου του λογισμικού. Μια συνέπεια της 
χρήσης αφαίρεσης είναι ότι, επειδή καμία μεμονωμένη αφαίρεση δεν περιγράφει ολοκληρωτικά ένα συστατικό λογισμικού, το μοντέλο 
λογισμικού περιλαμβάνει μια συνάθροιση αφαιρέσεων, οι οποίες, όταν συνδυάζονται, 
περιγράφουν επιλεγμένες πτυχές, οπτικές ή όψεις - μόνο εκείνες οι οποίες χρειάζονται για να παρθούν αποφάσεις πληροφόρησης και να 
ανταποκρίνονται στους σκοπούς δημιουργίας του μοντέλου αρχικά. Αυτή η απλοποίηση υποδεικνύει υποθέσεις σχετικά με το πλαίσιο εντός 
του οποίου το μοντέλο τοποθετείται, οι οποίες θα πρέπει επίσης να καταγράφονται στο μοντέλο. Τότε, όταν το μοντέλο επαναχρησιμοποιείται, αυτές 
οι υποθέσεις μπορούν να επικυρωθούν πρώτα για να καθοριστεί η σημασία του επαναχρησιμοποιημένου μοντέλου εντός της νέας χρήσης και του 
πλαισίου του.

### *Ιδιότητες και Εκφραση των Μοντέλων*

*Ιδιότητες των μοντέλων* είναι εκείνα τα ιδιαίτερα χαρακτηριστικά ενός
συγκεκριμένου μοντέλου που περιγράφουν την πληρότητά του, την συνέπεια και την ορθότητά του εντός των επιλεγμένων συμβολισμών
εργαλείων μοντελοποίησης. Οι ιδιότητες των μοντέλων περιλαμβάνουν τα ακόλουθα:

  * *Πληρότητα*: Ο βαθμός που όλες οι απαιτήσεις έχουν εφαρμοστεί
  και επαληθευτεί εντός του μοντέλου.
  * *Συνέπεια*: Ο βαθμός που το μοντέλο περιέχει μη αντικρουόμενες
  απαιτήσεις, παραδοχές, περιορισμούς, λειτουργίες ή περιγραφές στοιχείων.
  * *Ορθότητα*: Ο βαθμός που το μοντέλο ικανοποιεί τις απαιτήσεις του,
  τις προδιαγραφές σχεδιασμού του και δεν παρουσιάζει σφάλματα.

Τα μοντέλα κατασκευάζονται για να αναπαραστήσουν αντικείμενα του πραγματικού κόσμου και τη συμπεριφορά τους
ώστε να απαντηθούν συγκεκριμένες ερωτήσεις σχετικά με το πως το λογισμικό αναμένεται να λειτουργεί. Η εκτενής
ανάλυση των μοντέλων - μέσω εξερεύνησης, προσομοίωσης, ή αναθεώρηση - μπορεί να εκθέσει περιοχές αβεβαιότητας 
εντός του μοντέλου και του λογισμικού στο οποίο το μοντέλο αναφέρεται. Αυτές οι αβεβαιότητες ή τα αναπάντητα ερωτήματα που σχετίζονται με τις
απαιτήσεις, τον σχεδιασμό ή/και την εφαρμογή μπορούν εν συνεχεία να διαχειρίζονται καταλλήλως.

Το κύριο στοιχείο έκφρασης ενός μοντέλου είναι η *οντότητα*. Μια οντότητα μπορεί να αναπαριστά συγκεκριμένα  αντικείμενα (για παράδειγμα επεξεργαστές,
αισθητήρες ή ρομπότ), ή αφηρημένα αντικείμενα (για παράδειγμα λειτουργικές ενότητες λογισμικού ή πρωτόκολλα επικοινωνίας). Οι οντότητες του μοντέλου
συνδέονται με άλλες οντότητες χρησιμοποιώντας σχέσεις (γραμμές ή φορείς κειμένου στις στοχευόμενες οντότητες). Η έκφραση οντοτήτων μοντέλου μπορεί να 
επιτυγχάνεται με την χρήση κειμενικών ή γραφικών γλωσσών μοντελοποίησης· και οι δυο αυτοί τύποι γλωσσών μοντελοποίησης συνδέουν τις οντότητες του μοντέλου 
μέσω συγκεκριμένων κατασκευών γλώσσας. Η σημασία μιας οντότητας μπορεί να αναπαριστάται μέσω του σχήματος της,
των κειμενικών χαρακτηριστικών της ή και των δύο. Γενικά, οι κειμενικές πληροφορίες τηρούν την συντακτική δομή της εκάστοτε γλώσσας.
Οι ακριβείς σημασίες που σχετίζονται με την μοντελοποίηση του γενικού πλαισίου, της δομής ή της συμπεριφοράςχρησιμοποιώντας αυτές τις οντότητες και τις
σχέσεις, εξαρτώνται από την γλώσσα μοντελοποίησης που χρησιμοποιείται, τον αυστηρό σχεδιασμό που εφαρμόζεται στην προσπάθεια μοντελοποίησης,
τη συγκεκριμένη προβολή που κατασκευάζεται και την οντότητα στην οποία το συγκεκριμένο στοιχείο σημείωσης μπορεί να συνδέεται. Μπορεί να απαιτούνται
πολλαπλές προβολές του μοντέλου για να αποτυπωθούν οι αναγκαίες σημασίες του λογισμικού.

Όταν χρησιμοποιούνται μοντέλα υποστήριξης αυτοματοποίησης, τα μοντέλα μπορούν να ελεγχθούν για πληρότητα και συνέπεια. Η χρησιμότητα αυτών 
των ελέγχων εξαρτάται σημαντικά από το επίπεδο σημασιολογικής και συντακτικής ακρίβειας που εφαρμόζεται στην προσπάθεια μοντελοποίησης 
και στην ύπαρξη συγκεκριμένης εργαλειακής υποστήριξης. Η ορθότητα ελέγχεται συνήθως μέσω προσομοίωσης και/ή αναθεώρησης.

### *Σύνταξη, Σημασιολογία και Πραγματολογία*

Τα μοντέλα μπορεί να είναι εκπληκτικά παραπλανητικά. Το γεγονός ότι ένα
μοντέλο είναι μια αφαίρεση με λείπουσες πληροφορίες μπορεί να δώσει 
στους ανθρώπους την εντύπωση ότι κατανοούν πλήρως το λογισμικό μετά από 
τη μελέτη ενός μόνο μοντέλου. Ένα *πλήρες μοντέλο* ("πλήρες" ως προς την 
προσπάθεια μοντελοποίησης) μπορεί να αποτελείται από τη συνένωση πολλαπλών 
υπομοντέλων και ειδικών μοντέλων λειτουργίας. Η εξέταση και η λήψη αποφάσεων 
σχετικά με ένα μόνο μοντέλο μέσα σε αυτή τη συλλογή υπομοντέλων μπορεί να 
είναι προβληματική.

Η κατανόηση των ακριβών εννοιών της μοντελοποίησης κατασκευών μπορεί επίσης να
είναι δύσκολη. Οι συντακτικοί και σημασιολογικοί κανόνες καθορίζουν
τις γλώσσες μοντελοποίησης. Για τις γλώσσες κειμένου, η *σύνταξη* καθορίζεται
χρησιμοποιώντας μια γραμματική σημειογραφία που καθορίζει τις έγκυρες 
κατασκευές της γλώσσας (π.χ. η Backus-Naur φόρμα (BNF)). Για γραφικές γλώσσες, 
η σύνταξη καθορίζεται χρησιμοποιώντας γραφικά μοντέλα που ονομάζονται <i>μεταμοντέλα</i>.
Όπως και με την BNF, τα μεταμοντέλα καθορίζουν τις έγκυρες συντακτικές κατασκευές
μιας γραφικής γλώσσας μοντελοποίησης. Επιπλέον, το μεταμοντέλο καθορίζει πώς μπορούν
αυτές οι κατασκευές να συνθέτονται για να παράγουν έγκυρα μοντέλα.

Η *σημασιολογία* για τις γλώσσες μοντελοποίησης καθορίζει τη σημασία που συνδέεται
με τις οντότητες και τις σχέσεις που περιλαμβάνονται στο μοντέλο. Για παράδειγμα, 
ένα απλό διάγραμμα δύο κουτιών που συνδέονται με μια γραμμή είναι ανοιχτό σε 
διάφορες ερμηνείες. Η γνώση ότι το διάγραμμα στο οποίο τα κουτιά τοποθετούνται 
και συνδέονται είναι ένα διάγραμμα αντικειμένων ή ένα διάγραμμα δραστηριότητας 
μπορεί να βοηθήσει στην ερμηνεία αυτού του μοντέλου.

Στην πράξη, η σημασιολογία ενός συγκεκριμένου λογισμικού μοντέλου είναι συνήθως 
αρκετά σαφής λόγω της χρήσης της γλώσσας μοντελοποίησης με συνεπείς κανόνες, του
τρόπου με τον οποίο αυτή η γλώσσα μοντελοποίησης εκφράζει οντότητες και σχέσεις 
μέσα σε αυτό το μοντέλο, της εμπειρίας των μοντελοποιητών και του πλαισίου εντός 
του οποίου έχει γίνει η μοντελοποίηση και η αναπαράστασή της. Η σημασία επικοινωνείται 
μέσω του μοντέλου, ακόμη και στην περίπτωση ανεπαρκούς πληροφορίας μέσω της αφαίρεσης. 
Η *πραγματολογία* εξηγεί πως η σημασία ενσωματώνεται στο μοντέλο και στο περιεχόμενό του
και πως επικοινωνείται αποτελεσματικά στους άλλους μηχανικούς λογισμικού. 

Ωστόσο, υπάρχουν ακόμα περιπτώσεις όπου απαιτείται προσοχή όσον αφορά τη μοντελοποίηση και τη 
σημασιολογία. Για παράδειγμα, οποιαδήποτε μέρη του μοντέλου που εισάγονται από ένα άλλο 
μοντέλο ή βιβλιοθήκη πρέπει να εξεταστούν για σημασιολογικές υποθέσεις που διαφέρουν από 
το νέο περιβάλλον μοντελοποίησης· αυτές οι διαφορές ενδέχεται να μην είναι προφανείς. Το 
μοντέλο πρέπει να ελεγχθεί για καταγεγραμμένες υποθέσεις. Παρόλο που η χρησιμοποιούμενη συντακτική 
μοντελοποίηση μπορεί να είναι η ίδια, μπορεί να σημαίνει κάτι πολύ διαφορετικό στο νέο περιβάλλον, 
το οποίο είναι ένα διαφορετικό πλαίσιο αναφοράς. Επίσης, λάβετε υπόψη ότι καθώς το λογισμικό ωριμάζει 
και γίνονται αλλαγές, ενδέχεται να εισαχθεί σημασιολογική ασυμφωνία, η οποία μπορεί να οδηγήσει 
σε σφάλματα. Με πολλούς μηχανικούς λογισμικού που εργάζονται σε μέρος ενός μοντέλου με τον χρόνο 
και με ενημερώσεις εργαλείων και ίσως νέες απαιτήσεις, υπάρχουν ευκαιρίες για τμήματα του μοντέλου
να αντιπροσωπεύουν κάτι διαφορετικό από την αρχική πρόθεση του συντάκτη και του αρχικού 
περιβάλλοντος του μοντέλου.

### ***Προϋποθέσεις, Μετασυνθήκες και Αναλλοίωτες Συνθήκες***

Κατά τη μοντελοποίηση συναρτήσεων ή μεθόδων, ο μηχανικός λογισμικού συνήθως ξεκινά με 
υποθέσεις σχετικά με την κατάσταση του λογισμικού πριν, κατά τη διάρκεια και μετά την 
εκτέλεση της συνάρτησης ή μεθόδου. Αυτές οι υποθέσεις είναι ουσιαστικές για τη σωστή 
λειτουργία της συνάρτησης ή μεθόδου και ονομάζονται προϋποθέσεις, μετασυνθήκες και 
αναλλοίωτες συνθήκες.

  * Οι *προϋποθέσεις* είναι οι συνθήκες που πρέπει να ικανοποιούνται πριν από την εκτέλεση 
  μιας συνάρτησης ή μεθόδου. Εάν αυτές οι προϋποθέσεις δεν ικανοποιούνται πριν από την 
  εκτέλεση της συνάρτησης ή μεθόδου, αυτή μπορεί να παράξει εσφαλμένα αποτελέσματα.
  * Οι *μετασυνθήκες* είναι συνθήκες που είναι εγγυημένο ότι θα είναι αληθείς μετά από την 
  επιτυχή εκτέλεση μιας συνάρτησης ή μεθόδου. Συνήθως, οι μετασυνθήκες αντιπροσωπεύουν πώς
  έχει αλλάξει η κατάσταση του λογισμικού, πώς έχουν αλλάξει οι παράμετροι που περνούνται 
  στη συνάρτηση ή μέθοδο, πώς έχουν αλλάξει οι τιμές δεδομένων, ή πώς έχει επηρεαστεί η τιμή
  επιστροφής.
  * Οι *αναλλοίωτες* είναι συνθήκες που παραμένουν σταθερές στο περιβάλλον λειτουργίας (με άλλα 
  λόγια, δεν αλλάζουν) πριν και μετά την εκτέλεση μιας συνάρτησης ή μεθόδου. Αυτές οι αναλλοίωτες
  συνθήκες είναι σχετικές και απαραίτητες για το λογισμικό και για τη σωστή λειτουργία της 
  συνάρτησης ή της μεθόδου.

## Τύποι Μοντέλων

Ένα τυπικό μοντέλο αποτελείται από μια συλλογή από υπομοντέλα. Κάθε υπομοντέλο είναι μια μερική 
περιγραφή και δημιουργείται για ένα συγκεκριμένο σκοπό. Ένα υπομοντέλο μπορεί να αποτελείται 
από ένα ή περισσότερα διαγράμματα. Η συλλογή των υπομοντέλων μπορεί να χρησιμοποιεί πολλές γλώσσες 
μοντελοποίησης ή μια μόνο γλώσσα μοντελοποίησης. Η Unified Modeling Language (UML) αναγνωρίζει μια 
πλούσια συλλογή από διαγράμματα μοντελοποίησης. Αυτά τα διαγράμματα, μαζί με τα κατασκευαστικά στοιχεία 
της γλώσσας μοντελοποίησης, χρησιμοποιούνται σε τρία κοινά είδη μοντέλων: μοντέλα πληροφοριών, 
συμπεριφοράς και δομής. (Δείτε την ενότητα 1.1.)

### *Μοντελοποίηση Πληροφορίας*

Τα μοντέλα πληροφορίας επικεντρώνονται στα δεδομένα και άλλες πληροφορίες. Ένα *μοντέλο πληροφορίας* 
είναι μια αφηρημένη αναπαράσταση που αναγνωρίζει και καθορίζει ένα σύνολο από έννοιες, ιδιότητες, 
σχέσεις και περιορισμούς στις οντότητες δεδομένων. Το σημασιολογικό ή έννοιολογικό μοντέλο πληροφορίας 
χρησιμοποιείται συχνά για να παρέχει μια μορφή τυπικότητας και πλαισίωσης στο λογισμικό, όπως 
εμφανίζεται από την προβληματική σκοπιά, χωρίς ανησυχία για το πώς αυτό το μοντέλο χαρτογραφείται
στην υλοποίηση του λογισμικού. Το σημασιολογικό ή έννοιολογικό μοντέλο πληροφορίας είναι μια αφαίρεση και,
ως τέτοια, περιλαμβάνει μόνο τα έννοια, τις ιδιότητες, τις σχέσεις και τους περιορισμούς που χρειάζονται
για να εννοιολογικοποιηθεί μια πραγματική όψη της πληροφορίας. Οι επόμενες μετατροπές του 
σημασιολογικού ή έννοιολογικού μοντέλου πληροφορίας γίνονται σε λογικά και στη συνέχεια σε φυσικά 
μοντέλα δεδομένων όπως υλοποιούνται στο λογισμικό.

### *Μοντελεποίηση Συμπεριφοράς*

Τα *μοντέλα συμπεριφοράς* αναγνωρίζουν και καθορίζουν τις λειτουργίες του λογισμικού. 
Τα μοντέλα συμπεριφοράς συνήθως παίρνουν τρεις βασικές μορφές: μηχανήματα κατάστασης, μοντέλα 
ροής ελέγχου και μοντέλα ροής δεδομένων. Τα μηχανήματα κατάστασης παρέχουν ένα μοντέλο που 
αναπαριστά το λογισμικό ως μια συλλογή καθορισμένων καταστάσεων, γεγονότων και μεταβάσεων. 
Το λογισμικό μεταβαίνει από μια κατάσταση στην επόμενη μέσω ενός γεγονότος ενεργοποίησης ή 
απενεργοποίησης που συμβαίνει στο μοντελοποιημένο περιβάλλον. Τα μοντέλα ροής ελέγχου 
απεικονίζουν το πώς μια ακολουθία γεγονότων προκαλεί την ενεργοποίηση ή απενεργοποίηση 
διεργασιών. Η συμπεριφορά ροής δεδομένων χαρακτηρίζεται ως μια ακολουθία βημάτων όπου 
τα δεδομένα κινούνται μέσω διεργασιών προς αποθήκευση ή πηγές δεδομένων.

### *Μοντελοποίηση Δομής*

Τα *μοντέλα δομής* απεικονίζουν τη φυσική ή λογική σύνθεση του λογισμικού από τα διάφορα
μέρη του. Η μοντελοποίηση δομής καθορίζει το καθορισμένο όριο μεταξύ του λογισμικού που
υλοποιείται ή μοντελοποιείται και του περιβάλλοντος στο οποίο θα λειτουργήσει. Ορισμένες
κοινές δομικές δομές που χρησιμοποιούνται στη μοντελοποίηση δομής είναι η σύνθεση, ανάλυση, 
γενίκευση και εξειδίκευση των οντοτήτων· η αναγνώριση των σχετικών σχέσεων και της 
καρδιναλότητας μεταξύ των οντοτήτων· και ο καθορισμός των διεπαφών διεργασίας ή λειτουργικών 
διεπαφών. Τα διαγράμματα δομής που παρέχονται από το UML για τη μοντελοποίηση δομής περιλαμβάνουν 
διαγράμματα κλάσης, συστατικών, αντικειμένου, ανάπτυξης και συσκευασίας.

## Ανάλυση Μοντέλων

Η ανάπτυξη μοντέλων επιτρέπει στον μηχανικό λογισμικού να μελετήσει, να σκεφτεί και να 
κατανοήσει τη δομή, τη λειτουργία, τη λειτουργική χρήση και τις σκέψεις συναρμολόγησης του 
λογισμικού. Η ανάλυση των κατασκευασμένων μοντέλων είναι απαραίτητη για να διασφαλιστεί ότι τα 
μοντέλα είναι ολοκληρωμένα, συνεκτικά και αρκετά σωστά για να εξυπηρετήσουν τον επιθυμητό σκοπό 
τους για τους ενδιαφερόμενους φορείς.

Οι παρακάτω ενότητες περιγράφουν σύντομα τις τεχνικές ανάλυσης που γενικά χρησιμοποιούνται
για να διασφαλιστεί ότι ο μηχανικός λογισμικού και οι άλλοι σχετικοί ενδιαφερόμενοι φορείς αποκομίζουν την 
κατάλληλη αξία από την ανάπτυξη και χρήση των μοντέλων.

### *Αναλύοντας για Πληρότητα*

Για να διασφαλιστεί ότι το λογισμικό καλύπτει πλήρως τις ανάγκες των ενδιαφερομένων, είναι 
κρίσιμο να γίνεται δοκιμή για την πληρότητα - από τη διαδικασία συλλογής απαιτήσεων έως την 
υλοποίηση του κώδικα. Η *πληρότητα* είναι ο βαθμός στον οποίο έχουν υλοποιηθεί και επαληθευθεί 
όλες οι καθορισμένες απαιτήσεις. Οι μηχανικοί μπορούν να ελέγξουν τα μοντέλα για πληρότητα 
με ένα εργαλείο μοντελοποίησης που χρησιμοποιεί δομική ανάλυση και ανάλυση επιτευξιμότητας χώρου 
καταστάσεων (που διασφαλίζει ότι ένα σύνολο σωστών εισόδων φτάνει σε όλες τις διαδρομές στα 
καταστατικά μοντέλα). Τα μοντέλα μπορούν επίσης να ελεγχθούν χειρωνακτικά για πληρότητα μέσω 
επιθεωρήσεων ή άλλων τεχνικών αναθεώρησης. (Βλέπε το Γνωστικό Πεδίο της Ποιότητας Λογισμικού). 
Σφάλματα και προειδοποιήσεις που παράγονται από αυτά τα εργαλεία ανάλυσης και που 
ανακαλύπτονται από επιθεωρήσεις ή αναθεωρήσεις οι οποίες υποδεικνύουν τις διορθωτικές ενέργειες
που χρειάζεται να γίνουν για να εξασφαλιστεί η πληρότητα του μοντέλου.

### *Αναλύοντας για Συνέπεια*

Η *συνέπεια* αφορά το βαθμό στον οποίο τα μοντέλα δεν περιλαμβάνουν αντικρουόμενες απαιτήσεις, 
διαβεβαιώσεις, περιορισμούς, λειτουργίες ή περιγραφές συνιστωσών. Συνήθως, ο έλεγχος συνέπειας 
πραγματοποιείται με το εργαλείο μοντελοποίησης χρησιμοποιώντας μια αυτοματοποιημένη λειτουργία ανάλυσης. 
Τα μοντέλα μπορούν επίσης να ελεγχθούν χειροκίνητα για συνέπεια χρησιμοποιώντας επιθεωρήσεις ή άλλες 
τεχνικές αναθεώρησης. (Βλέπε το Γνωστικό Πεδίο της Ποιότητας Λογισμικού.) Όπως και με την πληρότητα, τα σφάλματα 
και οι προειδοποιήσεις, που δημιουργούνται από αυτά τα εργαλεία ανάλυσης και που εντοπίζονται από επιθεωρήσεις 
ή αναθεωρήσεις, υποδεικνύουν την ανάγκη διόρθωσης.

### *Αναλύοντας για Ορθότητα*

Η *ορθότητα* αφορά το βαθμό στον οποίο ένα μοντέλο ικανοποιεί τις απαιτήσεις και τις προδιαγραφές
σχεδιασμού λογισμικού, είναι απαλλαγμένο από ελαττώματα και τελικά πληροί τις ανάγκες των ενδιαφερόμενων 
φορέων. Η ανάλυση για την ορθότητα περιλαμβάνει τον έλεγχο της συντακτικής ορθότητας του μοντέλου 
(δηλαδή τη σωστή χρήση της γραμματικής και των κατασκευών της γλώσσας μοντελοποίησης) και τη σημασιολογική 
ορθότητα (αυτό είναι, η χρήση των κατασκευών της γλώσσας μοντελοποίησης για τη σωστή αναπαράσταση της έννοιας 
που μοντελοποιείται). Για την ανάλυση ενός μοντέλου για συντακτική και σημασιολογική ορθότητα, αυτό 
αναλύεται - είτε αυτοματοποιημένα (π.χ. χρησιμοποιώντας το εργαλείο μοντελοποίησης για να ελέγξει τη 
συντακτική ορθότητα του μοντέλου), είτε χειροκίνητα (χρησιμοποιώντας επιθεωρήσεις ή άλλες τεχνικές 
επανεξέτασης) - αναζητώντας δυνητικά σφάλματα και στη συνέχεια διορθώνοντας ή απομακρύνοντας τα επιβεβαιωμένα
 σφάλματα πριν από την κυκλοφορία του λογισμικού για χρήση.

### *Ιχνηλασιμότητα*

Η ανάπτυξη λογισμικού συνήθως περιλαμβάνει τη χρήση, τη δημιουργία και την τροποποίηση 
πολλών εργασιακών προϊόντων όπως έγγραφα σχεδιασμού, προδιαγραφές διαδικασίας, απαιτήσεις 
λογισμικού, διαγράμματα, σχέδια και ψευδο-κώδικας, χειρόγραφος και κώδικας που παράγεται 
από εργαλεία, εγχειρίδια και αυτοματοποιημένα πειραματικά αποτελέσματα και αναφορές, αρχεία 
και δεδομένα. Αυτά τα προϊόντα εργασίας μπορεί να μοιράζονται διάφορες εξαρτήσεις (π.χ. 
χρήσεις, υλοποιήσεις και ελέγχους). Καθώς το λογισμικό αναπτύσσεται, διαχειρίζεται, συντηρείται 
ή επεκτείνεται, αυτές οι σχέσεις ανιχνευσιμότητας πρέπει να αναγράφονται και να ελέγχονται 
για να δείξουν τη συνέπεια των απαιτήσεων λογισμικού με το μοντέλο λογισμικού (βλέπε την 
Ανιχνευσιμότητα Απαιτήσεων στην Γνωστικό Πεδίο Απαιτήσεων Λογισμικού) και των πολλών προϊόντων εργασίας.
Η χρήση της ανιχνευσιμότητας συνήθως βελτιώνει τη διαχείριση των προϊόντων εργασίας του λογισμικού 
και την ποιότητα της διαδικασίας του λογισμικού και διασφαλίζει στους ενδιαφερόμενους φορείς ότι 
όλες οι απαιτήσεις εκπληρώνονται. Η ανιχνευσιμότητα επιτρέπει ανάλυση των αλλαγών όταν το λογισμικό 
αναπτυχθεί και κυκλοφορήσει, διότι οι σχέσεις με τα προϊόντα εργασίας του λογισμικού μπορούν εύκολα 
να διασχιστούν για να αξιολογηθεί η επίδραση των αλλαγών. Τα εργαλεία μοντελοποίησης συνήθως βοηθούν 
στο να καθοριστούν και να διαχειριστούν αυτόματα ή χειροκίνητα τους συνδέσμους ανιχνευσιμότητας 
μεταξύ απαιτήσεων, σχεδιασμού, κώδικα και/ή οντοτήτων ελέγχου που μπορεί να αναπαριστούνται στα
μοντέλα και άλλα προϊόντα εργασίας λογισμικού. (Για περισσότερες πληροφορίες σχετικά με την 
ανιχνευσιμότητα, ανατρέξτε στο Γνωστικό Πεδίο της Διαχείρισης Συνδυασμού Λογισμικού.)

### *Ανάλυση Αλληλεπίδρασης*

Η *ανάλυση της αλληλεπίδρασης* επικεντρώνεται στις σχέσεις επικοινωνίας ή ελέγχου μεταξύ οντοτήτων που χρησιμοποιούνται
για την εκτέλεση μιας συγκεκριμένης εργασίας ή λειτουργίας εντός του μοντέλου λογισμικού. Αυτή η ανάλυση 
εξετάζει τη δυναμική συμπεριφορά των αλληλεπιδράσεων μεταξύ των διαφορετικών τμημάτων του μοντέλου λογισμικού, 
συμπεριλαμβανομένων άλλων στρωμάτων λογισμικού (όπως το λειτουργικό σύστημα, το ενδιάμεσο λογισμικό και οι εφαρμογές). 
Η εξέταση των αλληλεπιδράσεων μεταξύ της εφαρμογής λογισμικού και του λογισμικού διεπαφής χρήστη μπορεί επίσης να είναι 
σημαντική για μερικές εφαρμογές λογισμικού. Ορισμένα περιβάλλοντα μοντελοποίησης λογισμικού παρέχουν εγκαταστάσεις 
προσομοίωσης για τη μελέτη των πτυχών της δυναμικής συμπεριφοράς του μοντελοποιημένου λογισμικού. Με τη βοήθεια 
της προσομοίωσης, ο μηχανικός λογισμικού μπορεί να παρακολουθήσει τον σχεδιασμό της αλληλεπίδρασης και να επαληθεύσει 
ότι οι διαφορετικές μερίδες του λογισμικού λειτουργούν από κοινού για να παρέχουν τις επιθυμητές λειτουργίες.

## Μέθοδοι Τεχνολογίας Λογισμικού

Οι μέθοδοι μηχανικής λογισμικού παρέχουν μια οργανωμένη και συστηματική προσέγγιση για την ανάπτυξη λογισμικού 
για ένα συγκεκριμένο υπολογιστή. Υπάρχουν πολλές μέθοδοι από τις οποίες μπορεί να επιλέξει ο μηχανικός 
λογισμικού, και πρέπει να επιλέξει μια κατάλληλη μέθοδο ή μεθόδους για την ανάπτυξη λογισμικού ανάλογα 
με την εργασία που έχει αναλάβει. Αυτή η επιλογή μπορεί να επηρεάσει δραματικά την επιτυχία του έργου. 
Όταν οι μηχανικοί λογισμικού, συνεργαζόμενοι με ανθρώπους που διαθέτουν την κατάλληλη σειρά δεξιοτήτων 
και τα κατάλληλα εργαλεία, χρησιμοποιούν αυτές τις μεθόδους μηχανικής λογισμικού, μπορούν να οπτικοποιήσουν 
τις λεπτομέρειες του λογισμικού και τελικά να μετατρέψουν την αναπαράσταση σε μια σειρά εργασίας κώδικα και 
δεδομένων. 
Επιλεγμένες μέθοδοι μηχανικής λογισμικού συζητούνται παρακάτω. Οι θεματικές οργανώνονται σε 
συζητήσεις για τις Ευριστικές Μεθόδους, τις Τυπικές Μεθόδους, τις Μεθόδους Πρωτοτυποποίησης και τις Ευέλικτες Μεθόδους. 

### *Ευριστικές Μέθοδοι*

Οι ευρηστικές μέθοδοι είναι μεθόδοι μηχανικής λογισμικού που βασίζονται στην εμπειρία και εφαρμόζονται αρκετά ευρέως
στη βιομηχανία λογισμικού. Αυτή η θεματική περιοχή περιλαμβάνει τρεις ευρείες κατηγορίες συζήτησης μεθόδους δομημένης 
ανάλυσης και σχεδίασης, μεθόδους μοντελοποίησης δεδομένων και μεθόδους αντικειμενοστρεφούς ανάλυσης και σχεδίασης.

  * *Μέθοδοι δομημένης ανάλυσης και σχεδιασμού*: Αυτές οι μέθοδοι αναπτύσσουν το μοντέλο λογισμικού κυρίως από μια λειτουργική ή 
  συμπεριφορική οπτική γωνία. Ξεκινούν από μια υψηλού επιπέδου οπτική του λογισμικού (συμπεριλαμβανομένων των στοιχείων 
  δεδομένων και ελέγχου) και στη συνέχεια αναλύουν ή καλλιεργούν σταδιακά τα στοιχεία του μοντέλου μέσω όλο και πιο λεπτομερών 
  σχεδιασμών. Οι λεπτομερείς σχεδιασμοί καταλήγουν τελικά σε ένα σύνολο συγκεκριμένων λεπτομερειών ή προδιαγραφών λογισμικού 
  που πρέπει να κωδικοποιηθούν (χειροκίνητα, αυτόματα παραγόμενα ή και τα δύο), να κατασκευαστούν, να δοκιμαστούν και να 
  επαληθευτούν.
  * *Μέθοδοι μοντελοποίησης δεδομένων*: Το μοντέλο δεδομένων είναι κατασκευασμένο από την οπτική γωνία των δεδομένων ή των πληροφοριών 
  που χρησιμοποιούνται.Οι πίνακες δεδομένων και οι σχέσεις καθορίζουν τα μοντέλα δεδομένων. Αυτή η μέθοδος μοντελοποίησης χρησιμοποιείται 
  κυρίως για τον oρισμό και την ανάλυση των απαιτήσεων δεδομένων που υποστηρίζουν τους σχεδιασμούς βάσεων ή
  αποθετηρίων δεδομένων που συνήθως συναντώνται στο επιχειρηματικό λογισμικό, όπου διαχειρίζονται τα δεδομένα ενεργά ως ένα πόρο ή περουσιακό 
  στοιχείο των επιχειρηματικών συστημάτων.
  * *Μέθοδοι αντικειμενοστραφούς ανάλυσης και σχεδιασμού*: Το αντικειμενοστραφές μοντέλο αναπαρίσταται ως μια συλλογή αντικειμένων που 
  ενθυλακώνουν δεδομένα και σχέσεις και αλληλεπιδρούν με άλλα αντικείμενα μέσω μεθόδων. Τα αντικείμενα μπορεί να είναι αντικείμενα 
  του πραγματικού κόσμου ή εικονικά αντικείμενα. Το μοντέλο λογισμικού κατασκευάζεται χρησιμοποιώντας διαγράμματα που αποτελούν επιλεγμένες 
  προβολές του λογισμικού. Η σταδιακή καλλιέργεια των μοντέλων οδηγεί σε έναν λεπτομερή σχεδιασμό. Ο λεπτομερής σχεδιασμός εξελίσσεται στη συνέχεια 
  μέσω διαδοχικών επαναλήψεων ή μετατρέπεται (χρησιμοποιώντας κάποιο μηχανισμό) στην υλοποίηση του μοντέλου, όπου εκφράζονται ο κώδικας και η
  συσκευασία για τη μελλοντική κυκλοφορία και ανάπτυξη του λογισμικού.(Βλέπε Γνωστικό Πεδίο του Σχεδιασμού Λογισμικού, Γνωστικό Πεδίο των
  Απαιτήσεων Βασισμένων σε Μοντέλα και Απαιτήσεων Λογισμικού.)

### *Τυπικές Μέθοδοι*

Οι τυπικές μέθοδοι είναι μέθοδοι μηχανικής λογισμικού που εφαρμόζουν αυστηρές, μαθηματικά βασισμένες σημειογραφίες και γλώσσες για τον καθορισμό, την 
ανάπτυξη και την επαλήθευση του λογισμικού. Χρησιμοποιώντας μια γλώσσα προδιαγραφής, το μοντέλο λογισμικού μπορεί να ελεγχθεί συστηματικά για συνέπεια 
(ή έλλειψη αμφισημίας), πληρότητα και ορθότητα, είτε αυτόματα είτε ημιαυτόματα. Αυτό το θέμα σχετίζεται με το τμήμα Τυπική Ανάλυση στο Γνωστικό Πεδίο Απαιτήσεις Λογισμικού.
Αυτή η ενότητα ασχολείται με τις γλώσσες προδιαγραφής, την βελτίωση και την παράγωγη προγραμμάτων, την τυπική επαλήθευση και τη λογική εκπαίδευση.

  * *Γλώσσες προδιαγραφής*: Οι γλώσσες προδιαγραφής παρέχουν τη μαθηματική βάση για μια τυπική μέθοδο. Οι γλώσσες προδιαγραφής 
  είναι τυπικές γλώσσες υψηλότερου επιπέδου (όχι κλασική γλώσσα προγραμματισμού τρίτης γενιάς(3GL)) που χρησιμοποιούνται 
  κατά την προδιαγραφή λογισμικού, την ανάλυση απαιτήσεων και/ή τη σχεδίαση για την περιγραφή συγκεκριμένης συμπεριφοράς 
  εισόδου/εξόδου. Οι γλώσσες προδιαγραφής δεν είναι άμεσα εκτελέσιμες γλώσσες. Αντίθετα, συνήθως περιλαμβάνουν μια σημειογραφία και σύνταξη, 
  σημασιολογία για τη χρήση της σημειογραφίας και ένα σύνολο επιτρεπόμενων σχέσεων για αντικείμενα.
  * *Βελτίωση και παραγωγή προγράμματος*: Η βελτίωση προγράμματος δημιουργεί μια χαμηλότερου επιπέδου (ή πιο λεπτομερή) προδιαγραφή 
  χρησιμοποιώντας μια σειρά μετασχηματισμών. Μέσω διαδοχικών μετασχηματισμών, ο μηχανικός λογισμικού παράγει μια εκτελέσιμη αναπαράσταση
  ενός προγράμματος. Οι προδιαγραφές μπορούν να εκσυγχρονιστούν, προσθέτοντας λεπτομέρειες μέχρι το μοντέλο να μπορεί να διατυπωθεί σε μια
  γλώσσα προγραμματισμού 3ης γενιάς (3GL) ή σε ένα εκτελέσιμο τμήμα της επιλεγμένης γλώσσας προδιαγραφής. Αυτή η βελτίωση προδιαγραφής
  γίνεται δυνατή μέσω του ορισμού προδιαγραφών με ακριβείς σημασιολογικές ιδιότητες. Για παράδειγμα, οι προδιαγραφές πρέπει να περιγράφουν, 
  όχι μόνο τις σχέσεις μεταξύ οντοτήτων, αλλά και τις ακριβείς σημασίες κατά την εκτέλεση αυτών των σχέσεων και λειτουργιών. 
  * *Τυπική επαλήθευση*: Ο έλεγχος μοντέλου είναι μια τυπική μέθοδος επαλήθευσης. Συνήθως περιλαμβάνει την εκτέλεση αναζήτησης χώρου-καταστάσης ή
  ανάλυσης εφικτότητας για να δείξει ότι ο αναπαριστάμενος σχεδιασμός λογισμικού έχει ή διατηρεί κάποιες συγκεκριμένες ιδιότητες του μοντέλου που 
  είναι ενδιαφέρουσες. Ένα παράδειγμα ελέγχου μοντέλου είναι ένας αναλυτικός έλεγχος που επαληθεύει τη σωστή συμπεριφορά του προγράμματος κάτω από 
  όλες τις πιθανές αλληλουχίες άφιξης γεγονότων ή μηνυμάτων. Η τυπική επαλήθευση απαιτεί ένα αυστηρά καθορισμένο μοντέλο του λογισμικού και του 
  λειτουργικού του περιβάλλοντος. Αυτό το μοντέλο συνήθως έχει τη μορφή ενός αυτόματου μηχανισμού πεπερασμένων καταστάσεων ή άλλου τυπικά 
  ορισμένου αυτοματισμού.
  * *Λογικό συμπέρασμα*: Το λογικό συμπέρασμα είναι μια μέθοδος σχεδίασης λογισμικού που καθορίζει προϋποθέσεις και μετα-προϋποθέσεις γύρω 
  από κάθε σημαντική σχεδιαστική μονάδα. Χρησιμοποιώντας μαθηματική λογική, αναπτύσσει την απόδειξη ότι αυτές οι προϋποθέσεις και μετα-προϋποθέσεις 
  πρέπει να ισχύουν για όλες τις εισόδους. Αυτό επιτρέπει στον μηχανικό λογισμικού να προβλέπει τη συμπεριφορά του λογισμικού χωρίς να χρειάζεται 
  να εκτελεί το λογισμικό. Ορισμένα ενσωματωμένα περιβάλλοντα ανάπτυξης (IDEs) περιλαμβάνουν τρόπους για την αναπαράσταση αυτών των 
  αποδείξεων και του σχεδιασμού ή κώδικα.

### *Μέθοδοι Πρωτοτυποποίησης*

Η πρωτοτυποποίηση λογισμικού είναι μια δραστηριότητα που δημιουργεί γενικά μη ολοκληρωμένες ή ελάχιστα λειτουργικές εκδόσεις μιας εφαρμογής λογισμικού, 
συνήθως για τον έλεγχο συγκεκριμένων νέων χαρακτηριστικών, την αναζήτηση ανατροφοδότησης για τις απαιτήσεις του λογισμικού ή τις διεπαφές χρήστη, την 
περαιτέρω διερεύνηση των απαιτήσεων του λογισμικού, των σχεδιασμένων λογισμικών ή των επιλογών υλοποίησης, ή για την απόκτηση κάποιας άλλης χρήσιμης 
γνώσης για το λογισμικό. Ο μηχανικός λογισμικού επιλέγει μια μέθοδο πρωτοτυποποίησης για να κατανοήσει πρώτα τις λιγότερο κατανοητές πτυχές ή συστατικά 
του λογισμικού. Αυτή η προσέγγιση αντίθετα με άλλες μεθόδους μηχανικής λογισμικού που συνήθως ξεκινούν την ανάπτυξη με τα πιο κατανοητά τμήματα πρώτα. 
Συνήθως, το πρωτότυπο δεν γίνεται το τελικό προϊόν λογισμικού χωρίς έντονη ανάπτυξη, επεξεργασία ή ανακατασκευή.
Αυτή η ενότητα περιγράφει σύντομα τα διάφορα ύφη πρωτοτυποποίησης, τους στόχους και τις τεχνικές αξιολόγησης.

  * *'Υφος πρωτοτυποποίησης*: Τα ύφη πρωτοτυποποίησης περιγράφουν τις διάφορες προσεγγίσεις για την ανάπτυξη πρωτοτύπων. Ένα πρωτότυπο μπορεί να 
  αναπτυχθεί ως απορρίψιμος κώδικας ή ως ένα προϊόν από χαρτί, ως μια εξέλιξη μιας λειτουργικής σχεδίασης ή ως μια εκτελέσιμη προδιαγραφή. Διαφορετικές 
  διαδικασίες ζωής πρωτοτύπων συνήθως χρησιμοποιούνται για κάθε ύφος. Η επιλογή του ύφους βασίζεται στον τύπο των αποτελεσμάτων που χρειάζεται το έργο, 
  την ποιότητα των αποτελεσμάτων που απαιτούνται και την επείγουσα φύση των αποτελεσμάτων.
  * *Στόχος πρωτοτυποποίησης*: Ο στόχος της πρωτοτυποποίησης είναι το συγκεκριμένο προϊόν που εξυπηρετείται από την προσπάθεια πρωτοτυποποίησης. Παραδείγματα 
  στόχων πρωτοτυποποίησης μπορεί να είναι η προδιαγραφή απαιτήσεων, ένα στοιχείο ή μια συνιστώσα αρχιτεκτονικής σχεδίασης, ένας αλγόριθμος και ένα διεπαφή 
  χρήστη ανθρώπου-μηχανής.
  * *Τεχνικές αξιολόγησης πρωτοτύπων*: Ο μηχανικός λογισμικού ή άλλα ενδιαφερόμενα μέρη του έργου μπορούν να χρησιμοποιήσουν ή να αξιολογήσουν το πρωτότυπο με 
  πολλούς τρόπους, καθοδηγούμενοι κυρίως από τους υποκείμενους λόγους που οδήγησαν στην ανάπτυξη του πρωτοτύπου. Τα πρωτότυπα μπορούν να αξιολογηθούν ή να 
  δοκιμαστούν έναντι του υλοποιημένου λογισμικού ή των απαιτήσεων στόχου (π.χ. ένα πρωτότυπο απαιτήσεων). Το πρωτότυπο ενδέχεται επίσης να χρησιμεύσει ως μοντέλο για 
  τη μελλοντική ανάπτυξη λογισμικού (π.χ. όπως σε μια προδιαγραφή διεπαφής χρήστη).

### *Ευέλικτες Μέθοδοι*

Οι Ευέλικτες μέθοδοι αναπτύχθηκαν τη δεκαετία του 1990 για να μειώσουν το μεγάλο φόρτο που συνδέεται με τις "βαριές" μεθόδους που χρησιμοποιούνται σε μεγάλα 
έργα ανάπτυξης λογισμικού βασισμένα σε σχέδια. Οι Ευέλικτες μέθοδοι θεωρούνται "ελαφριές" λόγω των σύντομων, επαναληπτικών κύκλων ανάπτυξης, των αυτοοργανωμένων 
ομάδων, των απλοποιημένων σχεδίων, της αναδιοργάνωσης του κώδικα, της ανάπτυξης με βάση τις δοκιμές, της συχνής συμμετοχής του πελάτη και της έμφασης στη δημιουργία 
ενός αποδείξιμου λειτουργικού προϊόντος σε κάθε κύκλο ανάπτυξης.

Υπάρχουν πολλές Ευέλικτες μέθοδοι διαθέσιμες στη βιβλιογραφία. Ορισμένες πιο δημοφιλείς προσεγγίσεις περιλαμβάνουν τη γρήγορη ανάπτυξη εφαρμογών (Rapid Application 
Development-RAD), το eXtreme Programming (XP), το Scrum και την ανάπτυξη με βάση τα χαρακτηριστικά (Feature-Driven Development-FDD).

  * *RAD*: Οι μέθοδοι ταχείας ανάπτυξης λογισμικού χρησιμοποιούνται κυρίως στην ανάπτυξη εφαρμογών επιχειρηματικών συστημάτων που απαιτούν έντονη επεξεργασία 
  δεδομένων. Ο RAD επιτυγχάνεται με τη χρήση ειδικών εργαλείων ανάπτυξης βάσεων δεδομένων που χρησιμοποιούνται από τους μηχανικούς λογισμικού για τη γρήγορη 
  ανάπτυξη, δοκιμή και εφαρμογή νέων ή τροποποιημένων επιχειρηματικών εφαρμογών.
  * *XP*: Αυτή η προσέγγιση χρησιμοποιεί ιστορίες ή σενάρια για τις απαιτήσεις, αναπτύσσει πρώτα τα τεστ, έχει άμεση συμμετοχή του πελάτη στην ομάδα (συνήθως καθορίζοντας
  τα τεστ αποδοχής), χρησιμοποιεί προγραμματισμό ζευγών και παρέχει συνεχή αναδιοργάνωση και ολοκλήρωση του κώδικα. Οι εκδοχές αναλύονται σε εργασίες, ιεραρχούνται, 
  εκτιμώνται, αναπτύσσονται και ελέγχονται. Κάθε αύξηση του λογισμικού δοκιμάζεται με αυτοματοποιημένα και χειροκίνητα τεστ. Μια αύξηση μπορεί να κυκλοφορήσει συχνά, όπως 
  κάθε δύο εβδομάδες.
  * *Scrum*: Αυτή η Ευέλικτη προσέγγιση είναι πιο φιλική προς τη διαχείριση έργων από τις άλλες. Ο διαχειριστής του Scrum διαχειρίζεται τις δραστηριότητες μέσα στην 
  αύξηση του έργου. Κάθε αύξηση ονομάζεται *sprint* και διαρκεί το πολύ 30 ημέρες. Αναπτύσσεται μια λίστα με αντικείμενα του προϊόντος (Product Backlog Item-PBI): στόχοι 
  από αυτή την λίστα αναγνωρίζονται, ορίζονται, ιεραρχούνται και εκτιμώνται. Μια λειτουργική έκδοση του λογισμικού δοκιμάζεται και κυκλοφορεί σε κάθε αύξηση. Οι καθημερινές 
  συναντήσεις Scrum εξασφαλίζουν ότι η εργασία διαχειρίζεται σύμφωνα με το σχέδιο.
  * *FDD*: Αυτή είναι μια προσέγγιση λογισμικού που βασίζεται στο μοντέλο, με σύντομη και επαναληπτική διαδικασία ανάπτυξης λογισμικού που αποτελείται από πέντε φάσεις: 
  (1) ανάπτυξη ενός μοντέλου προϊόντος για τον περιορισμό του εύρους του πεδίου, (2) δημιουργία της λίστας αναγκών ή χαρακτηριστικών, (3) κατασκευή του σχεδίου ανάπτυξης 
  των χαρακτηριστικών, (4) ανάπτυξη σχεδίων για ειδικά για επανάληψη χαρακτηριστικά και (5) κώδικας, δοκιμή και ένταξη των χαρακτηριστικών. Το FDD είναι παρόμοιο με μια
  επικρατούσα προσέγγιση αυξητικής ανάπτυξης λογισμικού. Είναι παρόμοιο με το XP, με τη διαφορά ότι η ιδιοκτησία του κώδικα ανατίθεται σε άτομα αντί στην ομάδα. Επιπλέον, 
  το FDD τονίζει μια συνολική αρχιτεκτονική προσέγγιση για το λογισμικό, η οποία προωθεί την κατασκευή των χαρακτηριστικών με σωστό τρόπο από την πρώτη φορά αντί να 
  βασίζεται σε συνεχή ανακατασκευή.

Υπάρχουν πολλές περισσότερες παραλλαγές των Ευέλικτων μεθόδων στη βιβλιογραφία και στην πράξη. Θα υπάρχει πάντα χώρος για τις "βαριές", βάσει σχεδίου μεθόδους μηχανικής λογισμικού,
καθώς και για τις περιπτώσεις όπου οι Ευέλικτες μέθοδοι λάμπουν. Επιπλέον, νέες μέθοδοι προκύπτουν από τον συνδυασμό των Εύελικτων και των βάσει σχεδίου μεθόδων: Οι ειδικοί καθορίζουν αυτές τις 
νέες μέθοδους για να ισορροπήσουν τα χαρακτηριστικά από τις "βαριές" και "ελαφριές" μεθόδους, με βάση κυρίως τις επιχειρησιακές ανάγκες του οργανισμού. Αυτές οι επιχειρησιακές ανάγκες, όπως 
καθορίζονται από τους εμπλεκόμενους φορείς του έργου, πρέπει και τυπικά όντως καθορίζουν την επιλογή της μεθόδου μηχανικής λογισμικού.
