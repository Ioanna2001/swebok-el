# Διοίκηση τεχνολογίας λογισμικού {#softengmng}

## Συντομογραφίες

|*PMBOK®* |						  |
|*Guide*	|*Guide to the Project Management Body of Knowledge* |
|SDLC     |Software Development Life Cycle                     |
|SEM      |Software Engineering Management                     |
|SQA      |Software Quality Assurance                          |
|*SWX*	  |*Software Extension to the PMBOK® Guide*		         |
|WBS	    |Work Breakdown Structure			                       |
|PSM      |Practical Software and Systems Measurement          |

## Εισαγωγή

Η Διοίκηση τεχνολογίας λογισμικού (SEM) μπορεί να οριστεί ως μία συλλογή 
δραστηριοτήτων εργασίας που εμπλέκονται στο σχεδιασμό, την εκτίμηση,
τη μέτρηση, τον έλεγχο, το συντονισμό, την καθοδήγηση και τη διαχείριση 
των παραγόντων κινδύνου για ένα έργο λογισμικού, ώστε να διασφαλιστεί ότι
τα προϊόντα λογισμικού και οι υπηρεσίες τεχνολογίας λογισμικού διανέμονται 
αποδοτικά, αποτελεσματικά και προς όφελος των ενδιαφερόμενων μερών [3].
Μολονότι η διοίκηση έργων και η διοίκηση μετρήσεων συχνά θεωρούνται 
διαφορετικοί τομείς, και ο καθένας διαθέτει πολλά μοναδικά χαρακτηριστικά,
η στενή σχέση μεταξύ τους έχει οδηγήσει στην από κοινού αντιμετώπιση τους
σε αυτό το γνωστικό πεδίο (KA).

Κατά μία έννοια, θα πρέπει να είναι δυνατή η διοίκηση ενός έργου τεχνολογίας
λογισμικού με τον ίδιο τρόπο που διοικούνται και άλλα πολύπλοκα εγχειρήματα,
χρησιμοποιώντας μοντέλα, τεχνικές διεργασίες και τρόπους επίλυσης προβλημάτων,
όπως κάνουν και άλλα έργα μηχανικής. Ωστόσο, οι μηχανικοί λογισμικού κάνουν
χρήση διαφορετικών μοντέλων διεργασιών, τεχνικών διαδικασιών και τρόπων
επίλυσης προβλημάτων σε σχέση με άλλους μηχανικούς, κάνοντας αυτές τις
επιλογές με βάση την εκπαίδευση, την εμπειρία τους και τις διαφορές μεταξύ
φυσικών χαρακτηριστικών και χαρακτηριστικών λογισμικού. Οι συνιστώσες του
συστήματος λογισμικού είναι λογικές κατασκευές εκφρασμένες σε λογαριθμική
μορφή, ενώ τα φυσικά στοιχεία συστήματος υλοποιούνται σε μηχανικά, ηλεκτρικά,
χημικά, βιολογικά και άλλα φυσικά μέσα. Το λογισμικό είναι άυλο επειδή δεν
έχει φυσικές ιδιότητες και είναι εύπλαστο λόγω της σχετικής ευκολίας με την
οποία μπορεί να τροποποιηθεί ο κώδικας. Η επίτευξη του επιθυμητού αποτελέσματος
μέσω της τροποποίησης του κώδικα ενδέχεται να μην είναι εύκολη, ωστόσο οι
τροποποιήσεις του κώδικα, αυτές καθαυτές, είναι απλές σε σύγκριση με την
τροποποίηση φυσικών στοιχείων που έχουν ήδη κατασκευαστεί [12].

Καθώς το λογισμικό και τα ενσωματωμένα σε αυτό συστήματα γίνονται μεγαλύτερα,
πιο πολύπλοκα και πιο αλληλένδετα, οι ρόλοι διοίκησης και τεχνολογίας λογισμικού 
εξελίσσονται ως αποτέλεσμα [10], μιας και τα εξειδικευμένα άτομα πρέπει να
αναπτύσσουν και να συντηρούν ενεργά αυτά τα συστήματα. Σκεφτείτε τα εξής: το
υλικό διαφέρει από το λογισμικό (και δεν είναι όλα τα λογισμικά ίδια). Το υλικό
δύναται να αναπτυχθεί, αποκτηθεί και συντηρηθεί με γραμμικό τρόπο. Το λογισμικό
είναι μία διαρκής ικανότητα που χρήζει υποστήριξης και συνεχούς βελτίωσης
καθ' όλη τη διάρκεια του κύκλου ζωής του [13]. Επιπλέον, η εύπλαστη μορφή του
λογισμικού επιτρέπει την επαναληπτικότητα και την αλληλοδιαδοχή μεταξύ των
φάσεων ανάπτυξης (σε πολύ μεγαλύτερο βαθμό από ό,τι είναι δυνατό κατά την
ανάπτυξη φυσικών τεχνουργημάτων).

Το λογισμικό δημιουργείται από ανθρώπους και προορίζεται για αυτούς, οπότε
το ψηφιακό χάρισμα είναι σημαντικό. Τα έργα λογισμικού αποκτούν ολοένα και
μεγαλύτερη βαρύτητα και η διαρκής επιτυχία τους εξαρτάται σε μεγάλο βαθμό από
την ύπαρξη ανθρώπων με τις κατάλληλες δεξιότητες, γνώσεις και ικανότητες. Η εν
λόγω διαπίστωση είναι κατά βάση πραγματική και αναγκαία αλλά όχι επαρκής. Άλλοι
ανθρώπινοι παράγοντες ίσως επηρεάσουν την επιτυχία του έργου. Κατά τη διάρκεια
του κύκλου ζωής της ανάπτυξης λογισμικού, είναι αδύνατο να διαχωριστούν οι
ανθρώπινοι παράγοντες από τους τεχνικούς. Ως εκ τούτου, οι δραστηριότητες
διοίκησης ανθρώπων, όπως η ομάδα και η ομαδική εργασία, η ηγεσία, η επικοινωνία
και οι ενέργειες συντονισμού, είναι σημαντικές για την επιτυχία του έργου.

Οι πολιτισμικές διαφορές και οι ποικιλόμορφες συμπεριφορές είναι ενδεικτικοί
παράγοντες επηρεασμού της ομάδας ανάπτυξης του έργου. Η αποτυχία ενός σημαντικού
αριθμού έργων λογισμικού οφείλεται σε κοινωνικά ζητήματα. Οι προγραμματιστές με
ανεπαρκή προσόντα είναι πιθανό να παράξουν μη ποιοτικά προϊόντα, επιφέροντας
αύξηση του κόστους των επανεκτελέσεων για την απαλοιφή των ιχνών ελλιπούς
ποιότητας.

Άλλα ζητήματα μπορεί να περιπλέξουν την αποτελεσματική διοίκηση των έργων
λογισμικού και των διεργασιών του κύκλου ζωής του λογισμικού, συμπεριλαμβανομένων
των ακόλουθων:

  * Οι πελάτες συχνά δεν γνωρίζουν τι χρειάζεται ή τι είναι εφικτό.
  * Η αυξημένη κατανόηση και οι μεταβαλλόμενες συνθήκες πιθανώς θα
  δημιουργήσουν νέες ή αλλαγμένες απαιτήσεις λογισμικού.
  * Οι πελάτες συχνά δεν αντιλαμβάνονται την έμφυτη πολυπλοκότητα
  της τεχνολογίας λογισμικού, ιδίως όσον αφορά τον αντίκτυπο των
  μεταβαλλόμενων απαιτήσεων.
  * Ως αποτέλεσμα των μεταβαλλόμενων απαιτήσεων και της μεταβλητότητας
  του, το λογισμικό συχνά χτίζεται επαναληπτικά και όχι ως μία γραμμική
  ακολουθία φάσεων.
  * Το λογισμικό είναι θεωρητικά μία διαρκής ικανότητα που πρέπει να
  υποστηρίζεται και να βελτιώνεται συνεχώς καθ' όλη τη διάρκεια του κύκλου
  ζωής του.
  * Η κατασκευή λογισμικού διαφέρει από την εφαρμογή υλικού ως προς το ότι
  ο σχεδιασμός συνήθως αποτελεί μέρος της κατασκευής λογισμικού, ενώ στα
  συστήματα προσανατολισμένα προς το υλικό, ο σχεδιασμός προηγείται της
  εφαρμογής του υλικού, έτσι ώστε να "ολοκληρωθεί σωστά" πριν την απόκτηση
  ή την κατασκευή υλικού [12].
  * Η τεχνολογία λογισμικού απαραίτητα ενσωματώνει τη δημιουργικότητα και
  την πειθαρχεία. Η διατήρηση της κατάλληλης ισορροπίας μεταξύ αυτών των δύο,
  ενίοτε είναι δύσκολη [5].
  * Η ανάπτυξη δυνατοτήτων του λογισμικού εμπεριέχει συχνά υψηλό βαθμό
  καινοτομίας και πολυπλοκότητας.
  * Κατά κανόνα, η υποκείμενη τεχνολογία έχει υψηλό ρυθμό μεταβλητότητας.
  * Το λογισμικό υπολογιστών έχει καταστεί βασικό δομικό στοιχείο των
  περισσοτέρων σύγχρονων συστημάτων. Το λογισμικό έχει αναχθεί σε ιδιαίτερα
  σημαντικό παράγοντα λόγω της ευελιξίας του και του σχετικά χαμηλού κόστους
  αναπαραγωγής σε σύγκριση με το υλικό.
  * Το λογισμικό, ως άυλο παραδοτέο, είναι δύσκολο να μετρηθεί. Οι φυσικές
  μονάδες μέτρησης, όπως το μήκος και το βάρος, είναι δύσκολο να εφαρμοστούν
  στο λογισμικό. Αυτή η δυσκολία επηρεάζει τον τρόπο σχεδιασμού, παρακολούθησης
  και ελέγχου των έργων ανάπτυξης λογισμικού.
  * Η επεξεργασία λογισμικού εξαλείφει τα σφάλματα και είναι μέσο ανταπόκρισης
  στις αλλαγές.
  * Η ταχύτητα και ο χρόνος ολοκλήρωσης κύκλων είναι σημαντικές παράμετροι για
  τη διοίκηση του λογισμικού. Οι δυνατότητες του λογισμικού διανέμονται συχνά
  με αυξημένη ταχύτητα για να ικανοποιήσουν επιχειρηματικές ανάγκες και
  ανάγκες στα πλαίσια της κοινής αποστολής [13].

Οι δραστηριότητες της Διοίκησης τεχνολογίας λογισμικού (SEM) συναντώνται σε τρία
επίπεδα: Διοίκηση οργάνωσης και υποδομών, διοίκηση έργων και διαχείριση
προγραμμάτων μέτρησης. Τα δύο τελευταία καλύπτονται λεπτομερώς στην περιγραφή
του συγκεκριμένου γνωστικού πεδίου (KA). Το γεγονός αυτό δεν υποβαθμίζει τη
σπουδαιότητα ζητημάτων που αφορούν τη διοίκηση οργάνωσης και υποδομών,
αλλά μάλλον επισημαίνει ότι οι διευθυντές τεχνολογίας λογισμικού του
οργανισμού θα πρέπει να είναι εξοικειωμένοι με θέματα διοίκησης έργων και
μέτρησης λογισμικού που περιγράφονται σε αυτό το γνωστικό πεδίο (KA). Επίσης, θα
πρέπει να διαθέτουν κάποιες γνώσεις επί του υποκείμενου τομέα (τεχνολογία
λογισμικού). Ομοίως, βοηθά επιπλέον τους διευθυντές σύνθετων έργων και
προγραμμάτων, όπου το λογισμικό αποτελεί μέρος της αρχιτεκτονικής του
συστήματος να γνωρίζουν ποια ζητήματα εισάγουν οι διεργασίες τεχνολογίας
λογισμικού (έναντι άλλων τύπων διεργασιών μηχανικής) στη διοίκηση και μέτρηση
έργων.

Άλλες πτυχές της οργανωσιακής διοίκησης έχουν αντίκτυπο στην τεχνολογία
λογισμικού, για παράδειγμα οργανωσιακές πολιτικές και διαδικασίες, που
παρέχουν το πλαίσιο για τα έργα τεχνολογίας λογισμικού. Οι εν λόγω πολιτικές
και διαδικασίες ενδεχομένως να χρειαστεί να προσαρμοστούν για την αποτελεσματική
ανάπτυξη λογισμικού και τις απαιτήσεις συντήρησης του. Επιπρόσθετα, ενδέχεται να
χρειαστεί να εφαρμοσθούν ή να καθιερωθούν διάφορες πολιτικές σε συνάφεια με την
τεχνολογία λογισμικού για την αποτελεσματική της διοίκηση σε οργανωσιακό επίπεδο.
Ενδεικτικά, οι πολιτικές είναι συνήθως απαραίτητες για την εδραίωση συγκεκριμένων
διεργασιών ή διαδικασιών σε οργανωσιακό επίπεδο για καθήκοντα τεχνολογίας
λογισμικού, όπως ο σχεδιασμός, η κατασκευή, η εκτίμηση, η παρακολούθηση λογισμικού
αλλά και η υποβολή εκθέσεων επ' αυτού. Τέτοιες πολιτικές είναι σημαντικές για τη
μακροπρόθεσμη αποτελεσματική διοίκηση έργων τεχνολογίας λογισμικού κατά πλάτος του
οργανισμού (λ.χ. μια τέτοια πολιτική θα μπορούσε να καθιερώσει μία συνεπή αρχή,
για την ανάλυση της απόδοσης παρελθόντων έργων και την εφαρμογή βελτιώσεων).

Μια άλλη σημαντική πτυχή της οργανωσιακής διοίκησης είναι η χρήση πολιτικών και
διαδικασιών διαχείρισης προσωπικού για την πρόσληψη, την εκπαίδευση και την
καθοδήγηση - όχι μόνο για την επιτυχία ενός έργου, αλλά και για τη μακροπρόθεσμη
επιτυχία του οργανισμού. Δεδομένης της προβλεπόμενης έλλειψης εξειδικευμένων
μηχανικών λογισμικού, είναι σημαντικό να παρέχεται ένα περιβάλλον που προσελκύει
και διατηρεί τα καλά ταλέντα. Το ανθρώπινο δυναμικό της τεχνολογίας λογισμικού μπορεί
να παρουσιάζει μοναδικές προκλήσεις εκπαίδευσης ή διαχείρισης του (λ.χ. διατήρηση
συγχρονισμού σε ένα περιβάλλον όπου η υποκείμενη τεχνολογία υφίσταται ταχεία και
συνεχή αλλαγή) στο πλαίσια της επαγγελματικής εξέλιξης.

Η διαχείριση της επικοινωνίας αναφέρεται επίσης συχνά ως μια παραμελημένη αλλά
σημαντική πτυχή της επιτυχίας σε έναν τομέα όπου είναι απαραίτητη η ακριβής
κατανόηση των αναγκών των χρηστών, των απαιτήσεων λογισμικού και των σχεδιασμού του.
Επιπλέον, είναι επιθυμητή η διαχείριση χαρτοφυλακίου, η οποία παρέχει μια συνολική
εικόνα του υπό ανάπτυξη λογισμικού σε διάφορα έργα και προγράμματα (ολοκληρωμένα έργα),
του προγραμματισμένου λογισμικού και του εν λειτουργία λογισμικού σε έναν οργανισμό.
Επίσης, η επαναχρησιμοποίηση λογισμικού μπορεί να αποτελέσει βασικό παράγοντα για τη
διατήρηση και τη βελτίωση της παραγωγικότητας και της ανταγωνιστικότητας.
Η αποτελεσματική επαναχρησιμοποίηση απαιτεί ένα στρατηγικό όραμα που να αντικατοπτρίζει
τα πλεονεκτήματα και τα μειονεκτήματα της.

Οι μηχανικοί λογισμικού θα πρέπει να έχουν μια καλή κατανόηση των πτυχών της διοίκησης
που είναι μοναδικές για τα έργα λογισμικού, και θα πρέπει επίσης να έχουν κάποιες
γνώσεις των γενικότερων πτυχών της διοίκησης που συζητώνται σε αυτόν το γνωστικό πεδίο (KA)
(ακόμη και στα πρώτα χρόνια μετά την αποφοίτηση τους).

Ορισμένα χαρακτηριστικά της οργανωσιακής κουλτούρας και συμπεριφοράς, καθώς και η
διαχείριση λειτουργικών περιοχών της επιχείρησης εκτός του άμεσου πεδίου της
τεχνολογίας λογισμικού, μπορούν να επηρεάσουν τις διαδικασίες τεχνολογίας λογισμικού
ενός οργανισμού, έστω και έμμεσα. Τα έργα λογισμικού συχνά στοχεύουν στην αλλαγή του
τρόπου εργασίας των ανθρώπων - εντούτοις η αλλαγή της κουλτούρας είναι δύσκολη,
περίπλοκη και είναι απίθανο να πραγματωθεί χωρίς σημαντική προσπάθεια. Για το λόγο
αυτό, η ηγεσία είναι ένα σημαντικό χαρακτηριστικό για τους διοικούντες προγραμμάτων,
καθώς συχνά πρέπει να ηγηθούν του ψηφιακού μετασχηματισμού. Μπορεί να χρειαστεί να
κινητοποιήσουν τις ομάδες τους και άλλους ενδιαφερόμενους ώστε να αποδώσουν το
μέγιστο σε κάθε έργο που επιδιώκει σημαντικές αλλαγές.

Αναλυτικές πληροφορίες σχετικά με τη διοίκηση έργων λογισμικού μπορούν
να βρεθούν στον οδηγό *<Guide to the Project Management Body of Knowledge>
(PMBOK® Guide)* και στο *Software Extension to the PMBOK® Guide* (*SWX*) [1, 2].
Καθένας από αυτoύς τους οδηγούς περιλαμβάνει δέκα γνωστικά πεδία (KAs) διοίκησης έργων:
διοίκηση της ολοκλήρωσης έργων, διοίκηση του πεδίου δράσης των έργων, διαχείριση
χρόνου/προγραμματισμού έργων, διαχείριση κόστους έργων, διοίκηση ποιότητας έργων,
διοίκηση πόρων/ανθρωπίνου δυναμικού έργων, διοίκηση επικοινωνίας έργων,
διαχείριση κινδύνων έργων, διαχείριση συμβάσεων έργων και διοίκηση των ενδιαφερόμενων
μερών των έργων. Κάθε γνωστικό πεδίο (KA) είναι άμεσα συνυφασμένο με το γνωστικό πεδίο (KA)
της Διοίκησης τεχνολογίας λογισμικού (SEM).

Επιπρόσθετες πληροφορίες παρέχονται επίσης στις παραπομπές και στον κατάλογο
περεταίρω ανάγνωσης στο τέλος του κεφαλαίου. 

Το γνωστικό πεδίο (KA) της Διοίκησης τεχνολογίας λογισμικού (SEM) εξετάζει τις διεργασίες
της διοίκησης έργων λογισμικού, που παρουσιάζονται ως τα πέντε πρώτα θέματα στο
υπόδειγμα 9.1 (Έναρξη και ορισμός πεδίου εφαρμογής, Προγραμματισμός έργων λογισμικού,
Υλοποίηση έργων λογισμικού, Επιθεώρηση και αξιολόγηση, Τερματισμός), καθώς και τη
Μέτρηση τεχνολογίας λογισμικού (το έκτο θέμα που παρουσιάζεται στο υπόδειγμα) και τα
Εργαλεία διοίκησης τεχνολογίας λογισμικού (το έβδομο θέμα).

Δυστυχώς, μια κοινή αντίληψη της βιομηχανίας λογισμικού είναι ότι τα προϊόντα
λογισμικού παραδίδονται με καθυστέρηση, υπερβαίνουν τον προϋπολογισμού, είναι
κακής ποιότητας, και έχουν ελλιπή λειτουργικότητα. Η διοίκηση βάσει της πληροφορίας
των μετρήσεων - βασική αρχή για κάθε πραγματικό επιστημονικό κλάδο της μηχανικής
(βλ. Measurement στην ενότητα Engineering Foundations KA) μπορεί να συμβάλλει
στη βελτίωση της αντιληπτικής ικανότητας και της πραγματικότητας. Ουσιαστικά,
η διοίκηση χωρίς μέτρηση (ποιοτική ή ποσοτική) υποδηλώνει έλλειψη πειθαρχίας,
αλλά και η μέτρηση χωρίς διοίκηση σηματοδοτεί έλλειψη σκοπού ή πλαισίου.
Οι μηχανικοί λογισμικού ώστε να είναι αποτελεσματικοί, πρέπει να κάνουν χρήση
τόσο της μέτρησης όσο και της διοίκησης.

Στα πλαίσια αυτά, υιοθετούνται οι ακόλουθοι ορισμοί εργασίας:

  * Η *Διοίκηση* είναι ένα σύστημα διεργασιών και ελέγχων που απαιτούνται για την
  επίτευξη των στρατηγικών στόχων, που έχουν τεθεί από τον οργανισμό.
  * Η *Μέτρηση* αναφέρεται στην ανάθεση τιμών και επιγραφών στα προϊόντα εργασίας
  τεχνολογίας λογισμικού, τις διεργασίες και τους πόρους τεχνολογίας λογισμικού
  καθώς και στα μοντέλα που πηγάζουν από αυτά, είτε αυτά τα μοντέλα αναπτύσσονται
  με την χρήση στατιστικών είτε άλλων τεχνικών [3*, c7, c8].

Οι ενότητες της διοίκησης έργων τεχνολογίας λογισμικού του παρόντος γνωστικού
πεδίου (KA) κάνουν εκτεταμένη χρήση της ενότητας <Μέτρηση τεχνολογίας λογισμικού>.

Το συγκεκριμένο γνωστικό πεδίο (KA) είναι στενά συνδεδεμένο με άλλα γνωστικά
πεδία του *οδηγού SWEBOK*, με την ανάγνωση της περιγραφής των παρακάτω γνωστικών
πεδίων να είναι ιδιαιτέρως χρήσιμη στην κατανόηση του παρόντος:

  * Το γνωστικό πεδίο (KA) των Θεμελίων μηχανικής/Engineering Foundations στον
  οδηγό SWEBOK περιγράφει μερικές γενικές έννοιες της μέτρησης που έχουν
  άμεση εφαρμογή στην ενότητα της Μέτρησης τεχνολογίας λογισμικού του
  τρέχοντος γνωστικού πεδίου (KA). Επιπρόσθετα, οι έννοιες και οι τεχνικές,
  που παρουσιάζονται στην ενότητα Στατιστική ανάλυση/Statistical Analysis
  του γνωστικού πεδίου (KA) των Θεμελίων μηχανικής/Engineering Foundations,
  εφαρμόζονται άμεσα σε πολλά θέματα του παρόντος γνωστικού πεδίου (KA).
  * Το γνωστικό πεδίο (KA) των Απαιτήσεων λογισμικού/Software Requirements περιγράφει
  τις δραστηριότητες που πρέπει να εκτελούνται κατά τη φάση Έναρξης και ορισμού
  πεδίου εφαρμογής του έργου.
  * Το γνωστικό πεδίο (KA) της Διαχείρισης διάρθρωσης λογισμικού/Software Configuration
  Management ασχολείται με την αναγνώριση, τον έλεγχο, την καταγραφή της κατάστασης
  και την επιθεώρηση των διαμορφώσεων λογισμικού, μαζί με τη διαχείριση και την
  παράδοση εκδόσεων λογισμικού και τα εργαλεία διαχείρισης διαρθρώσεων λογισμικού.
  * Το γνωστικό πεδίο (KA) των Διεργασιών τεχνολογίας λογισμικού/Software Engineering
  Processes περιγράφει τα μοντέλα του κύκλου ζωής του λογισμικού και τις σχέσεις
  μεταξύ διεργασιών και προϊόντων εργασίας.
  * Το γνωστικό πεδίο (KA) της Ποιότητας λογισμικού/Software Quality δίνει έμφαση
  στην ποιότητα ως διοικητικό στόχο και ως σκοπό πολλών δραστηριοτήτων τεχνολογίας
  λογισμικού.
  * Το γνωστικό πεδίο (KA) των Οικονομικών τεχνολογίας λογισμικού/Software Engineering
  Economics πραγματεύεται τον τρόπο λήψης αποφάσεων που σχετίζονται με λογισμικό
  σε επιχειρηματικό πλαίσιο.

## Κατανομή των θεμάτων για τη Διοίκηση τεχνολογίας λογισμικού

Η κατανομή των θεμάτων για τα γνωστικά πεδία της Διοίκησης τεχνολογίας 
λογισμικού απεικονίζεται στο [Υπόδειγμα 9.1](#fig-softengmng-tree).

Λόγω του ότι τα περισσότερα μοντέλα κύκλου ζωής ανάπτυξης λογισμικού ΚΖΑΛ (SDLC)
απαιτούν παρόμοιες δραστηριότητες που θα μπορούσαν να εκτελεστούν με διαφορετικούς
τρόπους, η κατανομή των θεμάτων, που παρουσιάζεται στο Υπόδειγμα 1, γίνεται με βάση τις
δραστηριότητες. Τα στοιχεία που εμφανίζονται στο υπόδειγμα σε ανώτατο επιπέδου είναι
δραστηριότητες που συνήθως εκτελούνται κατά τη διοίκηση ενός έργου ανάπτυξης
λογισμικού, ανεξάρτητα από το ποιο μοντέλο κύκλου ζωής ανάπτυξης λογισμικού
(ΚΖΑΛ/SDLC) χρησιμοποιείται (βλ. Μοντέλα κύκλου ζωής λογισμικού στο γνωστικό πεδίο
(KA) των Διεργασιών τεχνολογίας λογισμικού). Η παρούσα κατανομή δεν συνιστά ένα
συγκεκριμένο μοντέλο κύκλου ζωής. Ωστόσο, είναι άξια αναφοράς η επίδραση που μπορεί
να έχει η επιλογή του λογισμικού στην επιχειρησιακή επιτυχία αλλά και η σχετική
ανάπτυξη μοντέλων κύκλου ζωής λογισμικού για την προσαρμογή στις μεταβαλλόμενες
επιχειρηματικές ανάγκες.

Η ταχύτητα παράδοσης, η συνεχής προσαρμογή και η συχνότητα αρθρωτών αναβαθμίσεων για
τη διανομή νέων δυνατοτήτων, αποτελούν συχνά βασικούς επιχειρηματικούς παράγοντες
διαφοροποίησης και επιτακτική ανάγκη διοίκησης έργων [11, 13]. Αυτές οι επιταγές
θα πρέπει να εξισορροπούνται με δραστηριότητες διαχείρισης κινδύνων.

Έχουν αναπτυχθεί και αναπτύσσονται διάφορα μοντέλα διεργασιών κύκλου ζωής λογισμικού
για τη συντόμευση των κύκλων ανάπτυξης ως απάντηση στις μεταβαλλόμενες επιχειρηματικές
ανάγκες. Η πλειοψηφία των διεργασιών αυτών ακολουθούν ευέλικτες (Agile) προσεγγίσεις
ΚΖΑΛ (SDLC) [14]. Η ευέλικτη προσέγγιση υποθέτει ότι οι ομάδες μπορούν να αναπτύξουν
υψηλής ποιότητας, προσαρμοστικό λογισμικό χρησιμοποιώντας αρχές συνεχούς βελτίωσης του
σχεδιασμού και δοκιμές με βάση την ταχεία ανατροφοδότηση και την αλλαγή. Συγκριτικά,
η παραδοσιακή προσέγγιση υποθέτει ότι τα συστήματα έντασης λογισμικού είναι πλήρως
προσδιορίσιμα και προβλέψιμα και μπορούν να κατασκευαστούν μέσω σχολαστικού και
εκτεταμένου σχεδιασμού. Ο τρόπος διοίκησης που σχετίζεται με την ευέλικτη προσέγγιση
δίνει έμφαση στην ηγεσία και τη συνεργασία σε επίπεδο ομάδας, ενώ ο τρόπος διοίκησης
της προσέγγισης υψηλής προβλεψιμότητας είναι πιο φορμαλιστικός (εκ των άνω προς τα κάτω).
Πολλές ευέλικτες προσεγγίσεις συστεγάζουν διαφορετικές διοικητικές προσεγγίσεις.

Για παράδειγμα, η Dev/Sec/Ops είναι μια κουλτούρα και μια ευέλικτη προσέγγιση στη
σύγχρονη διανομή λογισμικού που ευθυγραμμίζει τις ομάδες ανάπτυξης (Dev), ασφάλειας
(Sec) και λειτουργίας (Ops) σε μια ολοκληρωμένη ομάδα που επικεντρώνεται στη συνεχή
και σταδιακή παροχή δυνατοτήτων. Το κύριο χαρακτηριστικό της Dev/Sec/Ops είναι ότι
η προσέγγιση αυτή αυτοματοποιεί, συνεχώς παρακολουθεί και εφαρμόζει την ασφάλεια σε
όλες τις φάσεις του κύκλου ζωής του λογισμικού: σχεδιασμός, ανάπτυξη, κατασκευή,
δοκιμή, κυκλοφορία, διανομή, ανάπτυξη, λειτουργία και παρακολούθηση. Στην Dev/Sec/Ops,
οι δοκιμές και η ασφάλεια μετατοπίζονται προς τα αριστερά μέσω αυτοματοποιημένων
δοκιμών μονάδων, λειτουργικότητας, ολοκλήρωσης και ασφάλειας. Αυτή είναι το βασικό
στοιχείο διαφοροποίησης της Dev/Sec/Ops - η ασφάλεια/διασφάλιση ποιότητας (QA)
και άλλες λειτουργικές και μη δυνατότητες δοκιμάζονται και κατασκευάζονται ταυτόχρονα
[11, 14]. Ενώ η Dev/Sec/Ops περιλαμβάνει την κουλτούρα και τις διαδικασίες που
επιτρέπουν την ταχεία, συνεχή διανομή αδιαπέραστων στον κυβερνοχώρο συστημάτων,
τα πολύπλοκα ενσωματωμένα σε λογισμικό συστήματα μπορεί να έχουν πρόσθετες
απαιτήσεις που πρέπει επίσης να ενταχθούν στην κουλτούρα και τις διεργασίες
Dev/Sec/Ops, όπως η ασφάλεια. Η αναβάθμιση αυτών των απαιτήσεων ώστε να
αντιστοιχίζονται με τις απαιτήσεις Dev/Sec/Ops αναδεικνύει τη σημασία της
ενσωμάτωσης της ποιότητας σε όλες τις πτυχές του προγράμματος. Η πολυπλοκότητα
των ολοκληρωμένων εργαλείων Dev/Sec/Ops και η χρήση αναδυόμενων τεχνολογιών όπως
η τεχνητή νοημοσύνη (AI) και η μηχανική μάθηση (ML) για την αξιοποίηση αυτών των
εργαλείων προσθέτει μια άλλη διάσταση [15]. Για παράδειγμα, οι προσεγγίσεις Agile
και DevOps είναι δικαιολογημένα ευρέως καθιερωμένες, αλλά στην περίπτωση λογισμικού
βασισμένου στην τεχνητή νοημοσύνη, ίσως απαιτούνται νέοι ΚΖΑΛ (SLDC) για τη διαχείριση
της πολυπλοκότητας που φέρνει η τεχνητή νοημοσύνη στο λογισμικό.

Είναι σημαντική η κατανόηση της διαφοράς μεταξύ των *φάσεων* και των *δραστηριοτήτων*
αλλά και του λόγου χρήσης της ανάλυσης δραστηριοτήτων. Το ινστιτούτο διοίκησης
έργων (PMI) προσδιορίζει μια φάση ως εξής: "Η ολοκλήρωση και η έγκριση ενός ή
περισσότερων παραδοτέων χαρακτηρίζει μια φάση έργου". Ένα *παραδοτέο* είναι ένα
μετρήσιμο, επαληθεύσιμο προϊόν εργασίας, όπως μια προδιαγραφή, μια έκθεση μελέτης
σκοπιμότητας, ένα λεπτομερές έγγραφο σχεδιασμού ή ένα λειτουργικό πρωτότυπο.
Ορισμένα παραδοτέα αντιστοιχούν σε μέρος της διαδικασίας διοίκησης του έργου, ενώ
άλλα είναι τα τελικά προϊόντα ή συστατικά των τελικών προϊόντων για τα οποία 
σχεδιάστηκε το έργο. Τα παραδοτέα, και ως εκ τούτου οι φάσεις, αποτελούν μέρος
μιας γενικά διαδοχικής διαδικασίας που αποσκοπεί στη διασφάλιση του κατάλληλου
ελέγχου του έργου και στην επίτευξη του επιθυμητού προϊόντος ή υπηρεσίας, που
αποτελεί τον στόχο του έργου. Από τη σκοπιά της διοίκησης του έργου, οι φάσεις
βοηθούν στην επίτευξη των στόχων του έργου και στη διατήρηση του ελέγχου του.

Η ανάλυση βάσει δραστηριοτήτων στο Υπόδειγμα 1 δείχνει τι συμβαίνει, αλλά δεν
υποδηλώνει πότε, πώς ή πόσες φορές συμβαίνει κάθε δραστηριότητα. Τα επτά θέματα
είναι τα ακόλουθα:

  * Έναρξη και ορισμός πεδίου εφαρμογής, το οποίο ασχολείται με την απόφαση να
  εκκίνηση ενός έργου τεχνολογίας λογισμικού
  * Προγραμματισμός έργου λογισμικού, το οποίο αφορά τις δραστηριότητες που
  αναλαμβάνονται για την προετοιμασία ενός επιτυχημένου έργου τεχνολογίας
  λογισμικού από την πλευρά της διοίκησης
  * Εκτέλεση έργου λογισμικού, το οποίο πραγματεύεται γενικά αποδεκτές
  δραστηριότητες της Διοίκησης τεχνολογίας λογισμικού (SEM) οι οποίες προκύπτουν
  κατά την διάρκεια της εκτέλεσης ενός έργου τεχνολογίας λογισμικού.
  * Επιθεώρηση και αξιολόγηση, το οποίο ασχολείται με τη διασφάλιση ότι οι
  δραστηριότητες τεχνικής μηχανικής, χρονοδιαγράμματος, κόστους και ποιότητας
  είναι ικανοποιητικές
  * Τερματισμός, το οποίο καταπιάνεται με τις δραστηριότητες που πραγματοποιούνται
  για την ολοκλήρωση ένας έργου
  * Μέτρηση τεχνολογίας λογισμικού, το οποίο αφορά την αποτελεσματική
  ανάπτυξη και εφαρμογή προγραμμάτων μετρήσεων σε οργανισμούς τεχνολογίας
  λογισμικού
  * Εργαλεία διοίκησης τεχνολογίας λογισμικού (SEM), το οποίο περιγράφει
  την επιλογή και χρήση εργαλείων για την διοίκηση ενός έργου τεχνολογίας
  λογισμικού.

{id="fig-softengmng-tree"}
![Υπόδειγμα 9.1](images/9-SoftEngMng.png)

**Υπόδειγμα 9.1 Κατανομή των θεμάτων στο γνωστικό πεδίο της Διοίκησης
Τεχνολογίας Λογισμικού**

## Έναρξη και ορισμός πεδίου εφαρμογής

Η έναρξη του έργου επικεντρώνεται στην επιθεώρηση των απαιτήσεων λογισμικού
και στον προσδιορισμό των αναγκών, του πεδίου εφαρμογής, της σκοπιμότητας και
της εξουσιοδότησης ενός έργου λογισμικού. Μόλις διαπιστωθεί η σκοπιμότητα του
έργου, οι εναπομείναντες εργασίες σε αυτή την ενότητα είναι ο προσδιορισμός των
απαιτήσεων λογισμικού και η επιλογή των διεργασιών για την αναθεώρηση και την
επιθεώρηση των απαιτήσεων.

### <i>Προσδιορισμός και διαπραγμάτευση των απαιτήσεων [3*, c3]</i>

Ο προσδιορισμός και η διαπραγμάτευση των απαιτήσεων του έργου είναι οι πρωταρχικοί
στόχοι των εργασιών που αναλαμβάνονται κατά τη διάρκεια αυτής της φάσης
(βλ. γνωστικά πεδία (KAs) της Αρχιτεκτονικής λογισμικού (Software Architecture)
και των Απαιτήσεων λογισμικού (Software Requirements)). Ακολουθούν οι δραστηριότητες
αναθεώρησης των απαιτήσεων λογισμικού (π.χ. εκμαίευση, ανάλυση, προδιαγραφή και
επικύρωση). Οι μέθοδοι και οι τεχνικές θα πρέπει να επιλέγονται και να εφαρμόζονται
λαμβάνοντας υπόψιν τις ποικίλες οπτικές γωνίες των ενδιαφερομένων μερών. Οι εν λόγω
απαιτήσεις αποτελούν τη βάση για όλα όσα ακολουθούν σε ένα έργο λογισμικού και
αποτυπώνονται σε ένα διάγραμμα έργου ή σε κάποιο άλλο έγγραφο έναρξης έργου υψηλού
επιπέδου.

### <i>Ανάλυση σκοπιμότητας [4*, c5]</i>

Η ανάλυση σκοπιμότητας αποσκοπεί στη διαμόρφωση μιας σαφούς περιγραφής των στόχων
του έργου και στην αξιολόγηση εναλλακτικών προσεγγίσεων, έτσι ώστε να προσδιοριστεί
εάν η προτεινόμενη λύση του έργου είναι η βέλτιστη δυνατή προσέγγιση, δεδομένων
των περιορισμών της τεχνολογίας, των πόρων, των οικονομικών και των αλλαγών σε 
ηθικά, περιβαλλοντικά και κοινωνικοτεχνικά ζητήματα. Χρειάζεται να προετοιμαστούν
μια δήλωση έναρξης έργου και προσδιορισμού του πεδίου εφαρμογής προϊόντος, τα
παραδοτέα του έργου, οι περιορισμοί της διάρκειας του έργου και μια εκτίμηση των
απαιτούμενων πόρων.

Οι πόροι (οι οποίοι μπορεί να προέρχονται είτε από το εσωτερικό είτε από το
εξωτερικό του οργανισμού) περιλαμβάνουν την υποδομή, την υποστήριξη και
τους ανθρώπους με τις απαραίτητες βασικές ικανότητες. Η ανάλυση σκοπιμότητας
συχνά απαιτεί εκτιμήσεις της προσπάθειας και του κόστους, βασιζόμενη στις
κατάλληλες μεθόδους. (Βλέπε ενότητα 2.3, Εκτίμηση προσπάθειας, χρονοδιαγράμματος
και κόστους).

Μια αρχική δομή κατανομής εργασιών (ΔΚΕ/WBS) και ένα διάγραμμα πλαισίου μπορούν να
αναπτυχθούν κατά τη διάρκεια των δραστηριοτήτων της φάσης Έναρξης και ορισμού
του πεδίου εφαρμογής του έργου. Η διάσπαση της εργασίας σε μικρότερα καθήκοντα
είναι μια συνήθης τεχνική παραγωγικότητας που καθιστά την εργασία πιο διαχειρίσιμη
και προσεγγίσιμη. Ως το εργαλείο έργου που εφαρμόζει αυτή την τεχνική, το ΔΚΕ (WBS)
είναι ένα σημαντικό έγγραφο διοίκησης έργου. Ενώ το ΔΚΕ (WBS) μπορεί να χρησιμοποιηθεί
για την οργάνωση της παρακολούθησης του κόστους και του χρονοδιαγράμματος,
αυτό καθαυτό δεν περιλαμβάνει κατευθυντήριες γραμμές για το κόστος και το
χρονοδιάγραμμα. Τα χρονοδιαγράμματα αναπτύσσονται στα πλαίσια της επόμενης δραστηριότητας,
Προγραμματισμός έργου λογισμικού (Ενότητα 2).

Ένα διάγραμμα τεχνικού πλαισίου ορίζει το όριο μεταξύ του συστήματος (ή ενός
μέρους του συστήματος) και του περιβάλλοντός του, αποτυπώνοντας τις οντότητες
που αλληλεπιδρούν με αυτό. Το εν λόγω έγγραφο είναι σημαντικό για τον ορισμό
των διοικητικών και τεχνικών διεπαφών αλλά και των συμβιβασμών που πρέπει να
ληφθούν υπόψη [1]. Ενόσω οι μηχανικοί αναπτύσσουν το ΔΚΕ (WBS), θα πρέπει να
θεωρούν όλα τα στοιχεία παραμετροποίησης ως εργασίες που πρέπει να έχουν υπό
έλεγχο.

### <i>Διεργασία επιθεώρησης και αναθεώρησης των απαιτήσεων [3*, c3]</i>

Δεδομένου του αναπόφευκτου της αλλαγής, τα ενδιαφερόμενα μέρη θα πρέπει να
συμφωνήσουν στον τρόπο επιθεώρησης και αναθεώρησης των απαιτήσεων και του πεδίου
εφαρμογής (π.χ. διαδικασίες διαχείρισης αλλαγών και συμβιβασμών, αναδρομικοί
κύκλοι επαναλήψεων). (Βλέπε το γνωστικό πεδίο (KA) των Απαιτήσεων λογισμικού
(Software Requirements). Αυτό υποδηλώνει ότι το πεδίο εφαρμογής και οι απαιτήσεις
δεν θα είναι απαράλλακτες, αλλά μπορούν και πρέπει να επανεξετάζονται σε προκαθορισμένα
σημεία καθώς το έργο εξελίσσεται (για παράδειγμα, κατά την περίοδο που καθορίζονται
οι προτεραιότητες των εκκρεμοτήτων ή κατά την επιθεώρηση ορόσημων). Εάν γίνουν
αποδεκτές αλλαγές, τότε θα πρέπει να χρησιμοποιηθεί η ανάλυση ιχνηλασιμότητας
προς τα εμπρός ή προς τα πίσω και η ανάλυση κινδύνου, για να διαπιστωθεί ο
αντίκτυπος αυτών των αλλαγών. Επί παραδείγματι, η ιχνηλασιμότητα προς τα πίσω
μπορεί να συσχετίσει το σενάριο δοκιμής με τη σχετική απαίτηση και το σχεδιασμό
του. Αυτή η συσχέτιση βοηθά στην παρακολούθηση της κατάστασης ικανοποίησης των
απαιτήσεων και βοηθά στη λήψη αποφάσεων για τη διακοπή της δοκιμής. Βοηθά επίσης
στη λήψη συμβιβασμών όσον αφορά τις απαιτήσεις και το σχεδιασμό. (Βλ. ενότητα
2.5, Διαχείριση κινδύνου, και Έλεγχος σχηματισμών λογισμικού του γνωστικού
πεδίου (KA) Διαχείριση σχηματισμών λογισμικού).

Μια προσέγγιση με βάση τη διαχείριση αλλαγών μπορεί επίσης να αποτελέσει τη βάση για
την αξιολόγηση της επιτυχίας κατά τον τερματισμό ενός σταδιακού κύκλου ή ενός
ολόκληρου έργου, με βάση τις αλλαγές που συνέβησαν στην πορεία. (Βλέπε Θέμα 5,
Τερματισμός).

## Προγραμματισμός έργου λογισμικού

Ένα βασικό βήμα στον προγραμματισμό έργου λογισμικού θα πρέπει να είναι η επιλογή
ενός κατάλληλου μοντέλου κύκλου ζωής ανάπτυξης λογισμικού (ΚΖΑΛ/SDLC) και,
ενδεχομένως, η εξατομίκευση του με βάση το πεδίο εφαρμογής του έργου, τις απαιτήσεις
λογισμικού και την αξιολόγηση των κινδύνων. Το *SWX* [2] αναφέρει ότι οι κύκλοι
ζωής έργων καταλαμβάνουν ένα συνεχές διάστημα από την πρόβλεψη έως την προσαρμογή.
Οι παράγοντες που χαρακτηρίζουν τις θέσεις των κύκλων ζωής έργων λογισμικού στο
συνεχές περιλαμβάνουν (αλλά δεν περιορίζονται μόνο σε αυτούς) τους διάφορους
τρόπους χειρισμού των απαιτήσεων και των σχεδίων, τον τρόπο διαχείρισης του
κινδύνου και του κόστους και τη συμμετοχή των βασικών ενδιαφερομένων μερών.
Οι κύκλοι ζωής έργων λογισμικού με υψηλή προβλεψιμότητα δίνουν έμφαση
στον προσδιορισμό των απαιτήσεων και στο λεπτομερή σχεδιασμό κατά τις φάσεις
έναρξης και προγραμματισμού του έργου. Τα λεπτομερή σχέδια που βασίζονται σε
δεδομένη αρχιτεκτονική, απαιτήσεις και περιορισμούς χρησιμοποιούνται για τη
μείωση του κινδύνου και του κόστους. Τα ορόσημα σχεδιάζονται, έναντι της
συνεχούς συμμετοχής των βασικών ενδιαφερομένων μερών. Από την άλλη πλευρά, οι
εξαιρετικά προσαρμοστικοί κύκλοι ζωής έργων λογισμικού χαρακτηρίζονται από τον
προοδευτικό προσδιορισμό των απαιτήσεων με βάση σύντομους επαναληπτικούς κύκλους
ανάπτυξης. Ο κίνδυνος και το κόστος μειώνονται με την προοδευτική εξέλιξη των
αρχικών σχεδίων, και τα βασικά ενδιαφερόμενα μέρη εμπλέκονται συνεχώς [2].

Άλλοι παράγοντες που πρέπει να ληφθούν υπόψη περιλαμβάνουν την φύση του πεδίου
εφαρμογής, τη λειτουργική και τεχνική πολυπλοκότητα και τις απαιτήσεις ποιότητας
λογισμικού. (Ανατρέξτε στην ενότητα Απαιτήσεις ποιότητας λογισμικού στο γνωστικό
πεδίο (KA) της Ποιότητας λογισμικού (Software Quality)).

Σε όλους τους κύκλους ζωής ανάπτυξης λογισμικού (ΚΖΑΛ/SDLC), η αξιολόγηση των κινδύνων
θα πρέπει να αποτελεί στοιχείο του αρχικού προγραμματισμού του έργου, και το
"προφίλ κινδύνου" του έργου θα πρέπει να συζητείται και να γίνεται αποδεκτό
από όλους τους σχετικούς ενδιαφερόμενους φορείς. Οι διεργασίες διοίκησης της
ποιότητας λογισμικού (βλ. Διεργασίες διοίκησης ποιότητας λογισμικού στο γνωστικό
πεδίο (ΚΑ) Ποιότητας λογισμικού) θα πρέπει να σχεδιάζονται μαζί με τον προγραμματισμό
του έργου. Στον εν λόγω σχεδιασμό θα πρέπει να καθιερωθούν διαδικασίες και
αρμοδιότητες για τη διασφάλιση της ποιότητας λογισμικού (ΔΠΛ/SQA), την επαλήθευση
και επικύρωση, τις επιθεωρήσεις και τους ελέγχους. (Βλέπε γνωστικό πεδίο (ΚΑ)
Ποιότητας λογισμικού.) Οι διεργασίες και οι αρμοδιότητες για τη συνεχή επιθεώρηση
και αναθεώρηση του προγραμματισμού του έργου και των σχετικών σχεδιασμών θα πρέπει
επίσης να δηλώνονται με σαφήνεια και να είναι συμφωνημένες.

### <i>Σχεδιασμός διεργασίας [3*, c3, c4, c5], [5*, c1]</i>

Τα μοντέλα ΚΖΑΛ (SDLC) καλύπτουν ένα συνεχές φάσμα από την πρόβλεψη έως την προσαρμογή.
(Βλέπε Μοντέλα κύκλου ζωής λογισμικού στο γνωστικό πεδίο (KA) Διεργασίας
τεχνολογίας λογισμικού.) Οι προβλέψιμοι ΚΖΑΛ (SDLCs) χαρακτηρίζονται από την ανάπτυξη
λεπτομερούς αρχιτεκτονικής και απαιτήσεων λογισμικού, λεπτομερή προγραμματισμό
έργου και ελάχιστο προγραμματισμό επανάληψης μεταξύ των φάσεων ανάπτυξης. Οι
προσαρμοστικοί ΚΖΑΛ (SDLCs) σχεδιάζονται για να εξυπηρετούν τις αναδυόμενες απαιτήσεις
λογισμικού και την επαναληπτική προσαρμογή των σχεδίων. Ένας ιδιαίτερα προβλέψιμος
ΚΖΑΛ (SDLC) εκτελεί τις πέντε πρώτες διαδικασίες που παρατίθενται στο Υπόδειγμα 1 με γραμμική
ακολουθία αναθεωρώντας τις προηγούμενες φάσεις μόνο όταν είναι απαραίτητο. Οι
προσαρμοστικοί ΚΖΑΛ (SDLCs) χαρακτηρίζονται από επαναληπτικούς κύκλους ανάπτυξης.
Οι ΚΖΑΛ (SDLCs) στο μέσο του συνεχούς ΚΖΑΛ (SDLC) παράγουν προσαυξήσεις
λειτουργικότητας είτε βάσει ενός προσχεδιασμένου χρονοδιαγράμματος (στην προβλέψιμη
πλευρά του συνεχούς) είτε ως προϊόντα συχνά επικαιροποιημένων κύκλων ανάπτυξης
(στην προσαρμοστική πλευρά του συνεχούς).

Τα γνωστά μοντέλα ΚΖΑΛ (SDLC) περιλαμβάνουν τα μοντέλα καταρράκτη, σταδιακής και
σπειροειδούς ανάπτυξης, καθώς και διάφορες προσεγγίσεις ευέλικτης ανάπτυξης λογισμικού
[2, 11] [3*, c2].

Οι σχετικές μέθοδοι (βλ. το γνωστικό πεδίο (KA) Μοντέλα και μέθοδοι τεχνολογίας λογισμικού)
και τα εργαλεία θα πρέπει να επιλέγονται στα πλαίσια του προγραμματισμού. Είναι αναγκαίος
επίσης ο προγραμματισμός και η απόκτηση αυτοματοποιημένων εργαλείων που θα χρησιμοποιηθούν
καθ'όλη τη διάρκεια του έργου. Τα εργαλεία μπορεί να περιλαμβάνουν, μεταξύ άλλων, εκείνα για τον
προγραμματισμό του έργου, τις απαιτήσεις λογισμικού, το σχεδιασμό λογισμικού, την κατασκευή 
λογισμικού, τη συντήρηση λογισμικού, τη διαχείριση σχηματισμών λογισμικού, τη διεργασία 
τεχνολογίας λογισμικού και την ποιότητα λογισμικού. Πολλά από αυτά τα εργαλεία θα πρέπει να
επιλέγονται με βάση κυρίως τις τεχνικές θεωρήσεις που συζητώνται σε άλλα γνωστικά πεδία
(KAs), με ορισμένες από αυτές τις θεωρήσεις να σχετίζονται στενά με τις διοικητικές 
εκτιμήσεις που συζητώνται σε αυτό το κεφάλαιο.

### <i>Ορισμός παραδοτέων [3*, c4, c5, c6]</i>

Τα προϊόντα εργασίας κάθε δραστηριότητας του έργου (π.χ. έγγραφα σχεδιασμού αρχιτεκτονικής
λογισμικού, εκθέσεις επιθεώρησης, δοκιμασμένο λογισμικό) θα πρέπει να προσδιορίζονται και
να χαρακτηρίζονται. Θα πρέπει να εξετασθούν οι δυνατότητες επαναχρησιμοποίησης στοιχείων
λογισμικού από προηγούμενα έργα ή χρήσης έτοιμων προϊόντων λογισμικού. Η απόκτηση λογισμικού
και η χρήση τρίτων μερών για την ανάπτυξη παραδοτέων θα πρέπει να προγραμματιστεί και οι
προμηθευτές να έχουν επιλεχθεί. (Βλέπε ενότητα 3.2, Απόκτηση λογισμικού και διαχείριση
συμβάσεων με προμηθευτές).

### <i>Εκτίμηση προσπάθειας, χρονοδιαγράμματος και κόστους</i>

Η Θεματική ενότητα της εκτίμησης γενικότερα προσεγγίζεται στο γνωστικό πεδίο
(ΚΑ) των Οικονομικών της τεχνολογίας λογισμικού (Software Engineering Economics).
Εκεί εξετάζονται ερωτήματα όπως "Τί είναι η εκτίμηση;" και "Γιατί κάνουμε εκτίμηση;".
Η παρούσα ενότητα ασχολείται με θέματα εκτίμησης με επίκεντρο τη διοίκηση.

Η εκτίμηση του κόστους για έργα λογισμικού είναι μια διαδικασία επιρρεπής σε σφάλματα.
Η προσπάθεια που απαιτείται για κάθε δεδομένο έργο λογισμικού εξαρτάται σχεδόν
εξ΄ολοκλήρου από ανθρώπινους παράγοντες: την εμπειρία και τις ικανότητες των ατόμων,
τις αλληλεπιδράσεις των μελών της ομάδας και την κουλτούρα του περιβάλλοντος ανάπτυξης
λογισμικού. Οι δυναμικοί παράγοντες του περιβάλλοντος, όπως η ραγδαία εξέλιξη της
τεχνολογίας, οι μεταβαλλόμενες και αναδυόμενες απαιτήσεις και η άυλη φύση του
προϊόντος, επηρεάζουν επίσης σημαντικά τη διαχείριση του κόστους. Η εκτίμηση του
κόστους όταν υπάρχει τόσο μεγάλη μεταβλητότητα είναι δύσκολη ακόμη και όταν
υπάρχουν σημαντικά ιστορικά δεδομένα. Οι διευθυύνοντες έργων λογισμικού θα
πρέπει να χρησιμοποιούν πολλαπλές προσεγγίσεις εκτίμησης και στη συνέχεια να
συμβιβάζουν τις διαφορές μεταξύ των εκτιμήσεων [3, 10, 11].

Όταν υπάρχουν διαθέσιμα δεδομένα, η εκτιμώμενη κλίμακα απαιτούμενης προσπάθειας
για ένα έργο ή τμήματα ενός έργου μπορεί να προσδιοριστεί με τη χρήση ενός
βαθμονομημένου μοντέλου εκτίμησης που βασίζεται σε ιστορικά δεδομένα μεγέθους
και προσπάθειας. Είναι καλύτερο να χρησιμοποιούνται επίσης τεχνικές εκτίμησης
από κάτω προς τα πάνω που βασίζονται σε εκτιμήσεις από εκείνους που θα εκτελέσουν
το έργο και σε ιστορικά δεδομένα που βασίζονται σε παρόμοια έργα [2]. Μπορούν να
καθοριστούν οι εξαρτήσεις εργασιών και να εντοπιστούν και να τεκμηριωθούν πιθανές
ευκαιρίες για ταυτόχρονη και διαδοχική ολοκλήρωση εργασιών, χρησιμοποιώντας, για
παράδειγμα, ένα διάγραμμα Gantt. Στους προβλέψιμους ΚΖΑΛ (SDLCs) έργων, το
αναμενόμενο χρονοδιάγραμμα εργασιών, με προβλεπόμενους χρόνους έναρξης, διάρκειας
και λήξης, παράγεται συνήθως κατά τη διάρκεια του προγραμματισμού. Στους
προσαρμοστικούς ΚΖΑΛ (SDLCs), μια συνολική εκτίμηση της προσπάθειας και του
χρονοδιαγράμματος αναπτύσσεται συνήθως από την αρχική κατανόηση των απαιτήσεων
ή, εναλλακτικά, οι περιορισμοί της συνολικής προσπάθειας και του χρονοδιαγράμματος
μπορούν να καθοριστούν και να χρησιμοποιηθούν για τον προσδιορισμό μιας αρχικής
εκτίμησης του αριθμού των επαναληπτικών κύκλων και των εκτιμήσεων της προσπάθειας
και άλλων πόρων που διατίθενται σε κάθε κύκλο.

Οι απαιτήσεις σε πόρους (π.χ. τα άτομα και τα εργαλεία που απαιτούνται) μπορούν
συνήθως να μεταφραστούν σε εκτιμήσεις κόστους. Η εκτίμηση της προσπάθειας, του
χρονοδιαγράμματος και του κόστους είναι μια επαναληπτική δραστηριότητα που θα
πρέπει να γίνεται αντικείμενο διαπραγμάτευσης και να αναθεωρείται μεταξύ των
ενδιαφερόμενων μερών μέχρι να επιτευχθεί συναίνεση σχετικά με τους πόρους και
το χρόνο που είναι διαθέσιμοι για την ολοκλήρωση του έργου. Ο διευθύνων προγράμματος
χρησιμοποιεί συχνά ένα μοντέλο που συνδέει τέσσερις τύπους ρόλων συνεργασίας:
υπεύθυνος, υπόλογος, σύμβουλος και ενημερωμένος (RACI) για να διευκολύνει αυτή
τη διαδικασία. Οι ρόλοι υπευθυνότητας παράγουν τα παραδοτέα- οι υπόλογοι ελέγχουν
τα παραδοτέα- οι συμβουλευτικοί ρόλοι παρέχουν συμβουλές σχετικά με τα καθήκοντα-
και οι ρόλοι πληροφόρησης ενημερώνονται καθ' όλη τη διάρκεια αυτών των διαδικασιών.
Οι διευθύνοντες του έργου πρέπει να παρακολουθούν συνεχώς τις απαιτήσεις και τις
αλλαγές των ενδιαφερομένων μερών καθώς εξελίσσονται για να αναλύουν τις επιπτώσεις
τους στο κόστος και το χρονοδιάγραμμα του έργου. Αυτό είναι συνήθως πιο σημαντικό
στα ευέλικτα έργα ανάπτυξης λογισμικού, όπου οι απαιτήσεις των ενδιαφερομένων μερών
είναι δυναμικές, επειδή οι αλλαγές μπορεί να συμβαίνουν γρήγορα καθώς το έργο
εξελίσσεται.

### <i>Κατανομή πόρων [3*, c5, c10, c11]</i>

Ο εξοπλισμός, οι εγκαταστάσεις και τα άτομα θα πρέπει να επιμεριστούν στα
προσδιορισμένα καθήκοντα, συμπεριλαμβανομένου του καταμερισμού των αρμοδιοτήτων
για την ολοκλήρωση των διαφόρων στοιχείων του έργου και του συνολικού έργου.
Μπορεί να χρησιμοποιηθεί ένας πίνακας που δείχνει ποιος είναι υπεύθυνος,
υπόλογος, σύμβουλος και ενημερωμένος για κάθε εργασία. Η κατανομή των πόρων
βασίζεται και περιορίζεται από τη διαθεσιμότητα των πόρων και τη βέλτιστη χρήση
τους, καθώς και από ζητήματα που αφορούν το προσωπικό (π.χ. παραγωγικότητα
ατόμων και ομάδων, δυναμική της ομάδας και δομές της ομάδας).

### <i>Διαχείριση κινδύνου [3*, c9] [5*, c5]</i>

Ο κίνδυνος και η αβεβαιότητα είναι συναφείς αλλά διαφορετικές έννοιες. Η
αβεβαιότητα προκύπτει από την έλλειψη πληροφοριών. Ο κίνδυνος είναι η επίδραση
της αβεβαιότητας στους στόχους που έχει αρνητικές (απειλές) ή θετικές (ευκαιρίες)
συνέπειες στους στόχους. Η αβεβαιότητα συχνά δημιουργεί κίνδυνο και χαρακτηρίζεται
από την πιθανότητα να συμβεί ένα γεγονός με θετική έκβαση.

Η διαχείριση του κινδύνου περιλαμβάνει τον εντοπισμό των παραγόντων κινδύνου,
την ανάλυση της πιθανότητας και των πιθανών επιπτώσεων κάθε παράγοντα κινδύνου,
την ιεράρχηση των παραγόντων κινδύνου και την ανάπτυξη στρατηγικών μετριασμού
του κινδύνου για τη μείωση της πιθανότητας ενός αρνητικού γεγονότος αλλά και
την ελαχιστοποίηση των αρνητικών επιπτώσεων εάν ένας παράγοντας κινδύνου
καταστεί πρόβλημα. Τα δεδομένα διαχείρισης κινδύνων μπορούν να χρησιμοποιηθούν
για την αναπαράσταση του προφίλ κινδύνου του έργου- τα δεδομένα αυτά αποτελούν
συχνά μέρος ενός μητρώου κινδύνων. Το μητρώο κινδύνων είναι ένα έγγραφο που
χρησιμοποιείται ως εργαλείο διαχείρισης κινδύνων. Μπορεί να χρησιμοποιηθεί
για την εκπλήρωση της κανονιστικής συμμόρφωσης, χρησιμεύοντας ως αποθετήριο
για όλους τους κινδύνους που έχουν εντοπιστεί και για πρόσθετες πληροφορίες
σχετικά με κάθε κίνδυνο [2]. Μέθοδοι αξιολόγησης κινδύνων (π.χ. κρίση
εμπειρογνωμόνων, ιστορικά δεδομένα, δέντρα αποφάσεων και προσομοιώσεις
διαδικασιών) μπορούν μερικές φορές να χρησιμοποιηθούν για τον εντοπισμό
και την αξιολόγηση παραγόντων κινδύνου.

Οι συνθήκες εγκατάλειψης του έργου μπορούν επίσης να καθοριστούν με όλους
τους σχετικούς ενδιαφερόμενους φορείς. Οι μοναδικές για το λογισμικό πτυχές
του κινδύνου, όπως η τάση των μηχανικών λογισμικού να προσθέτουν μη αναγκαία
χαρακτηριστικά ή οι κίνδυνοι που σχετίζονται με την άυλη φύση του λογισμικού,
μπορούν να επηρεάσουν τη διαχείριση του κινδύνου για έργα λογισμικού.

Ιδιαίτερη προσοχή πρέπει να δίνεται στη διαχείριση των κινδύνων που σχετίζονται
με τις απαιτήσεις ποιότητας του λογισμικού, όπως η ασφάλεια ή η προστασία [11].
(Βλέπε γνωστικό πεδίο (ΚΑ) της Ποιότητας λογισμικού.) Η διαχείριση κινδύνων θα
πρέπει να γίνεται όχι μόνο στην αρχή ενός έργου, αλλά και σε περιοδικά διαστήματα
καθ' όλη τη διάρκεια του κύκλου ζωής του έργου.

### <i>Διοίκηση ποιότητας [3*, c4] [4*, c24]</i>

Σύμφωνα με τον *Οδηγό PMBOK®*, η διοίκηση ποιότητας έργου περιλαμβάνει τις υπό
εκτέλεση διεργασίες και τις δραστηριότητες του οργανισμού που καθορίζουν τις
πολιτικές, τους στόχους και τις ευθύνες για την ποιότητα, ώστε το έργο να
ικανοποιεί τις ανάγκες για τις οποίες αναλήφθηκε. Η παρούσα ενότητα εξετάζει
πρόσθετες εκτιμήσεις για τη διοίκηση της ποιότητας έργων λογισμικού [1].
Οι απαιτήσεις ποιότητας λογισμικού για ένα έργο λογισμικού και τα σχετικά
προϊόντα εργασίας θα πρέπει να προσδιοριστούν, ίσως τόσο ποσοτικά όσο και
ποιοτικά. Τα ποιοτικά χαρακτηριστικά του λογισμικού περιλαμβάνουν μεταξύ
άλλων την ασφάλεια, την προστασία, την αξιοπιστία, τη διαθεσιμότητα, την
απόδοση, την ευκολία χρήσης και την ευκολία τροποποίησης. Το τμήμα 1.9 του
*SWX* απαριθμεί χαρακτηριστικά ποιότητας που είναι σημαντικά για τους χρήστες
λογισμικού (π.χ. αποδοτικότητα, ασφάλεια, προστασία, αξιοπιστία, διαθεσιμότητα)
και χαρακτηριστικά ποιότητας που είναι σημαντικά για τους προγραμματιστές και
τους συντηρητές λογισμικού (π.χ. η συντηρησιμότητα είναι σημαντική για όσους
παρέχουν υπηρεσίες συντήρησης) [1]. Η σειρά προτύπων ISO/IEC 25000 παρέχει
εκτεταμένους καταλόγους χαρακτηριστικών ποιότητας λογισμικού που ευθυγραμμίζονται
με τις διαφορετικές ανάγκες των ενδιαφερομένων μερών [2]. Η ευθυγράμμιση αυτή
είναι σύμφωνη με το πρότυπο ISO/IEC/IEEE 15939 και τη Πρακτική μέτρηση λογισμικού
και συστήματος/Practical Software and Systems Measurement (PSM) [2, 9.11].

Μεγάλα τμήματα της λειτουργικότητας του συστήματος μετατοπίζονται από το υλικό
στο λογισμικό, ώστε να αξιοποιηθεί η αυξημένη ευελιξία και η ταχύτητα παράδοσης
στοιχείων που μπορεί να προσφέρει το λογισμικό. Ωστόσο, μαζί με αυτά τα οφέλη
έρχονται και άλλες προκλήσεις - για παράδειγμα, η ανάγκη για αυξημένη διαχείριση
των απαιτήσεων ποιότητας του λογισμικού (π.χ. κυβερνοασφάλεια) καθ'όλη τη διάρκεια
του ΚΖΑΛ (SDLC) [11]. Για κάθε απαίτηση ποιότητας λογισμικού θα πρέπει να τίθενται
κατώτατα όρια αποδεκτών μετρήσεων ποιότητας με βάση τις ανάγκες και τις προσδοκίες
των ενδιαφερομένων μερών. Οι διαδικασίες που αφορούν τη συνεχή ΔΠΛ (SQA) και τη
βελτίωση της ποιότητας καθ' όλη τη διάρκεια της διαδικασίας ανάπτυξης και την επαλήθευση
και επικύρωση του παραδοτέου προϊόντος λογισμικού θα πρέπει επίσης να προσδιορίζονται
κατά τον σχεδιασμό ποιότητας (π.χ. τεχνικές ανασκοπήσεις και επιθεωρήσεις ή επιδείξεις
της ολοκληρωμένης λειτουργικότητας). (Βλέπε το γνωστικό πεδίο (KA) της Ποιότητας
λογισμικού).

### <i>Διαχείριση σχεδίου [3*, c4]</i>

Εκτός από τα παλαιότερα προγράμματα πρόβλεψης, η τεκμηρίωση και η διαχείριση
επίσημων σχεδίων αποκτά όλο και λιγότερη έμφαση στη διοίκηση των περισσότερων
έργων λογισμικού. (π.χ., τα σχέδια τεκμηρίωσης χρησιμοποιούνται σπάνια,
ειδικά όταν χρησιμοποιείται MBSE για τα δεδομένα του προϊόντος). Τα εν λόγω σχέδια,
όπου χρησιμοποιούνται, πρέπει να αναπτύσσονται και να διαχειρίζονται για έργα
λογισμικού όταν αναμένεται αλλαγή. Το μέγεθος της προσπάθειας σχεδιασμού και
το περιεχόμενο του σχεδίου θα πρέπει να καθορίζεται εν μέρει από τον κίνδυνο της
μη ανάπτυξης του σχεδίου. Η ίδια η διαχείριση του σχεδίου έργου θα πρέπει να
σχεδιάζεται. Τα σχέδια και οι διαδικασίες που επιλέγονται για την ανάπτυξη
λογισμικού θα πρέπει να παρακολουθούνται συστηματικά, να επανεξετάζονται, να
αναφέρονται και, όταν χρειάζεται, να αναθεωρούνται. Τα σχέδια που σχετίζονται
με υποστηρικτικές διαδικασίες (π.χ. τεκμηρίωση, διαχείριση διαμόρφωσης λογισμικού
και επίλυση προβλημάτων) θα πρέπει επίσης να διαχειρίζονται. Η υποβολή εκθέσεων,
η παρακολούθηση και ο έλεγχος ενός έργου θα πρέπει να εντάσσονται στο πλαίσιο του
επιλεγμένου ΚΖΑΛ (SDLC) και της εφικτότητας του έργου. Τα σχέδια θα πρέπει να
λαμβάνουν υπόψη τα διάφορα τεχνουργήματα που θα χρησιμοποιηθούν για τη διαχείριση
του έργου. 

Οι διευθύνοντες έργων λογισμικού με προβλέψιμο κύκλο ζωής καταβάλλουν
σημαντική προσπάθεια για την εκ των προτέρων ανάπτυξη του σχεδίου έργου και την
ενσωμάτωση των επικουρικών σχεδίων που αναπτύσσονται από προσωπικό υποστήριξης από
άλλες οργανωτικές μονάδες (π.χ. ειδικούς σε θέματα εκτίμησης στο γραφείο διαχείρισης
έργου (PMO)).

Σε άλλους τύπους προγραμμάτων (π.χ. προσαρμοστικά προγράμματα), όπου δεν
χρησιμοποιούνται συνήθως επίσημα σχέδια, η έμφαση πρέπει να δίνεται στην
επιλογή και τη διατήρηση πληροφοριών του έργου που είναι χρήσιμες στον
έλεγχο του έργου και σε μελλοντικά έργα, καθώς και στην παγίωση στρατηγικής,
πολιτικών και διαδικασιών. Για παράδειγμα, στα προσαρμοστικά προγράμματα,
οι διαχειριστές θα καταβάλλουν συνήθως λιγότερη προσπάθεια εκ των προτέρων
για την ανάπτυξη λεπτομερών σχεδίων για το πεδίο εφαρμογής, το κόστος και
το χρονοδιάγραμμα. Όμως, συνήθως δαπανάται σημαντική προσπάθεια για τον
καθορισμό διαδικασιών παρακολούθησης και ελέγχου, όπως η ιχνηλασιμότητα
των απαιτήσεων, ώστε να διασφαλίζεται ο συντονισμός μεταξύ των μελών ή
των ομάδων του έργου καθώς υλοποιούνται τα αναδυόμενα σχέδια [2].

## Εκτέλεση έργου λογισμικού

Κατά τη διάρκεια της υλοποίησης ενός έργου λογισμικού (επίσης γνωστή ως *εκτέλεση
έργου*), τα σχέδια υλοποιούνται και οι διαδικασίες που ενσωματώνονται στα
σχέδια τίθενται σε εφαρμογή. Καθ' όλη τη διάρκεια, θα πρέπει να δίνεται
έμφαση στην τήρηση των επιλεγμένων διεργασιών SDLC, με την πρωταρχική
προσδοκία ότι η εν λόγω τήρηση θα ικανοποιήσει τις απαιτήσεις των ενδιαφερομένων
μερών και θα επιτύχει τους στόχους του έργου. Θεμελιώδους σημασίας για την
υλοποίηση είναι οι συνεχείς δραστηριότητες διοίκησης της παρακολούθησης,
του ελέγχου και της υποβολής αναφορών.

### <i>Εφαρμογή σχεδίων [4*, c2]</i>

Οι δραστηριότητες του έργου θα πρέπει να συμβαδίζουν με το σχέδιο έργου και
τα υποστηρικτικά σχέδια. Οι δραστηριότητες του έργου χρησιμοποιούν πόρους
(ανθρώπινο δυναμικό, τεχνολογία και χρηματοδότηση) και παράγουν προϊόντα
εργασίας (σχεδιασμός λογισμικού, κώδικας λογισμικού και περιπτώσεις δοκιμών
λογισμικού).

### <i>Απόκτηση λογισμικού και διαχείριση συμβάσεων με προμηθευτές [3*, c3, c4]</i>

Η απόκτηση λογισμικού και η διαχείριση συμβάσεων προμηθευτών αφορούν θέματα
που σχετίζονται με τη σύναψη συμβάσεων με πελάτες του οργανισμού ανάπτυξης
λογισμικού που αποκτούν τα παραδοτέα προϊόντα εργασίας και με προμηθευτές
που προμηθεύουν προϊόντα ή υπηρεσίες στον οργανισμό τεχνολογίας λογισμικού.

Η απόκτηση λογισμικού αποτελεί κοινή πρακτική στα έργα ανάπτυξης λογισμικού,
με τα ολοκληρωμένα περιβάλλοντα ανάπτυξης (IDE) και τις βιβλιοθήκες πακέτων
να επιτρέπουν στους μηχανικούς λογισμικού να αποκτούν βιβλιοθήκες τρίτων με
ελάχιστα βήματα, διευκολύνοντας την αξιολόγηση του κινδύνου, της νομιμότητας
και της καταλληλότητας. Ωστόσο, το λογισμικό δεν αποκτάται πλέον αποκλειστικά
ως συρρικνωμένο προϊόν μέσω μιας πολύπλοκης διαδικασίας εφοδιαστικής αλυσίδας
και μιας διαδρομής αγοράς. Η ευκολία απόκτησης λογισμικού έχει οδηγήσει σε μια
κοινή επιφάνεια επίθεσης και σε τρωτά σημεία ασφαλείας. Οι οργανισμοί θα πρέπει
να εξετάσουν το ενδεχόμενο εισαγωγής τεχνικών ή διαδικαστικών ελέγχων για την
ελαχιστοποίηση του κινδύνου που ενδεχομένως εκτίθενται από την αφιλτράριστη
πρόσβαση σε εξωτερικά αποθετήρια βιβλιοθηκών.

Οι διάφορες κατηγορίες απόκτησης λογισμικού περιλαμβάνουν το εμπορικό έτοιμο
λογισμικό (COTS) - ένα υπάρχον προϊόν που αποκτήθηκε "ως έχει" από άλλον
προμηθευτή λογισμικού, με τους ισχύοντες όρους άδειας χρήσης / λογισμικό
που αναπτύχθηκε αποκλειστικά για τον οργανισμό από άλλο μέρος - συνήθως με
σύμβαση και μερικές φορές μια παραμετροποίηση του λογισμικού COT / λογισμικό
ανοικτού κώδικα - ονομαστικά δωρεάν, αν και ο οργανισμός μπορεί να αγοράσει
ενισχυμένη υποστήριξη ή συντήρηση και πρέπει να εξετάσει την άδεια χρήσης
για περιορισμούς στη χρήση / λογισμικό που δανείζεται από τον πελάτη - συνήθως
για την παροχή προσομοίωσης ή ενσωμάτωσης με άλλο στοιχείο του συστήματος
/ λογισμικό ως υπηρεσία (SaaS) - το οποίο μπορεί να περιλαμβάνει λογισμικό που
ο οργανισμός νοικιάζει για να ικανοποιήσει μια συγκεκριμένη ανάγκη (για παράδειγμα,
ένα περιβάλλον φιλοξενίας με βάση το υπολογιστικό νέφος, ελέγχου του πηγαίου κώδικα
ή ανάπτυξης).

Τα έργα λογισμικού χρησιμοποιούν συνήθως διαφορετικές προσεγγίσεις για
την απόκτηση των απαραίτητων στοιχείων λογισμικού. Ωστόσο, ανεξάρτητα από τον
τρόπο απόκτησης των συνιστωσών λογισμικού, θα πρέπει να εκτελούνται οι ακόλουθες
δραστηριότητες: επαλήθευση ότι κάθε συνιστώσα είναι πλήρης, ορθή και συνεκτική
όσον αφορά τον αρχιτεκτονικό σχεδιασμό και τις απαιτήσεις λογισμικού για τη
συγκεκριμένη συνιστώσα- ενσωμάτωση των συνιστωσών / επαλήθευση ότι οι ενσωματωμένες
συνιστώσες είναι ορθές, πλήρεις και συνεκτικές όσον αφορά τον αρχιτεκτονικό σχεδιασμό
και τις απαιτήσεις λογισμικού / και επικύρωση ότι οι ενσωματωμένες συνιστώσες θα 
ικανοποιούν τον επιδιωκόμενο σκοπό τους όταν χρησιμοποιούνται στο επιδιωκόμενο
περιβάλλον λειτουργίας τους.

Διαφορετικές προσεγγίσεις απόκτησης (για την προμήθεια στοιχείων λογισμικού)
απαιτούν διαφορετικές προσεγγίσεις για τη διοίκηση του έργου. Για παράδειγμα,
η ανάπτυξη κατά παραγγελία απαιτεί λεπτομερή σχεδιασμό για τον αριθμό και τις
δεξιότητες των προγραμματιστών λογισμικού, την οργάνωση της ομάδας (ή των ομάδων)
ανάπτυξης, την κατανομή των απαιτήσεων στις ομάδες, τον προσδιορισμό των μετρικών
του έργου που πρέπει να συλλεχθούν, την παρακολούθηση της προόδου και την εφαρμογή
διορθωτικών ενεργειών όταν η πραγματική πρόοδος δεν συμφωνεί με την προγραμματισμένη
πρόοδο. Η αδειοδότηση στοιχείων περιλαμβάνει την αξιολόγηση των υποψήφιων στοιχείων,
την επιλογή των κατάλληλων στοιχείων και τη διαπραγμάτευση των όρων, των προϋποθέσεων
και των ημερομηνιών παράδοσης των επιλεγμένων στοιχείων.

Αυτό μπορεί να περιλαμβάνει την επιλογή των κατάλληλων συμβάσεων, όπως προκαθορισμένη
τιμή, χρόνος και υλικά, κόστος συν σταθερή αμοιβή και κόστος συν αμοιβή με κίνητρα.
Οι συμφωνίες με πελάτες και προμηθευτές συνήθως προδιαγράφουν το πεδίο εφαρμογής των
εργασιών και τα παραδοτέα. Οι συμφωνίες μπορούν επίσης να περιλαμβάνουν ειδικές ρήτρες,
όπως ρήτρες που προβλέπουν κυρώσεις για καθυστερημένη ή μη παράδοση, και συμφωνίες
πνευματικής ιδιοκτησίας που διευκρινίζουν τι παρέχουν οι προμηθευτές και τι πληρώνει
ο αγοραστής, καθώς και τι θα παραδοθεί στον αγοραστή και τι θα του ανήκει.
Για λογισμικό που αναπτύσσεται από προμηθευτές (τόσο εσωτερικούς όσο και εξωτερικούς
του οργανισμού ανάπτυξης λογισμικού), οι συμφωνίες συνήθως θεσπίζουν απαιτήσεις
ποιότητας λογισμικού.

Αφού τεθεί σε εφαρμογή η συμφωνία, θα πρέπει να γίνεται διοίκηση της εκτέλεσης
του έργου σύμφωνα με τους όρους της συμφωνίας. (Ανατρέξτε στο Κεφάλαιο 12,
*Επέκταση λογισμικού στον Οδηγό PMBOK® (SWX)*, Διαχείριση προμηθειών λογισμικού,
για περισσότερες πληροφορίες σχετικά με αυτό το θέμα [2]).

### <i>Εφαρμογή διεργασίας μέτρησης [3*, c7]</i>

Η διαδικασία μέτρησης θα πρέπει να υλοποιείται κατά τη διάρκεια του έργου
λογισμικού, ώστε να διασφαλίζεται ότι συλλέγονται σχετικά και χρήσιμα
δεδομένα. (Βλέπε Ενότητες 6.2, Ποργραμματισμός διεργασίας μέτρησης, και
6.3, Εκτέλεση διεργασίας μέτρησης).

### <i>Διεργασία παρακολούθησης [3*, c8]</i>

Η τήρηση του σχεδίου έργου και των σχετικών σχεδίων θα πρέπει να αξιολογείται
συνεχώς και σε προκαθορισμένα χρονικά διαστήματα. Θα πρέπει επίσης να
εκτιμώνται τα παραγόμενα αποτελέσματα και τα κριτήρια ολοκλήρωσης για
κάθε εργασία. Τα παραδοτέα θα πρέπει να αξιολογούνται ως προς τα απαιτούμενα
χαρακτηριστικά τους (για παράδειγμα, μέσω επιθεωρήσεων ή με την επίδειξη
λειτουργικότητας). Θα πρέπει να αναλύονται οι δαπάνες προσπάθειας, η
τήρηση του χρονοδιαγράμματος, το κόστος μέχρι σήμερα και η χρήση των
πόρων. Το προφίλ κινδύνου του έργου (βλέπε ενότητα 2.5, Διαχείριση κινδύνου)
θα πρέπει να επανεξεταστεί και να αποτιμηθεί η τήρηση των απαιτήσεων ποιότητας
λογισμικού (Βλέπε Απαιτήσεις ποιότητας λογισμικού στο γνωστικό πεδίο (KA)
Ποιότητας λογισιμικού/Software Quality).

Θα πρέπει να αναλυθούν τα δεδομένα των μετρήσεων. (Βλέπε Στατιστική Ανάλυση
στο γνωστικό πεδίο (KA) Θεμελίων μηχανικής/Engineering Foundations.) Θα πρέπει να
διεξάγεται ανάλυση διακύμανσης για τον προσδιορισμό της απόκλισης των πραγματικών
από τα αναμενόμενα αποτελέσματα και τιμές. Η ανάλυση αυτή μπορεί να εξετάσει υπερβάσεις
κόστους, χρονικές αποκλίσεις ή άλλα μέτρα. Θα πρέπει να πραγματοποιείται εντοπισμός και
ανάλυση ακραίων τιμών για την ποιότητα και άλλα δεδομένα μέτρησης (π.χ. ανάλυση ελαττωμάτων).
(Βλέπε Μέτρηση της ποιότητας του λογισμικού στο γνωστικό πεδίο (KA) Ποιότητα λογισμικού.)
Θα πρέπει να υπολογίζονται εκ νέου τα ανοίγματα κινδύνου. (Βλέπε ενότητα 2.5, Διαχείριση
κινδύνου.) Αυτές οι δραστηριότητες μπορούν να επιτρέψουν την ανίχνευση προβλημάτων
και τον εντοπισμό εξαιρέσεων με βάση τα όρια που έχουν ξεπεραστεί. Τα αποτελέσματα
θα πρέπει να υποβάλλονται ανάλογα με τις ανάγκες ή όταν έχουν υπερβεί τα κατώτατα όρια.
Για παράδειγμα, ο έγκαιρος εντοπισμός, ο μετριασμός και η επίλυση τρωτών σημείων και
αδυναμιών ασφαλείας λογισμικού που υπερβαίνουν τις προσδοκίες μπορεί να επηρεάσει τη
θέση ασφαλείας του συστήματος [11].

### <i>Διεργασία ελέγχου [3*, c7, c8]</i>

Οι δραστηριότητες παρακολούθησης του έργου παρέχουν τη βάση για τη λήψη αποφάσεων.
Όπου κρίνεται σκόπιμο, και όταν γίνεται κατανοητή η πιθανότητα και ο αντίκτυπος των
παραγόντων κινδύνου, μπορούν να γίνουν αλλαγές στο έργο. Αυτό μπορεί να λάβει τη
μορφή διορθωτικών ενεργειών (π.χ. επαναληπτικός έλεγχος ορισμένων στοιχείων λογισμικού).
Μπορεί να περιλαμβάνει την ενσωμάτωση πρόσθετων ενεργειών (π.χ., απόφαση για χρήση
πρωτοτύπων για την υποβοήθηση της επικύρωσης των απαιτήσεων λογισμικού- βλέπε Prototyping
στο γνωστικό πεδίο (KA) των Απαιτήσεων λογισμικού/Software Requirements). Επίσης ενδέχεται
να επιφέρει αναθεώρηση του σχεδίου έργου και άλλων εγγράφων του έργου (π.χ. των προδιαγραφών
απαιτήσεων λογισμικού) για να ληφθούν υπόψη απρόβλεπτα γεγονότα και οι επιπτώσεις τους.

Σε ορισμένες περιπτώσεις, η διεργασία ελέγχου μπορεί να οδηγήσει στην εγκατάλειψη του
έργου. Σε κάθε περίπτωση, η ομάδα ανάπτυξης λογισμικού θα πρέπει να τηρεί τις διαδικασίες
ελέγχου διαμόρφωσης λογισμικού και διαχείρισης διαμόρφωσης λογισμικού. (Βλέπε το γνωστικό 
πεδίο (KA) της διαχείρισης σχηματισμών λογισμικού/Software Configuration Management). Οι
αποφάσεις θα πρέπει να τεκμηριώνονται και να κοινοποιούνται σε όλα τα ενδιαφερόμενα μέρη,
τα σχέδια θα πρέπει να επανεξετάζονται και να αναθεωρούνται όταν χρειάζεται, και τα σχετικά
δεδομένα θα πρέπει να καταγράφονται. (Βλέπε ενότητα 6.3, Εκτέλεση διεργασίας μέτρησης).

### <i>Υποβολή αναφορών [3*, c11]</i>

Η πρόοδος που έχει σημειωθεί μέχρι σήμερα θα πρέπει να αναφέρεται σε καθορισμένες και
συμφωνημένες χρονικές στιγμές τόσο εντός του οργανισμού (π.χ. σε μια διευθύνουσα επιτροπή
έργου) όσο και σε εξωτερικά ενδιαφερόμενα μέρη (π.χ. πελάτες ή χρήστες). Οι εκθέσεις θα πρέπει
να επικεντρώνονται στις ανάγκες πληροφόρησης του κοινού-στόχου, σε αντίθεση με τη λεπτομερή
αναφορά της κατάστασης εντός της ομάδας έργου.

## Επιθεώρηση και αξιολόγηση

Σε προκαθορισμένες χρονικές στιγμές και ανάλογα με τις ανάγκες, θα πρέπει να αξιολογείται η
συνολική πρόοδος προς την επίτευξη των δηλωθέντων στόχων και η ικανοποίηση των απαιτήσεων των
ενδιαφερομένων μερών (χρηστών και πελατών). Ομοίως, θα πρέπει επίσης να διενεργούνται τακτικά
και ανάλογα με τις περιστάσεις αξιολογήσεις της αποτελεσματικότητας της διεργασίας λογισμικού,
του εμπλεκόμενου ανθρώπινου δυναμικού και των εργαλείων και μεθόδων που χρησιμοποιούνται.

### <i>Καθορισμός ικανοποίησης των απαιτήσεων [4*, c8]</i>

Η επίτευξη της ικανοποίησης των ενδιαφερομένων μερών είναι ένας βασικός στόχος του διευθύνοντα
μηχανικού λογισμικού. Η πρόοδος προς την επίτευξη αυτού του στόχου θα πρέπει να αξιολογείται
περιοδικά. Η πρόοδος θα πρέπει να αξιολογείται κατά την επίτευξη ενός σημαντικού ορόσημου του
έργου (π.χ. ολοκλήρωση της αρχιτεκτονικής σχεδιασμού λογισμικού ή ολοκλήρωση μιας τεχνικής
επιθεώρησης λογισμικού) ή κατά την ολοκλήρωση ενός επαναληπτικού κύκλου ανάπτυξης που καταλήγει
σε ένα βήμα προϊόντος. Θα πρέπει να εντοπίζονται οι αποκλίσεις από τις απαιτήσεις λογισμικού και
να λαμβάνονται τα κατάλληλα μέτρα.

Όπως και στην παραπάνω δραστηριότητα της διεργασίας ελέγχου (βλ. ενότητα 3.5, Διεργασία ελέγχου),
θα πρέπει να ακολουθούνται οι διαδικασίες ελέγχου διαμόρφωσης λογισμικού και διαχείρισης διαμόρφωσης
λογισμικού (βλέπε γνωστικό πεδίο (KA) Διαχείρισης σχηματισμών λογισμικού).

### <i>Επιθεώρηση και αξιολόγηση της απόδοσης [3*, c8, c10]</i>

Οι περιοδικές επιθεωρήσεις της απόδοσης του προσωπικού του έργου μπορούν να παράσχουν πληροφορίες
σχετικά με την πιθανότητα τήρησης των σχεδίων και των διαδικασιών και τις πιθανές περιοχές δυσκολίας
(π.χ. συγκρούσεις μεταξύ των μελών της ομάδας). Οι διάφορες μέθοδοι, εργαλεία και τεχνικές του έργου
θα πρέπει να αξιολογούνται ως προς την αποτελεσματικότητα και την καταλληλότητά τους. Η διαδικασία
του έργου θα πρέπει επίσης να αξιολογείται συστηματικά και περιοδικά ως προς τη συνάφεια, τη χρησιμότητα
και την αποτελεσματικότητα. Όπου κρίνεται σκόπιμο, θα πρέπει να πραγματοποιούνται και να διαχειρίζονται
αλλαγές στο έργο.

## Τερματισμός

Ένα ολόκληρο έργο, μια σημαντική φάση έργου ή ένας επαναληπτικός κύκλος ανάπτυξης φτάνει στον τερματισμό
όταν όλα τα σχέδια και οι διαδικασίες έχουν τεθεί σε ισχύ και ολοκληρωθεί. Στη συνέχεια θα πρέπει να
αξιολογούνται τα κριτήρια επιτυχίας του έργου, της φάσης ή της επανάληψης. Μόλις καθοριστεί ο τερματισμός,
μπορούν να πραγματοποιηθούν δραστηριότητες αρχειοθέτησης, αναδρομικής ανάλυσης και βελτίωσης των διαδικασιών.

### <i>Προσδιορισμός τερματισμού [1, s3.7, s4.6]</i>

Ο τερματισμός επέρχεται όταν έχουν ολοκληρωθεί οι καθορισμένες εργασίες για ένα έργο, μια φάση ή
μια επανάληψη και έχει επαληθευθεί η ικανοποιητική επίτευξη των κριτηρίων ολοκλήρωσης. Οι
απαιτήσεις του λογισμικού μπορούν να επιβεβαιωθούν ως ικανοποιημένες ή όχι και ο βαθμός
επίτευξης των στόχων μπορεί να προσδιοριστεί. Οι διαδικασίες τερματισμού θα πρέπει να 
εμπλέκουν τα σχετικά ενδιαφερόμενα μέρη και να τεκμηριώνουν τη σχετική αποδοχή των
ενδιαφερομένων μερών - τυχόν γνωστά προβλήματα θα πρέπει να καταγράφονται.

### <i>Δραστηριότητες τερματισμού [2, s3.7, s4.8]</i>

Μετά την επιβεβαίωση του τερματισμού, τα υλικά του έργου θα πρέπει να αρχειοθετούνται
σύμφωνα με τους κανόνες που έχουν συμφωνηθεί από τα ενδιαφερόμενα μέρη για τις μεθόδους
αρχειοθέτησης, τη θέση και τη διάρκεια - ενδεχομένως συμπεριλαμβανομένης της καταστροφής
των ευαίσθητων πληροφοριών, του λογισμικού και του μέσου στο οποίο βρίσκονται τα αντίγραφα.
Για παράδειγμα, οι κανόνες αυτοί θα μπορούσαν να απαιτούν ότι κατά τη διάρκεια του
τερματισμού, όλα τα δεδομένα αφαιρούνται και καταστρέφονται από οποιεσδήποτε συσκευές
που περιέχουν σχετικές πληροφορίες πριν από τη φυσική διάθεση των συσκευών (π.χ. σκληροί
δίσκοι προσωπικών υπολογιστών, διακομιστές, κεντρικοί υπολογιστές, προσωπικοί ψηφιακοί βοηθοί
(PDA), δρομολογητές, τείχη προστασίας, διακόπτες, ταινίες, δισκέτες, CD, DVD, κινητά τηλέφωνα,
εκτυπωτές, συσκευές αποθήκευσης δεδομένων USB (Universal Serial Bus)).

Η βάση δεδομένων μετρήσεων του οργανισμού θα πρέπει να ενημερώνεται με τα σχετικά
δεδομένα του έργου. Θα πρέπει να διενεργείται αναδρομική ανάλυση του έργου, της φάσης
ή της επανάληψης, ώστε να αναλύονται τα ζητήματα, τα προβλήματα, οι κίνδυνοι και οι
ευκαιρίες που παρουσιάστηκαν. (Βλέπε θέμα 4, Επιθεώρηση και αξιολόγηση.) Τα διδάγματα
που αντλήθηκαν από το έργο θα πρέπει να τροφοδοτηθούν στις προσπάθειες
οργανωσιακής μάθησης και βελτίωσης.

## Μέτρηση τεχνολογίας λογισμικού

Η σημασία της μέτρησης της τεχνολογίας λογισμικού για την ορθή διαχείριση και τις
πρακτικές μηχανικής είναι ευρέως αναγνωρισμένη. (Βλέπε Μέτρηση στο γνωστικό πεδίο (KA)
των θεμελίων μηχανικής Engineering Foundations) Η αποτελεσματική μέτρηση της τεχνολογίας
λογισμικού έχει γίνει ένας από τους ακρογωνιαίους λίθους της οργανωτικής ωριμότητας.
Η μέτρηση μπορεί να εφαρμοστεί σε οργανισμούς, έργα, διαδικασίες και προϊόντα εργασίας.
Η παρούσα ενότητα επικεντρώνεται στην εφαρμογή της μέτρησης σε επίπεδο έργων, διαδικασιών
και προϊόντων εργασίας.

Η ενότητα αυτή ακολουθεί το πρότυπο ISO/IEC/IEEE 15939 [6], το οποίο περιγράφει μια
διαδικασία για τον καθορισμό των δραστηριοτήτων και των καθηκόντων που απαιτούνται
για την εφαρμογή μιας διαδικασίας μέτρησης λογισμικού. Το πρότυπο περιλαμβάνει επίσης
ένα μοντέλο πληροφοριών μέτρησης. Αυτό το μοντέλο στην έκθεση PSM Continuous Iterative
Development Measurement Framework (Πλαίσιο μέτρησης συνεχούς επαναληπτικής ανάπτυξης)
έχει επίσης εκπονηθεί για προσεγγίσεις SDLC [9].

### <i>Ίδρυση και διατήρηση επιτροπής μέτρησης [7*, c1, c2]</i>

  * Καθιέρωση απαιτήσεων μέτρησης. Κάθε προσπάθεια μέτρησης θα πρέπει να καθοδηγείται
  από οργανωτικούς στόχους και να καθοδηγείται από ένα σύνολο απαιτήσεων μέτρησης που
  καθορίζονται από τον οργανισμό και το έργο (π.χ., ένας οργανωσιακός στόχος μπορεί να
  είναι η πρώτη παρουσία στην αγορά).
  * Καθορισμός του πεδίου εφαρμογής της μέτρησης. Η ομάδα έργου θα πρέπει να ορίσει
  την οργανωτική μονάδα στην οποία θα εφαρμοστεί κάθε απαίτηση μέτρησης. Αυτή μπορεί
  να είναι ένας λειτουργικός τομέας, ένα μεμονωμένο έργο, μια μεμονωμένη τοποθεσία ή
  μια ολόκληρη επιχείρηση. Θα πρέπει επίσης να εξεταστεί το χρονικό πεδίο εφαρμογής
  της προσπάθειας μέτρησης, διότι ενδέχεται να απαιτούνται οι χρονοσειρές ορισμένων
  μετρήσεων (π.χ. για τη βαθμονόμηση των μοντέλων εκτίμησης). (Βλέπε ενότητα 2.3,
  Εκτίμηση της προσπάθειας, του χρονοδιαγράμματος και του κόστους).
  * Ίδρυση ομάδας επιτροπής για τη μέτρηση. Η ίδρυση θα πρέπει να
  καθιερωθεί επίσημα, να κοινοποιηθεί και να υποστηριχθεί με πόρους.
  * Δέσμευση πόρων μέτρησης. Η δέσμευση ενός οργανισμού για τη μέτρηση αποτελεί
  βασικό παράγοντα επιτυχίας, όπως αποδεικνύεται από την ανάθεση πόρων για την
  εφαρμογή της διαδικασίας μέτρησης. Η ανάθεση πόρων περιλαμβάνει την κατανομή
  της ευθύνης για τα διάφορα καθήκοντα της διαδικασίας μέτρησης (όπως αναλυτής
  και βιβλιοθηκάριος). Θα πρέπει επίσης να διατεθεί επαρκής χρηματοδότηση,
  κατάρτιση, εργαλεία και υποστήριξη για τη διεξαγωγή της διαδικασίας.

### <i>Προγραμματισμός διεργασίας μέτρησης[7*, γ1, γ2]</i>

  * Χαρακτηρισμός της οργανωσιακής μονάδας. Η οργανωσιακή μονάδα παρέχει το
  πλαίσιο για τη μέτρηση, επομένως το οργανωσιακό πλαίσιο θα πρέπει να είναι σαφές,
  συμπεριλαμβανομένων των περιορισμών του οργανισμού στη διαδικασία μέτρησης.
  Ο χαρακτηρισμός μπορεί να δηλωθεί από την άποψη των οργανωσιακών διαδικασιών,
  των τομέων εφαρμογής, της τεχνολογίας, των οργανωτικών διεπαφών και της οργανωσιακής
  δομής.
  * Προσδιορισμός των πληροφοριακών αναγκών. Οι πληροφοριακές ανάγκες βασίζονται στους
  στόχους, τους περιορισμούς, τους κινδύνους και τα προβλήματα της οργανωσιακής μονάδας
  και μπορούν να προέρχονται από επιχειρηματικούς, οργανωσιακούς, κανονιστικούς ή/και
  προϊοντικούς στόχους. Τα ενδιαφερόμενα μέρη θα πρέπει να προσδιορίζουν, να ιεραρχούν,
  να τεκμηριώνουν, να επικοινωνούν και να επανεξετάζουν αυτές τις ανάγκες.
  * Επιλογή μέτρων. Επιλογή υποψήφιων μέτρων, με σαφείς συνδέσεις με τις πληροφοριακές ανάγκες.
  Επιλογή  μέτρων με βάση τις προτεραιότητες των αναγκών πληροφόρησης και άλλα κριτήρια, όπως
  το κόστος συλλογής, ο βαθμός διακοπής της διαδικασίας κατά τη συλλογή, η ευκολία απόκτησης
  ακριβών και συνεκτικών δεδομένων και η ευκολία ανάλυσης και υποβολής εκθέσεων.
  Τα εσωτερικά ποιοτικά χαρακτηριστικά (βλέπε Μοντέλα και χαρακτηριστικά ποιότητας στο γνωστικό
  πεδίο (KA) της Ποιότητας λογισμικού) συχνά δεν περιέχονται στις συμβατικά δεσμευτικές απαιτήσεις λογισμικού.
  Ως εκ τούτου, εξετάστε το ενδεχόμενο μέτρησης της εσωτερικής ποιότητας του λογισμικού, ώστε να
  παρέχεται ένας πρώιμος δείκτης πιθανών προβλημάτων που ενδέχεται να επηρεάσουν τους εξωτερικούς
  ενδιαφερόμενους.
  * Καθορισμός διαδικασιών συλλογής, ανάλυσης και υποβολής εκθέσεων. Αυτό περιλαμβάνει διαδικασίες
  και χρονοδιαγράμματα συλλογής, αποθήκευσης, επαλήθευσης, ανάλυσης, υποβολής εκθέσεων και διαχείρισης
  της διαμόρφωσης των δεδομένων.
  * Επιλογή κριτηρίων για την αξιολόγηση των προϊόντων πληροφοριών. Οι τεχνικοί και επιχειρηματικοί
  στόχοι της οργανωσιακής μονάδας επηρεάζουν τα κριτήρια αξιολόγησης. Τα προϊόντα πληροφοριών περιλαμβάνουν
  εκείνα που σχετίζονται με το παραγόμενο προϊόν και εκείνα που σχετίζονται με τις διαδικασίες που
  χρησιμοποιούνται για τη διαχείριση και τη μέτρηση του έργου.
  * Παροχή πόρων για τις εργασίες μέτρησης. Οι αρμόδιοι ενδιαφερόμενοι θα πρέπει να επανεξετάσουν και να
  εγκρίνουν το σχέδιο μέτρησης, ώστε να περιλαμβάνει όλες τις διαδικασίες συλλογής δεδομένων- διαδικασίες
  αποθήκευσης, ανάλυσης και υποβολής εκθέσεων- κριτήρια αξιολόγησης- χρονοδιαγράμματα- και αρμοδιότητες.
  Τα κριτήρια για την επανεξέταση αυτών των αντικειμένων θα πρέπει να καθορίζονται σε επίπεδο οργανωτικής
  μονάδας ή σε υψηλότερο επίπεδο και θα πρέπει να χρησιμοποιούνται ως βάση για τις εν λόγω επανεξετάσεις.
  Τα κριτήρια αυτά θα πρέπει να λαμβάνουν υπόψη την εμπειρία, τη διαθεσιμότητα πόρων και τις πιθανές διαταραχές
  των έργων όταν προτείνονται αλλαγές από τις τρέχουσες πρακτικές. Η έγκριση αποδεικνύει τη δέσμευση στη
  διαδικασία μέτρησης.
      * Προσδιορισμός των πόρων που πρέπει να διατεθούν για την υλοποίηση των προγραμματισμένων και εγκεκριμένων
      εργασιών μέτρησης. Η διαθεσιμότητα των πόρων μπορεί να είναι σταδιακή σε περιπτώσεις όπου οι αλλαγές
      δοκιμάζονται πιλοτικά πριν από την ευρεία ανάπτυξη. Εξετάστε τους πόρους που απαιτούνται για την επιτυχή
      ανάπτυξη νέων διαδικασιών ή μέτρων.
      * Απόκτηση και ανάπτυξη υποστηρικτικών τεχνολογιών. Αυτό περιλαμβάνει την αξιολόγηση των διαθέσιμων
      υποστηριζόμενων τεχνολογιών, την επιλογή των πιο κατάλληλων, την απόκτηση και την αξιοποίηση τους.

### <i>Εκτέλεση διεργασίας μέτρησης [7*, c1, c2]</i>

Ενσωμάτωση των διαδικασιών μέτρησης με τις σχετικές διαδικασίες λογισμικού. Οι διαδικασίες μέτρησης,
όπως η συλλογή δεδομένων, θα πρέπει να ενσωματώνονται στις διαδικασίες λογισμικού που μετρούν. Αυτό
μπορεί να συνεπάγεται την αλλαγή των υφιστάμενων διαδικασιών λογισμικού ώστε να προσαρμόζονται στις
δραστηριότητες συλλογής ή δημιουργίας δεδομένων. Θα μπορούσε επίσης να περιλαμβάνει ανάλυση των
τρεχουσών διαδικασιών λογισμικού για την ελαχιστοποίηση της πρόσθετης προσπάθειας και την
αξιολόγηση των επιπτώσεων στους εργαζόμενους, ώστε να διασφαλιστεί η αποδοχή των διαδικασιών
μέτρησης. Εξέταση θεμάτων ηθικού και άλλους ανθρώπινους παράγοντες. Επιπλέον, κοινοποιήστε τις
διαδικασίες μέτρησης σε όσους παρέχουν τα δεδομένα. Ενδέχεται επίσης να απαιτείται εκπαίδευση και
υποστήριξη. Οι διαδικασίες ανάλυσης δεδομένων και υποβολής εκθέσεων συνήθως ενσωματώνονται με παρόμοιο
τρόπο στις οργανωτικές διαδικασίες και στις διαδικασίες έργου.

Συλλογή δεδομένων. Τα δεδομένα πρέπει να συλλέγονται, να επαληθεύονται και να αποθηκεύονται. Η συλλογή
μπορεί μερικές φορές να αυτοματοποιηθεί με τη χρήση εργαλείων SEM (βλ. Θέμα 7, Εργαλεία διαχείρισης
τεχνολογίας λογισμικού) για την ανάλυση δεδομένων και την ανάπτυξη αναφορών. Τα δεδομένα μπορούν
να συγκεντρωθούν, να μετασχηματιστούν ή να καταγραφούν ως μέρος της ανάλυσης, χρησιμοποιώντας έναν
βαθμό αυστηρότητας που είναι κατάλληλος για τη φύση των δεδομένων και τις ανάγκες πληροφόρησης.
Η ανάλυση αυτή παράγει συνήθως γραφήματα, αριθμούς ή άλλους δείκτες που ενημερώνουν για συμπεράσματα
και συστάσεις που παρουσιάζονται στους ενδιαφερόμενους. (Βλέπε Στατιστική Ανάλυση στο γνωστικό πεδίο
(KA) των θεμελίων μηχανικής). Τα αποτελέσματα και τα συμπεράσματα επανεξετάζονται με τη χρήση της επίσημης
ή ανεπίσημης διαδικασίας του οργανισμού. Οι πάροχοι δεδομένων και οι χρήστες των μετρήσεων θα πρέπει
να συμμετέχουν στην αναθεώρηση των δεδομένων, ώστε να διασφαλίζεται ότι αυτά έχουν νόημα και ακρίβεια
και μπορούν να οδηγήσουν σε λογικές ενέργειες.

Προώθηση των αποτελεσμάτων. Τεκμηρίωση και κοινοποίηση των πληροφοριακών προϊόντων στους χρήστες και τα
ενδιαφερόμενα μέρη.

### <i>Αξιολόγηση μέτρησης [7*, c1, c2]</i>

Αξιολογήση των πληροφοριακών προϊόντων και της διαδικασίας μέτρησης με βάση καθορισμένα κριτήρια
αξιολόγησης και προσδιορίσμος των πλεονεκτημάτων και των αδυναμιών των πληροφοριακών προϊόντων ή
της διαδικασίας. Για τη διενέργεια της αξιολόγησης μπορεί να χρησιμοποιηθεί μια εσωτερική
διαδικασία ή ένας εξωτερικός έλεγχος, συμπεριλαμβανομένης της ανατροφοδότησης από τους
χρήστες της μέτρησης. Καταγραφή των διδαγμάτων που αποκομίσθηκαν σε κατάλληλη βάση δεδομένων.

Προσδιορισμός πιθανών βελτιώσεων. Τέτοιες βελτιώσεις μπορεί να είναι αλλαγές στη μορφή των
δεικτών, αλλαγές στις μονάδες μέτρησης ή ανακατάταξη των κατηγοριών μέτρησης. Προσδιορισμός
κόστους και όφελους των πιθανών βελτιώσεων και αναφορά των κατάλληλων ενεργειών βελτίωσης.

Γνωστοποίηση των προτεινόμενων βελτιώσεων στον ιδιοκτήτη της διαδικασίας μέτρησης και στους
ενδιαφερόμενους φορείς για εξέταση και έγκριση. Επίσης, χρειάζεται κοινοποιήση της έλλειψη
πιθανών βελτιώσεων, εάν η ανάλυση δεν εντοπίσει καμία.

## Εργαλεία διοίκησης τεχνολογίας λογισμικού [3*, c5, c6, c7]

Τα εργαλεία SEM χρησιμοποιούνται συχνά για να παρέχουν ορατότητα και έλεγχο των διαδικασιών
SEM. Ορισμένα εργαλεία είναι αυτοματοποιημένα, ενώ άλλα εφαρμόζονται χειροκίνητα. Επιπλέον,
υπάρχει μια πρόσφατη τάση προς τη χρήση ολοκληρωμένων συνόλων εργαλείων τεχνολογίας λογισμικού
καθ' όλη τη διάρκεια ενός έργου για το σχεδιασμό, τη συλλογή και καταγραφή, την παρακολούθηση
και τον έλεγχο και την αναφορά πληροφοριών για το έργο και το προϊόν. Τα εργαλεία μπορούν να
χωριστούν στις ακόλουθες κατηγορίες:

*Εργαλεία προγραμματισμού και παρακολούθησης έργου*. Τα εργαλεία προγραμματισμού και παρακολούθησης
έργου μπορούν να χρησιμοποιηθούν για την εκτίμηση της προσπάθειας και του κόστους του έργου
και για την προετοιμασία χρονοδιαγραμμάτων έργου. Για παράδειγμα, ορισμένα έργα χρησιμοποιούν
αυτοματοποιημένα εργαλεία εκτίμησης που χρησιμοποιούν το εκτιμώμενο μέγεθος και άλλα
χαρακτηριστικά ενός προϊόντος λογισμικού ως δεδομένα και στη συνέχεια εκτιμούν την απαιτούμενη
συνολική προσπάθεια, το χρονοδιάγραμμα και το κόστος. Τα εργαλεία προγραμματισμού περιλαμβάνουν
επίσης αυτοματοποιημένα εργαλεία χρονοπρογραμματισμού που αναλύουν τις εργασίες του WBS, την
εκτιμώμενη διάρκειά τους, τις σχέσεις προτεραιότητας και τους πόρους που ανατίθενται σε κάθε
εργασία για την παραγωγή ενός διαγράμματος Gantt.

*Τα εργαλεία παρακολούθησης* μπορούν να χρησιμοποιηθούν για την παρακολούθηση των ορόσημων
του έργου, των τακτικά προγραμματισμένων συναντήσεων αναφοράς κατάστασης του έργου, των
προγραμματισμένων κύκλων επανάληψης, των επιδείξεων προϊόντων και των στοιχείων δράσης.

*Εργαλεία διαχείρισης κινδύνου*. Τα εργαλεία διαχείρισης κινδύνων (βλ. ενότητα 2.5, Διαχείριση
κινδύνων) μπορούν να χρησιμοποιηθούν για την παρακολούθηση του εντοπισμού, της ανάλυσης και
της παρακολούθησης των κινδύνων. Τα εργαλεία αυτά περιλαμβάνουν προσομοίωση ή δέντρα αποφάσεων
για την ανάλυση της επίδρασης του κόστους σε σχέση με τις αποδόσεις και υποκειμενικές εκτιμήσεις
των πιθανοτήτων των συμβάντων κινδύνου. Για παράδειγμα, τα εργαλεία προσομοίωσης Monte Carlo
μπορούν να χρησιμοποιηθούν για την παραγωγή κατανομών πιθανότητας της προσπάθειας, του
χρονοδιαγράμματος και του κινδύνου συνδυάζοντας αλγοριθμικά πολλαπλές κατανομές πιθανότητας
εισόδου.

*Εργαλεία επικοινωνίας*. Τα εργαλεία επικοινωνίας μπορούν να βοηθήσουν στην παροχή έγκαιρης και
συνεκτικής πληροφόρησης στους σχετικούς ενδιαφερόμενους που εμπλέκονται σε ένα έργο. Παραδείγματα
τέτοιων εργαλείων είναι οι ειδοποιήσεις μέσω ηλεκτρονικού ταχυδρομείου και οι εκπομπές προς τα
μέλη της ομάδας και τα ενδιαφερόμενα μέρη, η τακτική κοινοποίηση των πρακτικών των συνεδριάσεων
και τα διαγράμματα που δείχνουν την πρόοδο, τις καθυστερήσεις και τις λύσεις των αιτημάτων συντήρησης.

*Εργαλεία μέτρησης*. Τα εργαλεία μέτρησης υποστηρίζουν δραστηριότητες που σχετίζονται με το πρόγραμμα
μέτρησης λογισμικού. (Βλέπε Θέμα 6, Μέτρηση τεχννολογίας λογισμικού.) Υπάρχουν λίγα εντελώς
αυτοματοποιημένα εργαλεία σε αυτή την κατηγορία. Τα εργαλεία μέτρησης για τη συλλογή, ανάλυση
και αναφορά δεδομένων μέτρησης έργου μπορεί να βασίζονται σε λογιστικά φύλλα που αναπτύσσονται
από μέλη της ομάδας έργου ή από υπαλλήλους του οργανισμού.