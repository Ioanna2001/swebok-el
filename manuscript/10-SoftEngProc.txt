# Διεργασίες τεχνολογίας λογισμικού {#softengpr}


## Ακρωνύμια

|BPMN	|Business Process Modeling Notation    |
|CASE	|Computer-aided software engineering   |
|CMM	|Capability Maturity Model             |
|CMMI	|Capability Maturity Model Integration |
|GQM	|Goal-question-metric                  |
|IDEF0|Integration definition                |
|KA 	|Knowledge Area		                     |
|PDCA	|Plan-Do-Check-Act                     |
|SLCM	|Software life cycle model             |
|SLCP	|Software life cycle process           |
|UML	|Unified Modeling Language             |


## Εισαγωγή

Το παρόν κεφάλαιο αναφέρεται στις διεργασίες τεχνολογίας λογισμικού, λαμβάνοντας υπόψη ποικίλες οπτικές: ιδέες, κύκλους ζωής και την αξιολόγηση των 
σχετικών διεργασιών. Η κοινότητα της τεχνολογίας λογισμικού είναι ιδιαίτερα ενεργή σε ό,τι αφορά την τυποποίηση ποικίλων τομέων των διεργασιών τεχνολογίας 
λογισμικού.

## Κατανομή των θεμάτων για το γνωστικό πεδίο διεργασίες τεχνολογίας λογισμικού

{id="fig-softengproc-tree"}
![Σχήμα 10.1 Κατανομή των θεμάτων στο γνωστικό πεδίο Διεργασίες τεχνολογίας λογισμικού.](images/10-SoftEngProc.png)

## Βασικές αρχές των διεργασιών τεχνολογίας λογισμικού

### Εισαγωγή

Οι διεργασίες τεχνολογίας λογισμικού περιλαμβάνουν εργασιακές δραστηριότητες τις οποίες εκτελούν οι μηχανικοί λογισμικού για την κατασκευή και 
λειτουργία λογισμικού. Όταν εμφανίστηκε ο κλάδος της τεχνολογίας λογισμικού, οι επιστήμονες, οι μηχανικοί και οι τεχνικοί έπρεπε να εξετάσουν τους 
υπάρχοντες κλάδους για να κατανοήσουν το εύρος των διεργασιών τεχνολογίας λογισμικού. Μια διεργασία αποτελείται από ένα σύνολο αλληλοσχετιζόμενων 
δραστηριοτήτων, οι οποίες μετατρέπουν ένα ή περισσότερα στοιχεία εισόδου σε στοιχεία εξόδου, ενώ παράλληλα καταναλώνουν πόρους ώστε να ολοκληρώσουν 
αυτή τη μετατροπή. Ως είδος μηχανικής, η τεχνολογία λογισμικού  χρησιμοποιεί διαδικασίες παρόμοιες με αυτές άλλων τύπων μηχανικής. Για την κατασκευή 
συσκευών ή άλλων προϊόντων, οι μηχανικοί ακολουθούν διάφορα βήματα, καταβάλλοντας σημαντική προσπάθεια σχεδιασμού, βασιζόμενοι σε ένα εξαιρετικά ευρύ 
φάσμα γνώσης, το οποίο ταυτόχρονα εμπλουτίζουν, για παράδειγμα, μέσω της μάθησης για την διαδικασία που εκτελούν και το προϊόν που δημιουργούν.

Ξεκινώντας από την δεκαετία του 1960 και μέχρι την δεκαετία του 1970, ο μηχανικός σχεδιασμός και η κατασκευή παρείχαν μια βάση—ένα θεμέλιο—για αυτό που 
θα αποτελούσε στο μέλλον έναν νέο κλάδο. Εκείνη την εποχή είχε συμφωνηθεί ότι η διεργασία ανάπτυξης λογισμικού θα αναλυόταν σε επιμέρους διαδικασίες, οι 
οποίες θα ήταν δυνατόν να περιλαμβάνουν τον σχεδιασμό, την κατασκευή και αργότερα τις λειτουργίες. Μερικές από τις διαδικασίες που χρειάζονταν για την 
κατασκευή λογισμικού ανήκαν στην κατηγορία του σχεδιασμού, ενώ άλλες στην κατηγορία κατασκευής. Ακόμη και σήμερα, η κοινότητα της τεχνολογίας λογισμικού 
συνεχίζει να μαθαίνει και να βελτιώνει τις σχετικές διεργασίες. Επί του παρόντος, επικρατεί κοινή αποδοχή της αντίληψης ότι η κατασκευή συστημάτων λογισμικού 
απαιτεί αυξημένο σχεδιασμό και προσπάθεια μάθησης, εστιασμένα στο προϊόν υπό ανάπτυξη και στην αντίστοιχη διαδικασία παραγωγής του.

Η έννοια του έργου ορίζεται ως «μια προσπάθεια με καθορισμένα κριτήρια για την έναρξη και λήξη υλοποίησης, που τίθενται για την δημιουργία ενός προϊόντος ή 
υπηρεσίας, σύμφωνα με προκαθορισμένους πόρους ή απαιτήσεις » [1] ή ως «μια προσωρινή προσπάθεια δημιουργίας ενός μοναδικού προϊόντος, υπηρεσίας ή αποτελέσματος » [13]. 
Το έργο αποτελεί έννοια του διοικητικού κλάδου, συνυφασμένο με ξεκάθαρους στόχους και δεσμευμένο από στενό χρονικό περιθώριο, όπως περιγράφεται στο γνωστικό 
πεδίο 9, της Διοίκησης Τεχνολογίας Λογισμικού. Οι διεργασίες τεχνολογίας λογισμικού συνήθως λαμβάνουν χώρα στο πλαίσιο κάποιου έργου.

Πολλές διαδικασίες των πιο συμβατικών κλάδων μηχανικής (για παράδειγμα, της ηλεκτρικής ή χημικής), περιλαμβάνουν σχεδιασμό και κατασκευή, μέσω της οποίας 
παράγονται πολλές μονάδες ενός συστήματος (για παράδειγμα, ενός χημικού αντιδραστήρα). Αυτό, ωστόσο, δεν συμβαίνει στα συστήματα λογισμικού, αν και η κατασκευή 
κρίνεται χρήσιμη για τον προσδιορισμό της ανάγκης ανάπτυξης των πολυάριθμων τμημάτων λογισμικού που στοιχειοθετούν ένα σύστημα λογισμικού. Στην ηλεκτρική ή 
χημική μηχανική, η λειτουργία των αντίστοιχων συστημάτων μετασχηματίζει (ανεπεξέργαστα) υλικά, ενέργεια και φυσικές οντότητες σε άλλες μορφές. Για τον κλάδο 
της τεχνολογίας λογισμικού, αναλογία της παραπάνω λειτουργίας θα μπορούσε να αποτελέσει η εκτέλεση ενός τμήματος λογισμικού (αποτέλεσμα συνόλου διεργασιών 
μηχανικής λογισμικού), το οποίο μετατρέπει ένα είδος δεδομένων σε άλλο.

Για το πέρας της ενότητας, με τον όρο *διεργασία* θα εννοούνται εργασιακές δραστηριότητες και όχι εκτέλεση λογισμικού. 

Το γνωστικό πεδίο των διεργασιών τεχνολογίας λογισμικού είναι στενά συνδεδεμένο με το παρόν γνωστικό πεδίο και σχετίζεται επίσης με τα γνωστικά πεδία 
Διοίκηση μηχανικής λογισμικού, Μοντέλα και μέθοδοι τεχνολογίας λογισμικού, Ποιότητα λογισμικού, Αρχιτεκτονική λογισμικού και Έλεγχος λογισμικού. Η έννοια 
της μέτρησης και  ανάλυσης αρχικής αιτίας του γνωστικού πεδίου των Βασικών αρχών μηχανικής, χαρακτηρίζεται επίσης σχετική.

### Ορισμός διεργασίας λογισμικού

Μια διεργασία αποτελείται από «ένα σύνολο αλληλοσχετιζόμενων ή αλληλοεπιδρώντων δραστηριοτήτων, οι οποίες μετατρέπουν στοιχεία εισόδου σε στοιχεία εξόδου». 
Με τον όρο δραστηριότητα ορίζεται «το σύνολο συνεκτικών καθηκόντων μιας διαδικασίας», ενώ ως καθήκον περιγράφεται «μια απαιτούμενη, προτεινόμενη ή και επιτρεπτή 
εργασία, προοριζόμενη να συμβάλλει στην επίτευξη ενός ή περισσότερων αποτελεσμάτων μιας διαδικασίας» [1]. Σύμφωνα με δεύτερο ορισμό [2], μια διεργασία συνιστά 
«προκαθορισμένη πορεία γεγονότων, ορισμένη σύμφωνα με τον σκοπό της ή την επίδρασή της, η οποία επιτυγχάνεται υπό συγκεκριμένες συνθήκες». Τρίτο ορισμό [7] 
αποτελεί η περιγραφή της διεργασίας ως «σύστημα δραστηριοτήτων, οι οποίες αναλώνουν πόρους για την μετατροπή στοιχείων εισόδου σε στοιχεία εξόδου». Τέλος, 
η έννοια της διεργασίας ενδέχεται να αναφερθεί ως «σύνολο αλληλένδετων ή αλληλοεπιδρώντων δραστηριοτήτων, που μετασχηματίζουν στοιχεία εισόδου σε στοιχεία 
εξόδου για την παράδοση του επιθυμητού αποτελέσματος» [20]. Συμπερασματικά, η περιγραφή μιας διεργασίας ενσωματώνει τα απαιτούμενα στοιχεία εισόδου, τις μεθόδους 
μετασχηματισμού και τα παραγόμενα στοιχεία εξόδου. Οι παραπάνω ορισμοί αναφέρονται σε οποιεσδήποτε διεργασίες, εφαρμοζόμενες στο τμήμα λογισμικού των συστημάτων 
λογισμικού. Τα συστήματα λογισμικού περιλαμβάνουν μηχανήματα υπολογιστών, το ανθρώπινο στοιχείο και χειρωνακτικές διαδικασίες. Το στοιχείο εξόδου μιας διεργασίας 
μπορεί να αποτελέσει στοιχείο εισόδου μιας άλλης. Οι διεργασίες ενδέχεται να περιλαμβάνουν στοιχεία ελέγχου (π.χ. οδηγίες και περιορισμούς) και μηχανισμούς 
ενεργοποίησης (π.χ. εργαλεία, τεχνολογίες ή πόρους, όπως εργατικό δυναμικό και υποδομή) σχετιζόμενα με αυτές [14].

## Κύκλοι ζωής λογισμικού 

### Ορισμός κύκλων ζωής λογισμικού, κατηγορίες διεργασιών και ορολογία 

Ένας *κύκλος ζωής*, σύμφωνα με την αναφορά [1], ορίζεται ως «η εξέλιξη ενός συστήματος, προϊόντος, υπηρεσίας, έργου από την σύλληψή του μέχρι την απόσυρση». Στην τεχνολογία λογισμικού, 
οι κύκλοι ζωής συμβάλλουν στην μεταφορά πληροφοριών σχετικών με τα συστήματα λογισμικού και ειδικότερα «με συστήματα για τα οποία το λογισμικό αποτελεί 
στοιχείο πρωταρχικής σημασίας των ενδιαφερόμενων μερών» [1]. Η έννοια των κύκλων ζωής τέθηκε σε εφαρμογή εξαιτίας της αδυναμίας επαρκούς περιγραφής της 
πολυπλοκότητας των συστημάτων μέσω του απλού προσδιορισμού και ορισμού των απαιτούμενων διεργασιών για την παραγωγή λογισμικού. Ήταν, επομένως, απαραίτητος ο 
καθορισμός των κύκλων ζωής, οι οποίοι περιλαμβάνουν μια σειρά από διεργασίες και περιορισμούς [8]. 

Στην τεχνολογία λογισμικού, ο όρος *ανάπτυξη* αφορά ένα κρίσιμο στάδιο του κύκλου ζωής ενός συστήματος, προϊόντος, υπηρεσίας ή έργου: αυτό της κατασκευής 
(ή αλλαγής) ενός συστήματος λογισμικού, ανάλογα με τις ανάγκες των ενδιαφερόμενων μερών. Σύμφωνα με  την οπτική της διαχείρισης παραγωγής/βιομηχανικής 
διαχείρισης, τα συστήματα λογισμικού αναφέρονται ως προϊόντα. Στο συγκεκριμένο πλαίσιο, έχει νόημα η χρήση του όρου *κύκλος ζωής ανάπτυξης προϊόντος λογισμικού*.

Ο *κύκλος ζωής προϊόντος* μπορεί να οριστεί ως «η σειρά των φάσεων που αντιπροσωπεύουν την εξέλιξη ενός προϊόντος, από την σύλληψη της ιδέας στην παραγωγή, 
ανάπτυξη, ωριμότητα μέχρι την απόσυρση» [13]. Ο εν λόγω ορισμός δεν περιορίζεται στα συστήματα λογισμικού αλλά αφορά, σε πιο ευρύ επίπεδο, όλα τα προϊόντα.  

Τα συστήματα λογισμικού περιέχουν μονάδες λογισμικού, οι οποίες συνιστούν «συστατικά της αρχιτεκτονικής λογισμικού σε ατομικό επίπεδο που μπορούν να υποβληθούν 
σε αυτόνομη δοκιμή» (βλ. γνωστικό πεδίο Έλεγχος λογισμικού). Ο κύκλος ζωής ενός συστήματος λογισμικού (κρίνεται σημαντικό να ληφθεί υπόψιν ότι η μηχανική λογισμικού 
υιοθετεί μια διεπιστημονική προσέγγιση) περιλαμβάνει όλες τις διεργασίες, δραστηριότητες και καθήκοντα από την σύλληψη της ιδέας του συστήματος λογισμικού μέχρι 
την απόσυρσή του, συμπεριλαμβανομένης της παραγωγής, λειτουργίας και εξέλιξης, όπως και της απόκτησης, εφόσον χρειαστεί, και της προμήθειας. Με τον ίδιο τρόπο 
μπορεί να γίνει αντιληπτός ο κύκλος ζωής ενός στοιχείου συστήματος λογισμικού (μιας μονάδας λογισμικού). Ο κύκλος ζωής ενός συστήματος λογισμικού λαμβάνει υπόψη 
τις επιχειρησιακές και τεχνικές ανάγκες των ενδιαφερόμενων μερών και την ικανότητα του συστήματος να παράγει, ως αποτέλεσμα εκτέλεσης από ομάδα των διαφορετικών 
διεργασιών του κύκλου ζωής λογισμικού (SLCPs), ένα προϊόν που ικανοποιεί τις ανάγκες των ενδιαφερόμενων μερών και χαρακτηρίζεται από το απαραίτητο επίπεδο 
ποιότητας για τους χρήστες και τα υπόλοιπα μέρη.

Οι επόμενες παράγραφοι απαριθμούν, σύμφωνα με την αναφορά [1], τις κατηγορίες διεργασιών, οι οποίες αντικατοπτρίζουν τις ποικίλες συμμετέχουσες απόψεις στην παραγωγή ενός συστήματος 
λογισμικού:  (1) τεχνικές διεργασίες, συμπεριλαμβανομένων μηχανικών πρακτικών για την παραγωγή, δημιουργία, εξέλιξη, λειτουργία και απόσυρση προϊόντων 
λογισμικού, (2) διεργασίες τεχνικής διαχείρισης, οι οποίες καλύπτουν την σχεδίαση και τον έλεγχο, όπως και την διαχείριση διαμόρφωσης, διαχείριση κινδύνου, 
διαχείριση πληροφοριών και διασφάλιση ποιότητας, (3) οργανωσιακές διαδικασίες υλοποίησης έργων που υποστηρίζουν το μοντέλο κύκλου ζωής, τη διαχείριση υποδομής, 
διαχείριση χαρτοφυλακίου και διαχείριση ανθρώπινων πόρων, γνώσης, ποιότητας και τέλος, (4) διαδικασίες σύναψης συμφωνίας, απαραίτητες για την στήριξη της 
συλλογικής λήψης αποφάσεων και των διαδικασιών απόκτησης και προμήθειας.

Ακολουθεί κατανομή των διεργασιών:

  1. Τεχνικές διεργασίες

    α)	Διεργασία ανάλυσης επιχείρησης ή αποστολής
    β)	Διεργασία καθορισμού αναγκών και απαιτήσεων ενδιαφερόμενων μερών
    γ)	Διεργασία καθορισμού απαιτήσεων συστήματος/λογισμικού
    δ)	Διεργασία καθορισμού αρχιτεκτονικής
    ε)	Διεργασία καθορισμού σχεδίου
    στ)	Διεργασία ανάλυσης συστήματος
    ζ)	Διεργασία υλοποίησης
    η)	Διεργασία ολοκλήρωσης 
    θ)	Διεργασία επαλήθευσης
    ι)	Διεργασία μετάβασης
    ια)	Διεργασία επικύρωσης
    ιβ)	Διεργασία λειτουργίας
    ιγ)	Διεργασία συντήρησης
    ιδ)	Διεργασία διάθεσης

    Διεργασίες τεχνικής διαχείρισης

      α)	Διεργασία σχεδιασμού έργου
      β)	Διεργασία αξιολόγησης έργου και ελέγχου
      γ)	Διεργασία διαχείρισης αποφάσεων
      δ)	Διεργασία διαχείρισης κινδύνου
      ε)	Διεργασία διαχείρισης διαμόρφωσης
      στ)	Διαδικασία διαχείρισης πληροφορίας
      ζ)	Διεργασία μέτρησης
      η)	Διεργασία διασφάλισης ποιότητας

  2. Οργανωσιακές διεργασίες υλοποίησης έργων 

    α)	Διεργασία διαχείρισης μοντέλου κύκλου ζωής
    β)	Διεργασία διαχείρισης υποδομής
    γ)	Διεργασία διαχείρισης χαρτοφυλακίου
    δ)	Διεργασία διαχείρισης ανθρώπινου δυναμικού
    ε)	Διεργασία διαχείρισης ποιότητας 
    στ)	Διεργασία διαχείρισης γνώσης

  3. Διεργασίες συμφωνίας και διαδικασίες απόκτησης και προμήθειας

### Λογική των κύκλων ζωής

Η δημιουργία, λειτουργία και απόσυρση προϊόντων λογισμικού απαιτούν έναν αριθμό διαδικασιών με τις αντίστοιχες δραστηριότητες και καθήκοντα, 
καθώς και ένα σύνολο περιορισμών.  Όπως σημειώθηκε προηγουμένως, τα συστήματα λογισμικού περιλαμβάνουν ανθρώπινο δυναμικό, χειρωνακτικές διαδικασίες, 
λογισμικό και μηχανήματα υπολογιστών. Ο ορισμός των διεργασιών λογισμικού, σύμφωνα με την αναφορά [12], προαπαιτεί τον καθορισμό των στοιχείων εισόδου και εξόδου. Τα στοιχεία εισόδου 
ορισμένων διεργασιών ενδέχεται να αποτελούν στοιχεία εξόδου άλλων. Ως λογικό επόμενο, οι διεργασίες του κύκλου ζωής είναι αλληλένδετες, δηλαδή κάθε ξεχωριστή 
διεργασία (τα στοιχεία εισόδου και εξόδου της) ενδέχεται να εξαρτάται από άλλες. Η συγγενική φύση των εμπλεκόμενων διαδικασιών καθιστά εξαιρετικά πολύπλοκη 
την συνολική διεργασία τεχνολογίας λογισμικού.

Ο προσδιορισμός των κύκλων ζωής συνιστά ισχυρό εργαλείο για την εφαρμογή μιας μηχανικής προσέγγισης στην δημιουργία, λειτουργία και απόσυρση των συστημάτων 
λογισμικού. Ένας κύκλος ζωής πρέπει να οριστεί σύμφωνα με τις αρχές μηχανικής που διέπουν την μηχανική ως κλάδο [8]. Ο προσδιορισμός ενός κύκλου ζωής περιλαμβάνει 
τον καθορισμό κάθε ξεχωριστής διεργασίας και των σχετικών περιορισμών. Είναι σημαντικό, η συγκεκριμενοποίηση των διεργασιών να προσφέρει χρησιμότητα στους 
ανθρώπους, επιτρέποντας μέσω αυτής, την μεταξύ τους επικοινωνία. Τέλος, η συγκεκριμενοποίηση είναι θεμιτό να χαρακτηρίζεται ως εύληπτη και ορθή, καθώς ο σωστός 
προσδιορισμός των κύκλων ζωής συνιστά θεμέλιο της τεχνικής και μηχανικής διαχείρισης, συμπεριλαμβανομένων του συντονισμού και της συμφωνίας, της μέτρησης, 
αξιολόγησης και βελτίωσης και της διαχείρισης ποιότητας.

### Οι έννοιες των μοντέλων διεργασιών και των μοντέλων κύκλου ζωής

Η ενότητα 2.1 παρέχει έναν αριθμό ορισμών του κύκλου ζωής λογισμικού. Σύμφωνα με την αναφορά [2], ένας νέος ορισμός εισάγει την έννοια του προτύπου ως κοινά αποδεκτό έγγραφο 
καθοδήγησης, ορίζοντας ότι « μια συγκεκριμένη για ένα έργο ακολουθία δραστηριοτήτων δημιουργείται μέσω της χαρτογράφησης των δραστηριοτήτων ενός προτύπου σε ένα επιλεγμένο 
μοντέλο κύκλου ζωής λογισμικού (SLCM)». Δηλαδή ένας κύκλος ζωής δημιουργείται σύμφωνα με το μοντέλο του κύκλου ζωής.

Παραδείγματα γνωστών μοντέλων κύκλου ζωής για την ανάπτυξη προϊόντος είναι, μεταξύ άλλων, το μοντέλο του καταρράκτη, το μοντέλο V (V-model), το αυξητικό μοντέλο (incremental model), 
το σπειροειδές μοντέλο (spiral model) και το Ευέλικτο μοντέλο (Agile model) [2,3,10].

### Μερικά παραδείγματα μοντέλων κύκλου ζωής για την ανάπτυξη

Κάθε σύστημα λογισμικού έχει τα δικά του χαρακτηριστικά που αντικατοπτρίζουν τις ανάγκες των ενδιαφερόμενων, τόσο των επιχειρήσεων όσο και των τεχνικών. Ένας κατάλληλος 
κύκλος ζωής θα λάβει υπόψιν του όλες αυτές τις ανάγκες. Όπως εξηγήθηκε στην ενότητα 2.3, ένας κύκλος ζωής λογισμικού θα οριστεί ως συμμορφούμενος με (μερικώς ή πλήρως) ένα 
SLCM. Ορισμένοι συγγραφείς χρησιμοποιούν τον όρο «ανάπτυξη» για να αναφερθούν σε ένα SLCM. Για παράδειγμα, χρησιμοποιείται ο όρος «επαναληπτική ανάπτυξη» αντί για «επαναληπτικό μοντέλο 
κύκλου ζωής (λογισμικού)». Οι τύποι κύκλων ζωής περιγράφονται παρακάτω.

Οι *προγνωστικοί* (predictive) κύκλοι ζωής είναι «μια μορφή κύκλου ζωής ενός έργου στην οποία το εύρος, ο χρόνος και το κόστος καθορίζονται στην πρώιμη φάση του κύκλου ζωής» [13]. 
Οι προγνωστικοί κύκλοι ζωής προϋποθέτουν ότι το σύνολο των απαιτήσεων που θα εφαρμοστούν είναι κλειστό και δεν θα υποστεί σημαντικές αλλαγές εκτός ανωτέρας βίας (force majeure).

Ένας *επαναληπτικός* (iterative) κύκλος ζωής ορίζεται ως «ένας κύκλος ζωής έργου όπου το εύρος του έργου συνήθως ορίζεται νωρίς στον κύκλο ζωής αλλά οι εκτιμήσεις του χρόνου 
και κόστους τροποποιούνται τακτικά όσο η κατανόηση του προϊόντος από την ομάδα έργου αυξάνεται. Οι επαναλήψεις αναπτύσσουν το προϊόν μέσω μιας σειράς επαναλαμβανόμενων κύκλων, 
ενώ οι αυξήσεις προσθέτουν διαδοχικά στην λειτουργικότητα του προϊόντος» [3,8,13]. Η διάρκεια των επαναλήψεων ορίζεται ξεχωριστά για κάθε έργο. Η επιλεγόμενη μέθοδος (βλ. γνωστικό πεδίο 11) 
καθορίζει τον ρόλο και μέγεθος των επαναλήψεων.

Σε έναν *εξελικτικό* (evolutionary) κύκλο ζωής, ένα προϊόν ή μια υπηρεσία αλλάζει κατά την διάρκεια της ζωής του. Αυτό ενδέχεται να συμβεί εξαιτίας της αλλαγής των απαιτήσεων 
ή αναγκών των πελατών, αλλά και εξαιτίας της εισαγωγής απαιτήσεων στο προϊόν σε διαδοχικά βήματα και όχι ως ολοκληρωμένο και ατομικό σύνολο [3,8]. Ο όρος «διαδοχικά βήματα» 
είναι συνώνυμος του όρου «επαναλήψεις».

Ένας *σταδιακός* (incremental) κύκλος ζωής ορίζεται ως «ένας προσαρμοστικός κύκλος ζωής έργου στον οποίο το παραδοτέο παράγεται μέσω μιας σειράς επαναλήψεων, οι οποίες διαδοχικά 
προσθέτουν λειτουργικότητα εντός ενός προκαθορισμένου χρονικού πλαισίου. Το παραδοτέο διαθέτει την αναγκαία και επαρκή ικανότητα να θεωρείται ολοκληρωμένο μόνο μετά το πέρας της τελικής επανάληψης» [3,8,13]. 
Οι αυξανόμενοι κύκλοι ζωής δεν είναι πάντα προγνωστικοί, έχουν ωστόσο την ικανότητα να είναι. Η *σταδιακή ανάπτυξη* (incremental development) ορίζεται ως «τεχνική ανάπτυξης λογισμικού στην οποία 
ο ορισμός απαιτήσεων, το σχέδιο, η υλοποίηση και ο έλεγχος, λαμβάνουν χώρα με επικαλυπτόμενο, επαναληπτικό (και όχι διαδοχικό) τρόπο, με αποτέλεσμα τη σταδιακή ολοκλήρωση του συνολικού 
προϊόντος λογισμικού» [2].

Η *συνεχής* (continuous) ανάπτυξη αναφέρεται σε πρακτικές τεχνολογίας λογισμικού, οι οποίες επιτρέπουν τις τακτικές εκδόσεις νέων συστημάτων (συμπεριλαμβανoμένου του λογισμικού) 
σε περιβάλλοντα σταδιοποίησης ή δοκιμών μέσω της χρήσης αυτοματοποιημένων εργαλείων [8,9,11].

Ένας κύκλος ζωής μπορεί να επιβάλει ένα κανόνα, τον οποίο αδυνατούν να επιβάλλουν οι προδιαγραφές απαιτήσεων, καθώς δεν κρίνεται εφικτή η αλλαγή αυτών μετά το πέρας της διαδικασίας 
απαιτήσεων και της συμφωνίας του πελάτη με τις προδιαγραφές. Αυτό, για παράδειγμα, συμβαίνει στους προγνωστικούς κύκλους ζωής. Από την άλλη πλευρά, όταν ο κύκλος ζωής δεν αποκλείει αλλαγές 
στις προδιαγραφές απαιτήσεων, ακόμη και αφού έχει συμφωνήσει και υπογράψει ο πελάτης και εμπράκτως επιτρέπει την αλλαγή τους ανά πάσα στιγμή [κατόπιν διαπραγμάτευσης με τα ενδιαφερόμενα μέρη], 
τότε ο κύκλος ζωής θεωρείται *ανοιχτός στις αλλαγές*. Το χαρακτηριστικό του ανοίγματος στις αλλαγές υποστηρίζεται ως ένα εκ των στοιχείων της Ευέλικτης ανάπτυξης [9,10].

### Μοντέλα κύκλου ζωής ανάπτυξης και η μηχανική τους διάσταση

Πολλά μοντέλα κύκλου ζωής έχουν γίνει ευρέως γνωστά για την ανάπτυξη της μηχανικής λογισμικού, από όταν αυτή ξεκίνησε. Ένα μοντέλο που ήταν δημοφιλές νωρίς στην ιστορία του 
κλάδου, είναι το μοντέλο του καταρράκτη [3], το οποίο, εμπίπτει στην κατηγορία των *προγνωστικών* μοντέλων, περιγραφή των οποίων πραγματοποιήθηκε προηγουμένως. Η προσέγγιση του 
μοντέλου του καταρράκτη για την ανάπτυξη προϊόντος χρησιμοποιεί έναν αριθμό φάσεων, συμπεριλαμβανομένων του ορισμού απαιτήσεων, του προκαταρκτικού και, εν συνεχεία, του λεπτομερούς 
σχεδιασμού, της συγγραφής κώδικα και του ελέγχου. Το παρόν μοντέλο εφαρμόζει μια πολύ αυστηρή διαδικασία, στην οποία καμία φάση δεν μπορεί να ξεκινήσει εφόσον, δεν έχει ολοκληρωθεί 
πρώτα η προηγούμενή της. Το μοντέλο του καταρράκτη ήταν χρήσιμο διότι εισήγαγε την έννοια της συστηματοποίησης στην ανάπτυξη των συστημάτων λογισμικού και επομένως αυτό που μπορεί 
να οριστεί ως μια μηχανική προσέγγιση στην ανάπτυξη προϊόντων λογισμικού. Πολλές παραλλαγές ή επεκτάσεις, όπως το μοντέλο V [3], με πολλά διαφορετικά ονόματα και λεκτικές αποχρώσεις, 
έχουν εισαχθεί κατά την ιστορία της τεχνολογίας λογισμικού. Το μοντέλο του καταρράκτη ήταν μια πρώιμη προσπάθεια για την αντιμετώπιση της λεγόμενης κρίσης λογισμικού [3]. Το μοντέλο του 
καταρράκτη στηρίζεται σε έγγραφα. Η αναφορά [2] ορίζει το μοντέλο καταρράκτη ως «το μοντέλο της διαδικασίας ανάπτυξης λογισμικού στο οποίο οι συστατικές δραστηριότητες, συνήθως της ιδέας, 
απαιτήσεων, υλοποίησης, δοκιμής, εγκατάστασης και ελέγχου, εκτελούνται με αυτή την σειρά, πιθανώς με επικάλυψη αλλά με ελάχιστη ή καθόλου επανάληψη».

Το μοντέλο του καταρράκτη αποτελεί ξεκάθαρο παράδειγμα ενός προγνωστικού κύκλου ζωής. Ορισμένα άλλα παραδείγματα όπως ο αυξητικός κύκλος ζωής, προσπάθησαν επίσης να αντιμετωπίσουν 
την «κρίση λογισμικού». Σε αυτό το μοντέλο (βλ. Ενότητα 2.4), διαφορετικές φάσεις λαμβάνουν χώρα με επικαλυπτόμενο και όχι διαδοχικό τρόπο. Ένας αυξητικός κύκλος ζωής μπορεί να 
είναι επίσης προγνωστικός κύκλος ζωής. Αυτό θα σήμαινε ότι οι απαιτήσεις ορίζονται και κλείνουν προτού ξεκινήσει οποιαδήποτε άλλη φάση ανάπτυξης. Το σπειροειδές μοντέλο, το οποίο 
εισήχθη από τον Boehm, είναι εξελικτικό και βασίζεται στον κίνδυνο αντί για τα έγγραφα ή τον κώδικα [3]. Η αναφορά [2] ορίζει το σπειροειδές μοντέλο ως «ένα μοντέλο της διαδικασίας ανάπτυξης 
λογισμικού, στο οποίο οι συστατικές δραστηριότητες, συνήθως η ανάλυση απαιτήσεων, ο προκαταρκτικός και μετέπειτα ο λεπτομερής σχεδιασμός, η κωδικοποίηση, η ενοποίηση και ο έλεγχος, 
εκτελούνται επαναληπτικά, μέχρι να ολοκληρωθεί το λογισμικό». Ακόμη ένα δημοφιλές μοντέλο θεωρείται η ταχεία δημιουργία πρωτοτύπων (rapid prototyping) που αποτελεί «τύπο προτυποποίησης κατά τον οποίο, 
δίνεται έμφαση στην δημιουργία πρωτοτύπων νωρίς στην διαδικασία ανάπτυξης, επιτρέποντας την έγκαιρη ανατροφοδότηση και ανάλυση για την υποστήριξη της διαδικασίας » [2].

Το Ευέλικτο Μανιφέστο (Agile Manifesto) [16] προκάλεσε αναστάτωση στην κοινότητα της τεχνολογίας λογισμικού, δημιουργώντας μια απότομη αλλαγή της υπάρχουσας νοοτροπίας. 
Η διαφορά έγκειτο, στο γεγονός ότι, σύμφωνα με τους υπογράφοντες του Ευέλικτου Μανιφέστου, η διαδικασία πρέπει να παραμένει ανοιχτή στις αλλαγές – οι απαιτήσεις θα έπρεπε 
να μπορούν να τροποποιηθούν σε οποιοδήποτε στάδιο της διαδικασίας ανάπτυξης, εφόσον υπάρξει αλλαγή στις ανάγκες των χρηστών. Η επικοινωνία και η αμοιβαία εμπιστοσύνη 
ανάμεσα σε ομάδα ανάπτυξης και πελάτη κρινόταν απαραίτητη. Οι υπογράφοντες υποστήριξαν ότι η επικοινωνία ανάμεσα στην ομάδα, συχνά δια ζώσης, και η επικοινωνία με τον 
πελάτη συνιστούσαν κλειδί. Παρόλα αυτά, το Ευέλικτο Μανιφέστο δεν αναφέρει ότι τα έγγραφα (για παράδειγμα για τον ορισμό απαιτήσεων) δεν χρειάζονται. Αντίθετα τα έγγραφα 
είναι απαραίτητα [9,10]. Οι υπογράφοντες τέθηκαν επίσης υπέρ των μικρών σταδιακών παραδόσεων λογισμικού, σε αντίθεση με έργα που εφάρμοζαν το μοντέλο του καταρράκτη και 
την μία μόνο παράδοση λογισμικού στο τέλος του έργου, το οποίο ενδέχεται να συνέβαινε μετά από χρόνια ή μήνες εργασίας. Το Ευέλικτο μοντέλο κάνει σαφή διάκριση ανάμεσα, 
από την μια πλευρά, στις αξίες και αρχές (για παράδειγμα, στην αρχή της συνεχούς παροχής αξίας στον πελάτη ή σε μια δέσμευση για τεχνική αρτιότητα) και από την άλλη, στις 
πρακτικές (προγραμματισμός από ομότιμους, προγραμματισμός σπριντ ή αναδρομικός). Η Ευέλικτη νοοτροπία [10] διαφέρει από την προγνωστική νοοτροπία. Η Ευέλικτη νοοτροπία 
βασίζεται σε ένα πλήθος αξιών και αρχών (για παράδειγμα στη σημαντικότητα της επικοινωνίας, στην αξία του να είσαι ανοιχτός στην αλλαγή, ή στη δέσμευση για τεχνική 
αρτιότητα και συνεχή παράδοση αξίας στον πελάτη). Αυτή η προσέγγιση διαφοροποιεί την Ευέλικτη από την προγνωστική νοοτροπία, η οποία εστιάζει περισσότερο στη δέσμευση για 
την εφαρμογή των προδιαγραφών των απαιτήσεων. Η Ευέλικτη μεθοδολογία συμβάλλει στην αντιμετώπιση της πολυπλοκότητας [8,10].

Αρκετές παρανοήσεις έχουν προκύψει γύρω από την Ευέλικτη νοοτροπία και ορισμένες εξ’ αυτών συνεχίζουν να υφίστανται. Μια από αυτές αναφέρει ότι η Ευέλικτη νοοτροπία αποτελεί 
μέθοδο από μόνη της, το οποίο δεν ισχύει. Άλλη παρανόηση, υποστηρίζει ότι το Ευέλικτο μοντέλο είναι ταχύτερο από αυτό του καταρράκτη, διότι δεν χρειάζεται η σύνταξη οποιουδήποτε 
εγγράφου. Μια τρίτη, ισχυρίζεται ότι το Ευέλικτο μοντέλο αποτελείται από ένα περιορισμένο ή μη δομημένο σύνολο μεθόδων/πρακτικών. Ένα γράφημα που απαριθμεί αρκετές ευρέως χρησιμοποιούμενες 
Ευέλικτες μεθόδους και πρακτικές, μπορεί για παράδειγμα να βρεθεί στην αναφορά [18]. Αρκετές Ευέλικτες μέθοδοι έγιναν δημοφιλείς, όπως ο Ακραίος Προγραμματισμός (Extreme Programming) για την 
ανάπτυξη προϊόντων, το Σκραμ (Scrum) για την διαχείριση έργων και άλλα. Ακόμη και αν ληφθεί υπόψιν η συνεχώς αυξανόμενη δημοτικότητα του Ευέλικτου μοντέλου ζωής για την αντιμετώπιση σύνθετων έργων, 
η επέκταση του Ευέλικτου μοντέλου για μεγάλα έργα και χαρτοφυλάκια εξακολουθεί να αποτελεί πρόκληση. Η σημερινή αντίληψη αναφορικά με το Ευέλικτο Μανιφέστο, είναι ότι προκάλεσε σημαντική αναστάτωση. 
Ωστόσο, αποτελεί ήδη ιδέα είκοσι ετών, με αποτέλεσμα αρκετοί συγγραφείς να υποστηρίζουν ότι ορισμένες από τις αρχές στις οποίες βασίζεται, χρειάζονται ενημέρωση, σύμφωνα με την εμπειρία που έχουν αποκομίσει 
οι προγραμματιστές τα τελευταία είκοσι χρόνια [17].

Η εφαρμογή των Ευέλικτων πρακτικών έχει ξεπεράσει τη διεργασία τεχνολογίας λογισμικού, με αποτέλεσμα οι όροι *επιχειρηματική ευελιξία* (business agility) και *Ευέλικτοι οργανισμοί* 
(Agile organizations) να είναι πλέον ευρέως διαδεδομένοι. Σύμφωνα με την οπτική της τεχνολογίας λογισμικού, η Ευέλικτη νοοτροπία έχει δημιουργήσει μια ευκαιρία για τη βιομηχανία, 
ώστε να επιτύχει τον ανασχεδιασμό και την καλύτερη ευθυγράμμιση των διεργασιών τεχνολογίας λογισμικού και των επιχειρηματικών στρατηγικών διαδικασιών στους οργανισμούς. Η χρήση της Ευέλικτης 
προσέγγισης στις επιχειρηματικές διαδικασίες συνιστά σύνηθες σενάριο. Αυτό αντικατοπτρίζεται, για παράδειγμα, στις αρχές του DevOps [11], το οποίο εξηγείται παρακάτω σε αυτή την ενότητα, και στην 
αξιολόγηση και βελτίωση των διεργασιών, που παρουσιάζεται στην ενότητα 3.


### Διοίκηση διεργασίας λογισμικού


Δύο στόχοι της διοίκησης της διεργασίας λογισμικού είναι να συνειδητοποιήσουμε
την αποδοτικότητα και την αποτελεσματικότητα της συστηματικής προσέγγισης,
ώστε να επιτευχθούν οι διεργασίες λογισμικού και να παραχθούν τα προϊόντα
έργου (σε επίπεδο ατόμου, έργου ή οργανισμού) και να εισαχθούν νέες
ή βελτιωμένες προϊόντα.

Οι διεργασίες αλλάζουν με την προσδοκία ότι μια νέα ή τροποποιημένη
διεργασία θα βελτιώσει την αποδοτικότητα ή/και την αποτελεσματικότητα
της διεργασίας και την ποιότητα των προϊόντων έργου που προκύπτουν.
Η αλλαγή προς μια νέα διεργασία, η βελτίωση μιας υφιστάμενης διεργασίας,
η οργανωσιακή αλλαγή και η αλλαγή της υποδομής (εισχώρηση της τεχνολογίας
ή αλλαγές στα εργαλεία) είναι στενά συνδεδεμένα, καθώς όλα συνήθως
ξεκινούν με στόχο τη βελτίωση του κόστους, το χρονοδιάγραμμα ανάπτυξης
ή την ποιότητα των προϊόντων λογισμικού. Η αλλαγή της διεργασίας έχει
επιπτώσεις όχι μόνο για το προϊόν λογισμικού, συχνά οδηγούν και σε
οργανωσιακές αλλαγές. Η αλλαγή μιας διεργασίας ή η εισαγωγή μιας νέας
μπορεί να έχει παράπλευρες επιδράσεις σε έναν οργανισμό.
Για παράδειγμα, αλλαγές στα εργαλεία  και την τεχνολογία της υποδομής 
της πληροφορικής απαιτούν συχνά αλλαγές της διεργασίας.

Οι υφιστάμενες διεργασίες μπορούν να τροποποιηθούν όταν άλλες νέες
διεργασίες εφαρμόζονται για πρώτη φορά, για παράδειγμα η εισαγωγή
μιας δραστηριότητας επιθεώρησης εντός ενός έργου ανάπτυξης λογισμικού
θα έχει πιθανόν επίδραση στη διεργασία δοκιμών λογισμικού (βλ. παράγραφο
[Επιθεωρήσεις και έλεγχοι](#reviews-audits), στο γνωστικό πεδίο Ποιότητα λογισμικού,
καθώς και το γνωστικό πεδίο [Έλεγχος λογισμικού](#softtesting)). Αυτές οι καταστάσεις
μπορούν επίσης να οριστούν ως «εξέλιξη της διεργασίας».
Εάν οι τροποποιήσεις είναι εκτεταμένες, τότε οι αλλαγές στην οργανωσιακή
κουλτούρα και το επιχειρησιακό μοντέλο θα είναι ενδεχομένως αναγκαίες
για να φιλοξενήσουν τις αλλαγές των διεργασιών.

{id="fig-softengproc-8.2"}
![Σχήμα 10.2 Στοιχεία μιας διεργασίας λογισμικού.](images/10.2-SoftEngProc.png)


### Υποδομή διεργασίας λογισμικού


Η καθιέρωση, η υλοποίηση και η διοίκηση των διεργασιών λογισμικού
και των μοντέλων του κύκλου ζωής λογισμικού εμφανίζονται συχνά στο
επίπεδο των ατομικών έργων λογισμικού. Παρόλα αυτά, η συστηματική
εφαρμογή των διεργασιών λογισμικού και των μοντέλων του κύκλου ζωής
του λογισμικού μέσα σε ένα οργανισμό μπορεί να προσφέρει οφέλη στο
συνολικό έργο λογισμικού εντός του οργανισμού, παρόλο που απαιτεί
δέσμευση σε οργανωσιακό επίπεδο. Μια υποδομή διεργασίας λογισμικού
μπορεί να παρέχει ορισμούς των διεργασιών, πολιτικές για την διερμηνεία
και την εφαρμογή των διεργασιών και περιγραφές των διαδικασιών που
πρέπει να χρησιμοποιούνται για την υλοποίηση των διεργασιών.
Επιπρόσθετα, μια υποδομή διεργασίας λογισμικού ενδέχεται να παράσχει
χρηματοδότηση, εργαλεία, εκπαίδευση και μέλη προσωπικού, στα οποία
έχουν ανατεθεί αρμοδιότητες για τη δημιουργία και τη διατήρηση της
υποδομής της διεργασίας λογισμικού.

Η υποδομή της διεργασίας λογισμικού ποικίλει, ανάλογα με το μέγεθος
και την πολυπλοκότητα του οργανισμού και των έργων που αναλαμβάνονται
στα πλαίσια του οργανισμού. Μικροί και απλοί οργανισμοί και έργα έχουν
μικρές και απλές ανάγκες υποδομής. Μεγάλοι και πολύπλοκοι οργανισμοί
και έργα έχουν, κατ' ανάγκη, μεγαλύτερες και πιο πολύπλοκες υποδομές
διεργασιών λογισμικού.
Στην τελευταία περίπτωση, ποικίλες οργανωσιακές μονάδες ενδέχεται
να εγκαθιδρυθούν (λόγου χάρη μια ομάδα διεργασιών τεχνολογίας λογισμικού
ή μια διευθύνουσα επιτροπή) για να επιβλέπουν την υλοποίηση και τη
βελτίωση των διεργασιών λογισμικού.

Μια κοινή εσφαλμένη εντύπωση είναι ότι η εγκαθίδρυση μιας υποδομής
διεργασίας λογισμικού και η υλοποίηση επαναλαμβανόμενων διεργασιών
λογισμικού θα προσθέσουν χρόνο και κόστος στην ανάπτυξη και διατήρηση
του λογισμικού. Υπάρχει ένα κόστος που σχετίζεται με την εισαγωγή
ή τη βελτίωση της διεργασίας λογισμικού, παρ' όλα αυτά, η εμπειρία
έχει δείξει ότι η υλοποίηση συστηματικής βελτίωσης των διεργασιών
λογισμικού τείνει να οδηγεί σε χαμηλότερα κόστη μέσω της βελτιωμένης
αποδοτικότητας, της αποφυγής της επανεπεξεργασίας και περισσότερων
αξιόπιστων και οικονομικά προσιτών λογισμικών.
Για αυτό το λόγο η απόδοση της διεργασίας επηρεάζει την ποιότητα του
προϊόντος λογισμικού.

## Κύκλοι ζωής λογισμικού

Αυτό το θέμα ασχολείται με τις κατηγορίες των διεργασιών λογισμικού,
τα μοντέλα του κύκλου ζωής του λογισμικού, την προσαρμογή της διεργασίας
λογισμικού και πρακτικές θεωρήσεις. Ένας κύκλος ζωής ανάπτυξης λογισμικού
(Software Development Life Cycle — SDLC) περιλαμβάνει τις διεργασίες
λογισμικού που χρησιμοποιούνται για να καθοριστούν και να μετατραπούν
οι απαιτήσεις λογισμικού σε ένα παραδοτέο προϊόν λογισμικού. Ένας
κύκλος ζωής προϊόντος λογισμικού (Software Product Life Cycle — SPLC)
περιλαμβάνει ένα κύκλο ζωής ανάπτυξης λογισμικού καθώς και επιπρόσθετες
διεργασίες λογισμικού που εξασφαλίζουν  την ανάπτυξη, την διατήρηση,
την υποστήριξη, την εξέλιξη, την συνταξιοδότηση, και όλες τις άλλες
διεργασίες από τη σύλληψη έως τη συνταξιοδότηση ενός προϊόντος λογισμικού,
συμπεριλαμβανομένης της διαχείρισης σχηματισμών του λογισμικού και
των διεργασιών διασφάλισης της ποιότητάς του που εφαρμόζονται κατά
τη διάρκεια του κύκλου ζωής του προϊόντος λογισμικού.
Ένας κύκλος ζωής του προϊόντος λογισμικού ενδέχεται να περιλαμβάνει
πολλαπλούς κύκλους ζωής ανάπτυξης λογισμικού για την εξέλιξη και την
ενίσχυση του λογισμικού.

Οι επιμέρους διεργασίες λογισμικού δεν έχουν καμία χρονική διάταξη
μεταξύ τους. Οι χρονικές σχέσεις μεταξύ των διεργασιών λογισμικού
παρέχονται από το μοντέλο του κύκλου ζωής λογισμικού: είτε ενός κύκλου
ζωής του προϊόντος λογισμικού (Software Product Life Cycle — SPLC)
είτε ενός κύκλος ζωής ανάπτυξης λογισμικού (Software Development
Life Cycle — SDLC). Τυπικά, τα μοντέλα κύκλου ζωής δίνουν έμφαση
στις βασικές διεργασίες λογισμικού εντός του μοντέλου και στις χρονικές
και λογικές εξαρτήσεις και σχέσεις τους.
Οι λεπτομερείς ορισμοί των διεργασιών λογισμικού σε ένα μοντέλο κύκλου
ζωής ενδέχεται να παρέχονται άμεσα ή με αναφορά σε άλλα έγγραφα.

Εκτός από τη μεταφορά των χρονικών και λογικών σχέσεων μεταξύ των
διεργασιών λογισμικού, το μοντέλο του κύκλου ζωής ανάπτυξης λογισμικού
(ή τα μοντέλα που χρησιμοποιούνται μέσα σε ένα οργανισμό) περιλαμβάνει
τους μηχανισμούς ελέγχου για την εφαρμογή των κριτηρίων εισόδου και
εξόδου, για παράδειγμα επιθεωρήσεις έργων, εγκρίσεις πελατών, έλεγχος
λογισμικού, κατώτατα όρια ποιότητας, επιδείξεις, ομάδα συναίνεσης.
Τα στοιχεία εξόδου μιας διεργασίας ανάπτυξης λογισμικού συχνά αποτελούν
τα στοιχεία εισόδου για άλλες, για παράδειγμα οι απαιτήσεις λογισμικού
παρέχουν στοιχεία εισόδου για τη διεργασία της αρχιτεκτονικής σχεδίασης
του λογισμικού και της κατασκευής λογισμικού και του ελέγχου λογισμικού.
Η ταυτόχρονη εκτέλεση πολλών δραστηριοτήτων διεργασίας λογισμικού
ενδέχεται να παράγει ένα κοινό αποτέλεσμα, για παράδειγμα οι προδιαγραφές
των διεπαφών για τη διασύνδεση μεταξύ πολλαπλών εξαρτημάτων λογισμικού
που αναπτύχθηκαν από διαφορετικές ομάδες.
Μερικές διεργασίες λογισμικού μπορεί να θεωρηθούν λιγότερο αποτελεσματικές
εκτός κι αν άλλες διεργασίες λογισμικού διεξάγονται την ίδια στιγμή,
για παράδειγμα ο σχεδιασμός ελέγχου λογισμικού κατά τη διάρκεια της
ανάλυσης των απαιτήσεων λογισμικού μπορεί να βελτιώσει τις απαιτήσεις
λογισμικού.

### Κατηγορίες διεργασιών λογισμικού

Πολλές διαφορετικές διεργασίες λογισμικού έχουν οριστεί για χρήση
σε διάφορα μέρη της ανάπτυξης λογισμικού και στους κύκλους ζωής διατήρησης
λογισμικού.
Αυτές οι διεργασίες μπορούν να κατηγοριοποιηθούν ως εξής:

  * Βασικές διεργασίες που περιλαμβάνουν τις διεργασίες λογισμικού
  για την ανάπτυξη, τη λειτουργία και τη συντήρηση του λογισμικού.
  * Υποστηρικτικές διεργασίες που εφαρμόζονται κατά διαστήματα ή συνεχώς
  σε όλο το κύκλο ζωής του προϊόντος λογισμικού για να υποστηρίξουν
  τις βασικές διεργασίες, οι οποίες περιλαμβάνουν διεργασίες λογισμικού
  όπως η διαχείριση της σχηματισμών, η διασφάλιση ποιότητας, η επαλήθευση
  και η επικύρωση.
  * Οργανωτικές διεργασίες που παρέχουν υποστήριξη στην τεχνολογία
  λογισμικού, οι οποίες περιλαμβάνουν την εκπαίδευση, την ανάλυση μέτρησης
  λογισμικού, τη διοίκηση της υποδομής, τη διαχείριση του χαρτοφυλακίου
  και της επαναχρησιμοποίησης, τη βελτίωση των οργανωσιακών διεργασιών
  και τη διαχείριση των μοντέλων του κύκλου ζωής λογισμικού.
  * Διεργασίες μεταξύ έργων, όπως η επαναχρησιμοποίηση, η γραμμή παραγωγής
  λογισμικού, και το πεδίο τεχνολογίας, οι οποίες περιλαμβάνουν περισσότερα
  από ένα μοναδικό έργο λογισμικού σε έναν οργανισμό.

Οι διεργασίες λογισμικού, πέραν αυτών που αναφέρθηκαν παραπάνω, περιλαμβάνουν
τα εξής:
Οι διεργασίες διοίκησης έργου περιλαμβάνουν διεργασίες για το σχεδιασμό
και την εκτίμηση, τη διαχείριση πόρων, τη μέτρηση, τον έλεγχο, την
ηγεσία, τη διαχείριση κινδύνου, τη διαχείριση των ενδιαφερομένων μελών
και το συντονισμό των βασικών, υποστηρικτικών, οργανωτικών και των
μεταξύ έργων διεργασιών της ανάπτυξης και της συντήρησης έργων λογισμικού.

Οι διεργασίες λογισμικού αναπτύσσονται επίσης για συγκεκριμένες ανάγκες,
όπως οι δραστηριότητες διεργασιών που αφορούν τα χαρακτηριστικά ποιότητας
του λογισμικού (βλ. στο γνωστικό πεδίο [Ποιότητα λογισμικού](#softquality)). Για παράδειγμα,
οι ανησυχίες ασφάλειας κατά τη διάρκεια της ανάπτυξης του λογισμικού
ενδέχεται να καταστήσουν αναγκαίες μια ή περισσότερες διεργασίες λογισμικού
για να προστατέψουν την ασφάλεια του περιβάλλοντος ανάπτυξης και να
μειώσουν τον κίνδυνο κακόβουλων πράξεων.
Οι διεργασίες λογισμικού μπορούν επίσης να αναπτυχθούν για να παρέχουν 
επαρκείς λόγους για την εδραίωση της εμπιστοσύνης στην ακεραιότητα
του λογισμικού.

### Μοντέλα κύκλου ζωής λογισμικού {#models-soft-life-cycle}

Η άυλη και εύπλαστη φύση του λογισμικού επιτρέπει μια ευρεία ποικιλία
μοντέλων του κύκλου ζωής ανάπτυξης λογισμικού, που κυμαίνονται από
γραμμικά μοντέλα, στα οποία οι φάσεις ανάπτυξης λογισμικού ολοκληρώνονται
διαδοχικά με ανατροφοδότηση και επανάληψη ανάλογα με τις ανάγκες,
ακολουθούμενοι από ολοκλήρωση, έλεγχο και παράδοση ενός μόνο προϊόντος,
μέχρι επαναληπτικά μοντέλα, στα οποία το λογισμικό αναπτύσσεται με
προσαυξήσεις αυξημένης λειτουργικότητας σε επαναληπτικούς κύκλους,
και μέχρι ευέλικτα μοντέλα που συνήθως περιλαμβάνουν συχνές επιδείξεις
λογισμικού, που λειτουργεί σε ένα πελάτη ή αντιπρόσωπο χρήστη ο οποίος
κατευθύνει την ανάπτυξη του λογισμικού σε σύντομους επαναλαμβανόμενους
κύκλους οι οποίοι παράγουν μικρές προσαυξήσεις λειτουργικού, παραδοτέου
λογισμικού.
Εξελικτικά, επαναληπτικά και ευέλικτα μοντέλα μπορούν να παραδώσουν
πρώιμα υποσύνολα λειτουργικού λογισμικού στο περιβάλλον του χρήστη,
αν αυτό είναι επιθυμητό.

Τα γραμμικά μοντέλα του κύκλου ζωής ανάπτυξης λογισμικού αναφέρονται
μερικές φορές ως προβλεπτικά μοντέλα, ενώ οι επαναληπτικοί και ευέλικτοι
κύκλοι ζωής ανάπτυξης λογισμικού αναφέρονται ως προσαρμοστικά μοντέλα.
Πρέπει να σημειωθεί ότι διάφορες δραστηριότητες συντήρησης κατά τη
διάρκεια του κύκλου ζωής προϊόντος λογισμικού μπορούν να διεξαχθούν
χρησιμοποιώντας διαφορετικά μοντέλα του κύκλου ζωής ανάπτυξης λογισμικού
ανάλογα με τις διεργασίες συντήρησης.

Ένα χαρακτηριστικό γνώρισμα των διαφόρων μοντέλων του κύκλου ζωής 
ανάπτυξης λογισμικού είναι ο τρόπος με τον οποίο διαχειρίζονται οι
απαιτήσεις λογισμικού. Τα γραμμικά μοντέλα ανάπτυξης συνήθως αναπτύσσουν
ένα ολοκληρωμένο σύνολο απαιτήσεων λογισμικού, στο βαθμό που αυτό
είναι εφικτό, κατά την έναρξη και τον σχεδιασμό προγράμματος του έργου.
Οι απαιτήσεις λογισμικού ελέγχονται στη συνέχεια αυστηρά. Οι αλλαγές
στις απαιτήσεις λογισμικού βασίζονται σε αιτήσεις αλλαγής, οι οποίες
υπόκεινται σε επεξεργασία από ένα πίνακα ελέγχου αλλαγών (βλ. παράγραφο
[Αίτηση, αξιολόγηση και έγκριση αλλαγών λογισμικού](#req-eval-approv-chang), στο θέμα Επιτροπή
ελέγχου διαμόρφωσης λογισμικού, στο γνωστικό πεδίο Διαχείριση σχηματισμών
λογισμικού). Ένα εξελικτικό μοντέλο παράγει διαδοχικές προσαυξήσεις
λειτουργικού, παραδοτέου λογισμικού που βασίζονται στο διαχωρισμό
των απαιτήσεων λογισμικού για να εφαρμοστούν σε κάθε προσαύξηση. Οι
απαιτήσεις λογισμικού ενδέχεται να ελέγχονται αυστηρά, όπως σε ένα
γραμμικό μοντέλο, ή μπορεί να υπάρχει μια ευελιξία στην αναθεώρηση
των απαιτήσεων λογισμικού καθώς το προϊόν λογισμικού εξελίσσεται. 
Τα ευέλικτα μοντέλα ενδέχεται να ορίζουν εξ' αρχής το πεδίο εφαρμογής
του προϊόντος και τα χαρακτηριστικά υψηλού επιπέδου.
Παρ' όλα αυτά, τα ευέλικτα μοντέλα σχεδιάζονται για να διευκολύνουν
την εξέλιξη των απαιτήσεων λογισμικού κατά τη διάρκεια του έργου.

Πρέπει να τονιστεί ότι η συνεχής κλίμακα των κύκλων ζωής ανάπτυξης
λογισμικού από γραμμικά σε ευέλικτα δεν είναι μια λεπτή, ευθεία γραμμή.
Στοιχεία από διαφορετικές προσεγγίσεις ενδέχεται να ενσωματωθούν σε
ένα συγκεκριμένο μοντέλο, για παράδειγμα ένα εξελικτικό μοντέλο του
κύκλου ζωής ανάπτυξης λογισμικού μπορεί να ενσωματώνει διαδοχικές
απαιτήσεις λογισμικού και σχεδιαστικές φάσεις, αλλά επιτρέπει σημαντική
ευελιξία όσον αφορά την αναθεώρηση των απαιτήσεων και της αρχιτεκτονικής
λογισμικού κατά τη διάρκεια της κατασκευής λογισμικού.

### Προσαρμογή της διεργασίας λογισμικού


Προκαθορισμένοι κύκλοι ζωής  ανάπτυξης και προϊόντος λογισμικού και
οι μεμονωμένες διεργασίες λογισμικού πρέπει συχνά να προσαρμοστούν
(ή «εξατομικευτούν») ώστε να ικανοποιούν καλύτερα τις τοπικές ανάγκες.
Το οργανωσιακό πλαίσιο, οι καινοτομίες στην τεχνολογία, το μέγεθος
του έργου, η κρισιμότητα του προϊόντος, οι ρυθμιστικές απαιτήσεις,
οι πρακτικές του κλάδου και η εταιρική κουλτούρα ενδέχεται να καθορίζουν
τις απαιτούμενες προσαρμογές. Η προσαρμογή μεμονωμένων διεργασιών
λογισμικού και τα μοντέλα του κύκλου ζωής του λογισμικού (ανάπτυξης
και προϊόντος) μπορεί να αποτελείται από την προσθήκη περισσότερων
λεπτομερειών για τις διεργασίες λογισμικού, τις δραστηριότητες, τις
εργασίες και τις διαδικασίες για να αντιμετωπίζουν κρίσιμες ανησυχίες.
Μπορεί να αποτελείται από τη χρήση ενός εναλλακτικού συνόλου δραστηριοτήτων
που επιτυγχάνει το σκοπό και τα αποτελέσματα της διεργασίας λογισμικού.
Η προσαρμογή μπορεί επίσης να περιλαμβάνει την παράλειψη διεργασιών
λογισμικού ή δραστηριοτήτων από το μοντέλου του κύκλου ζωής ανάπτυξη
ή προϊόντος που είναι ξεκάθαρα ασυμβίβαστες με το πεδίο δράσης των
εργασιών που πρέπει να επιτευχθούν.

### Πρακτικές θεωρήσεις


Στην πράξη, οι διεργασίες λογισμικού και οι δραστηριότητες είναι συχνά
αλληλένδετες, επικαλυπτόμενες και ταυτόχρονα εφαρμοσμένες.
Τα μοντέλα του κύκλου ζωής λογισμικού που προσδιορίζουν διακριτές
διεργασίες λογισμικού, με αυστηρά καθορισμένα κριτήρια εισόδου και
εξόδου και επιτασσόμενα όρια και διεπαφές, θα έπρεπε να αναγνωρίζονται
ως εξιδανικεύσεις που πρέπει να προσαρμοστούν για να αντανακλούν στις
πραγματικότητες της ανάπτυξης και συντήρησης λογισμικού μέσα στο οργανωσιακό
πλαίσιο και το επιχειρησιακό περιβάλλον.

Μια άλλη πρακτική θεώρηση: οι διεργασίες λογισμικού (όπως η διαχείριση
της σχηματισμών, η κατασκευή και ο έλεγχος) μπορούν να προσαρμοστούν
για να διευκολύνουν τη λειτουργία, την υποστήριξη, τη συντήρηση, τη
μετάπτωση και την απόσυρση του λογισμικού.

Επιπρόσθετοι παράγοντες που πρέπει να λαμβάνονται υπόψη κατά τον καθορισμό
και την εξατομίκευση του μοντέλου του κύκλου ζωής λογισμικού περιλαμβάνουν
την απαιτούμενη συμμόρφωση με τα πρότυπα, τις οδηγίες και τις πολιτικές,
τις απαιτήσεις των πελατών, την κρισιμότητα του προϊόντος λογισμικού
και την οργανωσιακή ωριμότητα και ικανότητες.
Άλλοι παράγοντες περιλαμβάνουν τη φύση της εργασίας, για παράδειγμα
τροποποίηση του υπάρχοντος λογισμικού έναντι νέας ανάπτυξης, και το
πεδίο εφαρμογής, για παράδειγμα αεροδιαστημική έναντι διαχείρισης
ξενοδοχείου.


## Αξιολόγηση και βελτίωση της διεργασίας λογισμικού

Το θέμα αυτό ασχολείται με μοντέλα αξιολόγησης της διεργασίας λογισμικού,
μεθόδους αξιολόγησης της διεργασίας  λογισμικού, μοντέλα βελτίωσης
της διεργασίας λογισμικού, καθώς και αξιολογήσεις συνεχών και σταδιακών
διεργασιών. Οι αξιολογήσεις της διεργασίας  λογισμικού χρησιμοποιούνται
για να αξιολογήσουν τη μορφή και το πλαίσιο της διεργασίας λογισμικού,
η οποία μπορεί να καθορίζεται από ένα τυποποιημένο σύνολο κριτηρίων.
Σε ορισμένες περιπτώσεις, οι όροι «εκτίμηση της διεργασίας» και «αξιολόγηση
δυνατότητας» χρησιμοποιούνται αντί της αξιολόγησης της διεργασίας.
Οι αξιολογήσεις δυνατότητας συνήθως πραγματοποιούνται από έναν ιδιοκτήτη
(ή πιθανού ιδιοκτήτη) ή από έναν εξωτερικό παράγοντα για λογαριασμό
του ιδιοκτήτη (ή πιθανού ιδιοκτήτη). Τα αποτελέσματα χρησιμοποιούνται
ως δείκτης του κατά πόσον οι διεργασίες του λογισμικού που χρησιμοποιούνται
από έναν προμηθευτή (ή δυνητικό προμηθευτή) είναι αποδεκτές από τον
ιδιοκτήτη.
Εκτιμήσεις επίδοσης εκτελούνται συνήθως εντός ενός οργανισμού ώστε
να εντοπιστούν οι διεργασίες λογισμικού που έχουν ανάγκη από βελτίωση
ή να καθοριστεί εάν μια διεργασία (ή διεργασίες) ικανοποιεί τα κριτήρια
σε ένα δεδομένο επίπεδο ικανότητας ή ωριμότητας διεργασίας.

Οι αξιολογήσεις διεργασιών διενεργούνται σε επίπεδο ολόκληρων οργανισμών,
οργασιακών  μονάδων μέσα στους οργανισμούς και μεμονωμένων έργων.
Η αξιολόγηση μπορεί να περιλαμβάνει θέματα όπως η αξιολόγηση του κατά
πόσο τα κριτήρια εισόδου και εξόδου της τεχνολογίας λογισμικού τηρούνται,
να επιθεωρήσει τους παράγοντες κινδύνου και τη διαχείριση του κινδύνου
ή να προσδιορίσει τα διδάγματα. Εκτίμηση διεργασίας πραγματοποιείται
χρησιμοποιώντας συνδυαστικά ένα μοντέλο αξιολόγησης και μια μέθοδο
αξιολόγησης.
Το μοντέλο μπορεί να αποτελέσει πρότυπο για μια συγκριτική αξιολόγηση
μεταξύ έργων ενός οργανισμού και μεταξύ οργανισμών.

Ο έλεγχος διεργασίας διαφέρει από την αξιολόγηση διεργασίας. Οι αξιολογήσεις
διενεργούνται για τον καθορισμό των επιπέδων δυνατότητας ή ωριμότητας
και τον προσδιορισμό διεργασιών λογισμικού που πρέπει να βελτιωθούν.
Οι έλεγχοι συνήθως εκτελούνται προκειμένου να διαπιστωθεί η συμμόρφωση
με τις πολιτικές και τα πρότυπα.
Οι έλεγχοι παρέχουν διοίκηση ορατότητας σε πραγματικές εργασίες που
διεξάγονται στην οργάνωση, ώστε να μπορούν να παρθούν ακριβείς και
ουσιαστικές αποφάσεις σχετικά με ζητήματα που επηρεάζουν ένα έργο
ανάπτυξης, μια δραστηριότητα συντήρησης ή ένα θέμα σχετικό με το λογισμικό.

Παράγοντες επιτυχίας για την αξιολόγηση της διεργασίας λογισμικού
και την βελτίωση της στο εσωτερικό οργανισμών ανάπτυξης λογισμικού
περιλαμβάνουν διαχείριση χρηματοδότησης,  σχεδιασμό, κατάρτιση, έμπειρους
και ικανούς ηγέτες, δέσμευση της ομάδας, διαχείριση  προσδοκιών, τη
χρήση παραγόντων αλλαγής, καθώς και πιλοτικά έργα και πειραματισμό
με  εργαλεία.
Επιπρόσθετοι παράγοντες περιλαμβάνουν την ανεξαρτησία από τον αξιολογητή
και την επικαιρότητα της αξιολόγησης.

### Μοντέλα αξιολόγησης διεργασίας λογισμικού


Τα μοντέλα αξιολόγησης της διεργασίας λογισμικού περιλαμβάνουν συνήθως
κριτήρια αξιολόγησης για διεργασίες λογισμικού οι οποίες θεωρούνται
ότι αποτελούν καλές πρακτικές.
Οι πρακτικές αυτές μπορεί να αντιμετωπίζουν μόνο τις διεργασίες ανάπτυξης
λογισμικού ή μπορεί επίσης να περιλαμβάνουν θέματα όπως η συντήρηση
λογισμικού, διοίκηση έργου λογισμικού, συστήματα τεχνολογίας ή διαχείριση
ανθρώπινων πόρων.

### Μέθοδοι αξιολόγησης διεργασίας λογισμικού

Μια μέθοδος αξιολόγησης διεργασίας λογισμικού μπορεί να είναι ποιοτική
ή ποσοτική. Οι ποιοτικές εκτιμήσεις βασίζονται στην κρίση των εμπειρογνωμόνων,
οι ποσοτικές αξιολογήσεις αντιστοιχίζουν αριθμητικές βαθμολογίες στις
διεργασίες λογισμικού με βάση την ανάλυση αντικειμενικών στοιχείων
που δείχνουν την επίτευξη των στόχων και των αποτελεσμάτων μίας καθορισμένης
διεργασίας λογισμικού.
Για παράδειγμα, μια ποσοτική αξιολόγηση της διεργασίας επιθεώρησης
λογισμικού θα μπορούσε να γίνει με την εξέταση των διαδικαστικών βημάτων
που ακολουθήθηκαν και τα αποτελέσματα που βρέθηκαν, καθώς και τα δεδομένα
σχετικά με τα σφάλματα που διαπιστώθηκαν και το χρόνο που απαιτήθηκε
για να τα εντοπίσουμε και να τα διορθώσουμε συγκριτικά με τον έλεγχο
του λογισμικού.

Μια τυπική μέθοδος αξιολόγησης της διεργασίας ανάπτυξης λογισμικού
περιλαμβάνει σχεδιασμό, εύρεση στοιχείων (από τη συλλογή στοιχείων
μέσω ερωτηματολογίων, συνεντεύξεων και παρατήρησης πρακτικών εργασίας),
συλλογή και επικύρωση των δεδομένων διεργασίας, καθώς και ανάλυση
και δημιουργία αναφορών.
Οι αξιολογήσεις μιας διεργασίας μπορεί να στηρίζονται στην υποκειμενική,
ποιοτική κρίση του αξιολογητή ή στην αντικειμενική παρουσία ή απουσία
καθορισμένων αντικειμένων, αρχείων και άλλων αποδεικτικών.

Οι δραστηριότητες που πραγματοποιούνται κατά τη διάρκεια της αξιολόγησης
μιας διεργασίας λογισμικού και η κατανομή προσπάθειας για δραστηριότητες
αξιολόγησης είναι διαφορετικές ανάλογα με το σκοπό της αξιολόγησης
της διεργασίας λογισμικού.
Αξιολογήσεις διεργασίας λογισμικού μπορεί να αναληφθούν για την ανάπτυξη
βαθμολογιών δυνατότητας, οι οποίες χρησιμοποιούνται για την δημιουργία
προτάσεων βελτίωσης της διεργασίας ή μπορεί να αναληφθούν για να αποκτηθεί
μια βαθμολογία ωριμότητας της διεργασίας, προκειμένου να βρεθεί αν
πληροί τις προϋποθέσεις για ένα συμβόλαιο ή μία βράβευση.

Η ποιότητα των αποτελεσμάτων της αξιολόγησης εξαρτάται από τη μέθοδο
αξιολόγησης της διεργασίας λογισμικού, την ακεραιότητα και την ποιότητα
των δεδομένων υπό παρακολούθηση, την ικανότητα της ομάδας αξιολόγησης
και την αντικειμενικότητα της, και τα στοιχεία που εξετάστηκαν κατά
τη διάρκεια της αξιολόγησης. Ο στόχος της αξιολόγησης της διεργασίας
λογισμικού είναι να αποκτηθούν βαθύτερες γνώσεις που θα καθορίσουν
την τρέχουσα κατάσταση μιας διεργασίας ή διεργασιών και να παρέχουν
μία βάση για τη βελτίωση της διεργασίας.
Η διενέργεια αξιολόγησης μιας διεργασίας λογισμικού, ακολουθώντας
μια λίστα συμμόρφωσης χωρίς το κέρδος διορατικότητας προσθέτει μικρή
αξία.

### Μοντέλα βελτίωσης διεργασίας λογισμικού

Μοντέλα βελτίωση της διεργασίας λογισμικού τονίζουν τους επαναλαμβανόμενους
κύκλους συνεχούς βελτίωσης. Ο κύκλος βελτίωσης μιας διεργασίας λογισμικού
συνήθως περιλαμβάνει τις υποδιεργασίες μέτρησης, ανάλυσης, αλλαγής.
Το μοντέλο Σχεδίασε-Πράξε-Έλεγξε-Δράσε (Plan-Do-Check-Act) είναι
μία πολύ γνωστή επαναληπτική προσέγγιση στη βελτίωση μιας διεργασίας
λογισμικού. Οι δραστηριότητες βελτίωσης περιλαμβάνουν τον προσδιορισμό
και την ιεράρχηση των επιθυμητών βελτιώσεων (Σχεδιασμός),  την εισαγωγή
μιας βελτίωσης, συμπεριλαμβανομένης της διαχείρισης της αλλαγής και
της κατάρτισης (Πράξη),  την αξιολόγηση της βελτίωσης σε σχέση με
τα προηγούμενα ή τα υποδειγματικά αποτελέσματα και το κόστος της διεργασίας
(Έλεγχος) και την περαιτέρω εφαρμογή τροποποιήσεων (Δράση).
Το μοντέλο βελτίωσης διεργασίας Σχεδίασε-Πράξε-Έλεγξε-Δράσε (Plan-Do-Check-Act)
μπορεί να εφαρμοστεί, για παράδειγμα, ώστε να βελτιωθούν διεργασίες
λογισμικού που ενισχύουν την πρόληψη σφαλμάτων.

### Συνεχείς και κλιμακωτές βαθμολογίες διεργασίας λογισμικού

Η ικανότητα της διεργασίας λογισμικού και η ωριμότητα της διεργασίας
λογισμικού βαθμολογούνται συνήθως χρησιμοποιώντας πέντε ή έξι επίπεδα
χαρακτηρισμού της ικανότητας ή της ωριμότητας των διεργασιών λογισμικού
που χρησιμοποιούνται στο εσωτερικό ενός οργανισμού.

Ένα συνεχές σύστημα βαθμολόγησης περιλαμβάνει την ανάθεση βαθμολογίας
σε κάθε ενδιαφέροντος διεργασία του λογισμικού.  Ένα κλιμακωτό σύστημα
βαθμολόγησης καθορίζεται με την εκχώρηση της ίδιας βαθμολογίας ωριμότητας
για όλες τις διεργασίες λογισμικού μέσα σε ένα συγκεκριμένο επίπεδο
διεργασίας. Μια αναπαράσταση συνεχών και κλιμακωτών επίπεδων διεργασίας
παρέχεται στον Πίνακα 8.1.
Τα συνεχή μοντέλα χρησιμοποιούν συνήθως μία βαθμολόγηση με αρχή το
μηδέν, ενώ τα κλιμακωτά μοντέλα συνήθως όχι.


|Επίπεδα	|Συνεχής αναπαράσταση των επιπέδων ικανότητας	|Κλιμακωτή αναπαράσταση των επιπέδων ωριμότητας	
|---------------|-----------------------------------------------|-----------------------------------------------
|0		|Ανολοκλήρωτη				   	|						
|1		|Εκτελέσιμη					|Αρχική						
|2		|Διαχειρίσιμη					|Διαχειρίσιμη						
|3		|Καθορισμένη					|Καθορισμένη					
|4		|						|Ποσοτικά διαχειρίσιμη				
|5		|						|Βελτιούμενη					

*Πίνακας 8.1*

Στον Πίνακα 8.1, το επίπεδο 0 δείχνει ότι μια διεργασία λογισμικού
δεν έχει εκτελεστεί ή δεν πρόκειται να εκτελεστεί. Στο επίπεδο 1,
μια διεργασία λογισμικού εκτελείται (βαθμολόγηση ικανότητας), ή
οι διεργασίες λογισμικού σε ένα επίπεδο ωριμότητας 1 εκτελούνται,
αλλά σε μία επί τούτω (ad hoc), ανεπίσημη βάση. Στο επίπεδο
2, μια διεργασία λογισμικού (βαθμολόγηση ικανότητας) ή οι διεργασίες
σε επίπεδο ωριμότητας 2 διεξάγονται κατά τρόπο που να παρέχει διοικητική
ορατότητα στα ενδιάμεσα εργασιακά προϊόντα και μπορούν να ασκήσουν
κάποιο έλεγχο στις μεταβάσεις μεταξύ των διεργασιών. Στο επίπεδο 3,
μια μόνο διεργασία λογισμικού ή διεργασίες σε μία ομάδα ωριμότητας
επιπέδου 3 συν μία διεργασία ή διεργασίες σε επίπεδο ωριμότητας 2
ορίζονται σαφώς (πιθανώς σε οργανωσιακές πολιτικές και διαδικασίες
), και επαναλαμβάνονται σε διάφορα έργα. Στο επίπεδο 3 ικανότητας
ή ωριμότητας της διεργασίας παρέχεται η βάση για τη βελτίωση της διεργασίας
σε έναν οργανισμό, επειδή μία διεργασία (ή διεργασίες) εκτελούνται
με παρόμοιο τρόπο. Αυτό επιτρέπει τη συλλογή δεδομένων απόδοσης από
πολλά έργα με ομοιόμορφο τρόπο. Στο επίπεδο ωριμότητας 4, ποσοτικές
μετρήσεις μπορούν να εφαρμοστούν και να χρησιμοποιηθούν για την αξιολόγηση
της διεργασίας και μπορεί να εφαρμοστεί στατιστική ανάλυση.
Στο επίπεδο ωριμότητας 5, μηχανισμοί για τη συνεχή βελτίωση της διεργασίας
εφαρμόζονται.

Συνεχείς και κλιμακωτές αναπαραστάσεις μπορούν να χρησιμοποιηθούν
για να καθορίσουν τη σειρά με την οποία οι διεργασίες λογισμικού πρόκειται
να βελτιωθούν. Στη συνεχή αναπαράσταση, τα διαφορετικά επίπεδα ικανότητας
για τις διαφορετικές διεργασίες λογισμικού παρέχουν μια κατευθυντήρια
γραμμή για τον καθορισμό της σειράς με την οποία οι διεργασίες λογισμικού
θα πρέπει να βελτιωθούν.
Στη σταδιακή αναπαράσταση, η ικανοποίηση των στόχων ενός συνόλου διεργασιών
λογισμικού μέσα σε ένα επίπεδο ωριμότητας πραγματοποιείται για αυτό
το επίπεδο ωριμότητας, το οποίο παρέχει τα θεμέλια για τη βελτίωση
όλων των διεργασιών λογισμικού στο επόμενο υψηλότερο επίπεδο.

## Μέτρηση λογισμικού

Αυτό το θέμα αφορά την διεργασία λογισμικού και τη μέτρηση προϊόντος,
ποιότητα των αποτελεσμάτων μέτρησης, μοντέλα πληροφοριών λογισμικού
και τεχνικές μέτρησης διεργασίας λογισμικού (βλ.
ενότητα 3, Μέτρηση/Measurement, στο γνωστικό πεδίο Θεμέλια μηχανικής/Engineering
Foundations στο οδηγό SWEBOK).

Πριν από την εφαρμογή μίας νέας διεργασίας ή την τροποποίηση μίας
υφιστάμενης διεργασίας, τα αποτελέσματα μέτρησης της τρέχουσας κατάστασης
θα πρέπει να ληφθούν για να προσφέρουν μια βάση σύγκρισης μεταξύ της
τρέχουσας κατάστασης και της νέας κατάστασης. Για παράδειγμα, πριν
από την εισαγωγή της διαδικασίας επιθεώρησης του λογισμικού πρέπει
να μετράται η προσπάθεια που απαιτείται για να διορθωθούν τα σφάλματα
που ανακαλύπτονται κατά τη δοκιμή. Μετά από μια αρχική περίοδο εκκίνησης
μετά την εισαγωγή της διαδικασίας επιθεώρησης, η συνδυασμένη προσπάθεια
επιθεώρησης, καθώς και ελέγχου, μπορεί να συγκριθεί με την προηγούμενη
 προσπάθεια που απαιτήθηκε αποκλειστικά για τον έλεγχο.
Παρόμοιες θεωρήσεις εφαρμόζονται κατά την αλλαγή μιας διεργασίας.

### Μέτρηση διεργασίας λογισμικού και προϊόντος

Η μέτρηση διεργασίας λογισμικού και προϊόντος ασχολούνται με τον προσδιορισμό
της αποδοτικότητας και της αποτελεσματικότητας της διεργασίας, δραστηριότητας
ή εργασίας λογισμικού. Η αποδοτικότητα μιας διεργασίας, δραστηριότητας
ή εργασίας λογισμικού, είναι ο λόγος των πόρων που πραγματικά καταναλώνονται
διά τους πόρους που αναμένεται ή είναι επιθυμητό να καταναλωθούν για
την ολοκλήρωση μιας διεργασίας, δραστηριότητας ή εργασίας λογισμικού
(βλ. παράγραφο [Αποδοτικότητα](#efficiency), στο γνωστικό πεδίο Οικονομικά
τεχνολογίας λογισμικού).
Η προσπάθεια (ή το ισοδύναμο κόστος) είναι η βασική μετρική των πόρων
για τις περισσότερες διεργασίες, δραστηριότητες και εργασίες λογισμικού,
μετριέται σε μονάδες όπως ανθρωποώρες, μεροκάματα, εβδομάδες, ή μήνες
προσπάθειας του προσωπικού ή σε ισοδύναμες νομισματικές μονάδες,
όπως ευρώ ή δολάρια.
Η αποτελεσματικότητα είναι ο λόγος του πραγματικού αναμενόμενου
αποτελέσματος που παράγεται από μια διεργασία, δραστηριότητα ή εργασία
λογισμικού, όπως για παράδειγμα ο πραγματικός αριθμός των σφαλμάτων
που εντοπίστηκαν και διορθώθηκαν κατά τη διάρκεια της δοκιμής του
λογισμικού διά τον αναμενόμενο αριθμό των σφαλμάτων που πρέπει να
εντοπιστούν και να διορθωθούν, ίσως με βάση τα ιστορικά δεδομένα
για παρόμοια έργα (βλ. παράγραφο [Αποτελεσματικότητα](#effectiveness), στο γνωστικό
πεδίο Οικονομικά τεχνολογίας λογισμικού).
Τονίζεται ότι η μέτρηση της αποτελεσματικότητας της διεργασίας λογισμικού
απαιτεί τη μέτρηση των σχετικών χαρακτηριστικών προϊόντος, για παράδειγμα,
η μέτρηση των σφαλμάτων του λογισμικού που ανακαλύφθηκαν και διορθώθηκαν
κατά τη διάρκεια ελέγχου του λογισμικού.

Πρέπει κανείς να προσέχει κατά τη μέτρηση χαρακτηριστικών του προϊόντος
για τον καθορισμό της αποτελεσματικότητας της διεργασίας.
Για παράδειγμα, ο αριθμός των σφαλμάτων που διαπιστώνονται και διορθώνονται
από τις δοκιμές μπορεί να μην φτάσει τον αναμενόμενο αριθμό σφαλμάτων
και έτσι να παρέχει μια παραπλανητικά χαμηλή μέτρηση αποτελεσματικότητας,
είτε επειδή το υπό δοκιμή λογισμικό είναι καλύτερης ποιότητας είτε
ίσως επειδή η εισαγωγή μίας νέας αντίθετης διαδικασίας επιθεώρησης
έχει μειώσει τον υπολειπόμενο αριθμό σφαλμάτων στο λογισμικό.

Οι μετρήσεις προϊόντος που μπορεί να είναι σημαντικές για τον προσδιορισμό
της αποτελεσματικότητας των διεργασιών λογισμικού συμπεριλαμβάνουν
την πολυπλοκότητα του προϊόντος, το σύνολο των σφαλμάτων, την πυκνότητα
σφαλμάτων και την ποιότητα των απαιτήσεων, της τεκμηρίωσης του σχεδιασμού
και άλλων συναφών προϊόντων εργασίας.

Επίσης, σημειώστε ότι η αποδοτικότητα και η αποτελεσματικότητα αποτελούν
αυτοτελείς έννοιες.
Μια αποτελεσματική διεργασία λογισμικού μπορεί να είναι μη αποδοτική
για την επίτευξη ενός επιθυμητού αποτελέσματος διεργασίας λογισμικού,
για παράδειγμα το ύψος της προσπάθειας που καταβλήθηκε για να εντοπίσουμε
και να διορθώσουμε τα σφάλματα του λογισμικού θα μπορούσε να είναι
πολύ υψηλό και να οδηγήσει σε χαμηλή απόδοση, σε σύγκριση με τις προσδοκίες.

Μια αποτελεσματική διεργασία μπορεί να είναι αναποτελεσματική στην
επίτευξη της επιθυμητής μετατροπής των εισερχόμενων προϊόντων εργασίας 
σε εξερχόμενα προϊόντα εργασίας, για παράδειγμα η αποτυχία να βρει
και να διορθώσει ένα επαρκή αριθμό σφαλμάτων λογισμικού κατά τη διαδικασία
ελέγχου.

Αιτίες χαμηλής αποδοτικότητας ή/και χαμηλής αποτελεσματικότητας
στον τρόπο με τον οποίο εκτελείται μια διεργασία λογισμικού, δραστηριότητα
ή εργασία μπορεί να περιλαμβάνουν ένα ή περισσότερα από τα ακόλουθα
προβλήματα: ελαττωματικά εισερχόμενα προϊόντα εργασίας, άπειρο προσωπικό,
έλλειψη  κατάλληλων εργαλείων και υποδομών, εκμάθηση μιας νέας διεργασία,
ένα σύνθετο προϊόν ή μια άγνωστη περιοχή προϊόντος.
Η αποδοτικότητα και η αποτελεσματικότητα της εκτέλεσης μιας διεργασίας
λογισμικού επηρεάζονται επίσης (θετικά ή αρνητικά) από παράγοντες
όπως η αλλαγή του προσωπικού του λογισμικού, αλλαγές του χρονοπρογραμματισμού,
ένα νέο εκπρόσωπο πελάτη ή μια νέα οργανωσιακή πολιτική.

Στη τεχνολογία λογισμικού, η παραγωγικότητα εκτέλεσης μιας διεργασίας,
δραστηριότητας ή εργασίας είναι ο λόγος του αποτελέσματος που παράγεται
δια τους πόρους που καταναλώνονται, για παράδειγμα ο αριθμός των σφαλμάτων
του λογισμικού που ανακαλύφθηκαν και διορθώθηκαν δια τις ανθρωποώρες
προσπάθειας (βλ. παράγραφο [Παραγωγικότητα](#productivity), στο γνωστικό πεδίο
Οικονομικά τεχνολογίας λογισμικού).
Η ακριβής μέτρηση της παραγωγικότητας πρέπει να συμπεριλαμβάνει τη
συνολική προσπάθεια που χρησιμοποιήθηκε για να ικανοποιήσει τα κριτήρια
εξόδου μιας διεργασίας λογισμικού, δραστηριότητας ή εργασίας, για
παράδειγμα η προσπάθεια που απαιτείται για να διορθωθούν τα σφάλματα
που ανακαλύπτονται κατά τη διάρκεια της δοκιμής του λογισμικού πρέπει
να περιλαμβάνεται στην παραγωγικότητα της ανάπτυξης λογισμικού.

Ο υπολογισμός της παραγωγικότητας πρέπει να αντιπροσωπεύει το πλαίσιο
εντός του οποίου το έργο ολοκληρώνεται. Για παράδειγμα, η προσπάθεια
να διορθωθούν σφάλματα που ανακαλύφθηκαν θα πρέπει να περιλαμβάνεται
στον υπολογισμό της παραγωγικότητας της ομάδας λογισμικού, εάν τα
μέλη της ομάδας  διορθώνουν τα σφάλματα που βρίσκουν, όπως και στον
έλεγχο μονάδας από τους προγραμματιστές λογισμικού ή σε μία διαλειτουργική
ευέλικτη ομάδα. Εναλλακτικά ο υπολογισμός της παραγωγικότητας μπορεί
να συμπεριλαμβάνει είτε την προσπάθεια από τους προγραμματιστές λογισμικού
ή την προσπάθεια μιας ανεξάρτητης ομάδας ελέγχου, ανάλογα με το ποιος
επιλύει τα σφάλματα που διαπιστώνονται από τους ανεξάρτητους ελεγκτές.
Σημειώστε ότι αυτό το παράδειγμα αναφέρεται στην προσπάθεια των ομάδων
των προγραμματιστών ή των ομάδων των ελεγκτών και όχι σε άτομα.
Η παραγωγικότητα λογισμικού που υπολογίζεται σε ατομικό επίπεδο μπορεί
να είναι παραπλανητική, εξαιτίας των πολλών παραγόντων που μπορεί
να επηρεάσουν την ατομική παραγωγικότητα των μηχανικών λογισμικού.

Τυποποιημένοι ορισμοί και κανόνες υπολογισμού για τη μέτρηση των διεργασιών
λογισμικού και των προϊόντων εργασίας είναι απαραίτητοι για την παροχή
τυποποιημένων αποτελεσμάτων μέτρησης σε όλα τα έργα στο πλαίσιο ενός
οργανισμού, για την συμπλήρωση ενός αποθετηρίου ιστορικών δεδομένων
που μπορεί να αναλύεται για να προσδιοριστούν οι διεργασίες λογισμικού
που πρέπει να βελτιωθούν, και για την οικοδόμηση μοντέλων πρόβλεψης
με βάση στοιχεία που έχουν συγκεντρωθεί.
Στο παραπάνω παράδειγμα, ορισμοί των σφαλμάτων του λογισμικού και
οι ώρες προσωπικού που αφορούν προσπάθειες δοκιμών, καθώς και οι κανόνες
υπολογισμού σφαλμάτων και προσπάθειας θα ήταν απαραίτητοι για να επιτευχθούν
ικανοποιητικά αποτελέσματα μέτρησης.

Ο βαθμός στον οποίο η διεργασία λογισμικού έχει θεσμοθετηθεί είναι
σημαντικός. Η μη θεσμοθέτηση μιας διεργασίας λογισμικού μπορεί να
εξηγήσει γιατί «καλές» διεργασίες λογισμικού δεν παράγουν πάντα τα
αναμενόμενα αποτελέσματα.
Οι διεργασίες λογισμικού μπορεί να θεσμοθετηθούν με την έγκριση στο
πλαίσιο της τοπικής οργανωτικής μονάδας ή σε μεγαλύτερες μονάδες της
επιχείρησης.

### Ποιότητα των αποτελεσμάτων μέτρησης

Η ποιότητα της διεργασίας και των αποτελεσμάτων μέτρησης του προϊόντος
καθορίζεται κυρίως από την αξιοπιστία και την εγκυρότητα των μετρούμενων
αποτελεσμάτων. Μετρήσεις που δεν πληρούν τα ποιοτικά κριτήρια μπορεί
να οδηγήσουν σε λανθασμένες ερμηνείες και εσφαλμένες πρωτοβουλίες
βελτίωσης της διεργασίας λογισμικού.
Άλλες επιθυμητές ιδιότητες των μετρήσεων λογισμικού περιλαμβάνουν
την ευκολία της συλλογής, ανάλυσης και παρουσίασης, καθώς και μια
ισχυρή συσχέτιση μεταξύ αιτίου και αιτιατού.,

Το θέμα Μέτρηση τεχνολογίας λογισμικού στο γνωστικό πεδίο Διοίκηση
τεχνολογίας λογισμικού περιγράφει μια διαδικασία για την εφαρμογή
ενός προγράμματος μέτρησης λογισμικού.

### Μοντέλα πληροφορίας λογισμικού

Τα μοντέλα πληροφοριών λογισμικού επιτρέπουν τη μοντελοποίηση, ανάλυση
και πρόβλεψη της διεργασίας λογισμικού και των χαρακτηριστικών προϊόντων
λογισμικού ώστε να δώσουν απαντήσεις σε σχετικές ερωτήσεις και να
επιτύχουν τους στόχους βελτίωσης της διαδικασίας και του προϊόντος.
Τα απαιτούμενα δεδομένα μπορούν να συλλέγονται και να διατηρούνται
σε ένα αποθετήριο. Τα δεδομένα μπορούν να αναλυθούν και τα μοντέλα
να κατασκευαστούν. Η επικύρωση και η βελτίωση των μοντέλων πληροφοριών
λογισμικού συμβαίνουν κατά τη διάρκεια έργων λογισμικού και μετά την
ολοκλήρωση των έργων για να διασφαλιστεί ότι το επίπεδο ακρίβειας
είναι επαρκές και ότι οι περιορισμοί τους είναι γνωστοί και κατανοητοί.
Τα μοντέλα πληροφοριών λογισμικού μπορεί επίσης να αναπτυχθούν για
πλαίσιο πέραν των έργων λογισμικού, για παράδειγμα ένα μοντέλο πληροφοριών
του λογισμικού θα μπορούσε να αναπτυχθεί για τις διεργασίες που εφαρμόζονται
σε έναν οργανισμό, όπως η διαχείριση σχηματισμών του λογισμικού ή
των διαδικασιών διασφάλισης της ποιότητας λογισμικού σε οργανωσιακό
επίπεδο.
Η δόμηση ενός μοντέλου πληροφοριών λογισμικού με βάση την ανάλυση
περιλαμβάνει την ανάπτυξη, τη βαθμονόμηση και την αξιολόγηση ενός
μοντέλου. Ένα μοντέλο πληροφοριών λογισμικού αναπτύσσεται με τη θέσπιση
ενός υποτιθέμενου μετασχηματισμού των μεταβλητών εισόδου σε επιθυμητά
αποτελέσματα, για παράδειγμα το μέγεθος και η πολυπλοκότητα των προϊόντων
θα μπορούσε να μετατραπεί σε εκτιμούμενη προσπάθεια απαιτούμενη για
την ανάπτυξη ενός προϊόντος λογισμικού με τη χρήση μίας εξίσωσης παλινδρόμησης
ανεπτυγμένης από την παρατήρηση των δεδομένων προηγούμενων έργων.
Ένα μοντέλο βαθμονομείται με την προσαρμογή των παραμέτρων του μοντέλου
για να ταιριάζουν με τα αποτελέσματα που παρατηρήθηκαν σε προηγούμενα
έργα, για παράδειγμα ο εκθέτης σε ένα μη γραμμικό μοντέλο παλινδρόμησης
μπορεί να αλλάξει με την εφαρμογή της εξίσωσης παλινδρόμησης σε ένα
διαφορετικό σύνολο των προηγούμενων έργων, εκτός από τα έργα που χρησιμοποιήθηκαν
για την ανάπτυξη του μοντέλου.

Ένα μοντέλο αξιολογείται συγκρίνοντας τα υπολογιζόμενα αποτελέσματα
και τα  πραγματικά αποτελέσματα για ένα διαφορετικό σύνολο παρόμοιων
δεδομένων.
Υπάρχουν τρία πιθανά αποτελέσματα της αξιολόγησης:

  * Τα αποτελέσματα που υπολογίζονται για το διαφορετικό σύνολο δεδομένων
  αποκλίνουν σημαντικά από τα πραγματικά αποτελέσματα για το συγκεκριμένο
  σύνολο των δεδομένων, στην οποία περίπτωση το παραγόμενο μοντέλο δεν
  ισχύει για το νέο σύνολο δεδομένων και δεν θα έπρεπε να εφαρμόζεται
  για να αναλύσει ή να πραγματοποιήσει προβλέψεις για τα μελλοντικά
  έργα
  * Τα αποτελέσματα που υπολογίζονται για το νέο σύνολο δεδομένων είναι
  κοντά στα πραγματικά αποτελέσματα για το συγκεκριμένο σύνολο των δεδομένων,
  στην οποία περίπτωση γίνονται μικροπροσαρμογές στις παραμέτρους του
  μοντέλου για τη βελτίωση της συμφωνίας
  * Τα αποτελέσματα που υπολογίζονται για το νέο σύνολο δεδομένων και
  τα υποσύνολα δεδομένων είναι πολύ κοντά και δεν απαιτούνται προσαρμογές
  στο μοντέλο.

Συνεχής αξιολόγηση του μοντέλου μπορεί να υποδείξει την ανάγκη για
προσαρμογές στην πάροδο του χρόνου καθώς το πλαίσιο στο οποίο το μοντέλο
εφαρμόζεται αλλάζει.

Η μέθοδος Στόχοι/Ερωτήσεις/Μετρήσεις (Goal-Question-Metric)
(GQM) προοριζόταν αρχικά για τον καθορισμό των δραστηριοτήτων μέτρησης,
αλλά μπορεί επίσης να χρησιμοποιηθεί ως οδηγός για την ανάλυση και
τη βελτίωση των διεργασιών λογισμικού.

Μπορεί να χρησιμοποιηθεί ως οδηγός για την δόμηση ενός μοντέλου πληροφοριών
λογισμικού με βάση την ανάλυση.
Τα αποτελέσματα που λαμβάνονται από το μοντέλο πληροφοριών του λογισμικού
μπορούν να χρησιμοποιηθούν για να καθοδηγήσουν τη βελτίωση της διεργασίας.

Το ακόλουθο παράδειγμα απεικονίζει την εφαρμογή της μεθόδου GQM:

  * Στόχος: Μειώστε τον μέσο χρόνο επεξεργασίας μιας αίτησης αλλαγής
  κατά 10% μέσα σε έξι μήνες.
  * Ερώτηση 1-1: Ποιος είναι ο βασικός χρόνος επεξεργασίας ενός αιτήματος
  αλλαγής;
  * Μέτρηση 1-1-1: Μέσος όρος του χρόνου επεξεργασίας ενός αιτήματος
  αλλαγής στην ημερομηνία έναρξης.
  * Μέτρηση 1-1-2: Τυπική απόκλιση του χρόνου επεξεργασίας ενός αιτήματος
  αλλαγής στην ημερομηνία έναρξης.
  * Ερώτηση 1-2: Ποιος είναι ο τρέχων χρόνος επεξεργασίας ενός αιτήματος
  αλλαγής;
  * Μέτρηση 1-2-1: Τρέχον μέσος όρος του  χρόνου επεξεργασίας ενός αιτήματος
  αλλαγής.
  * Μέτρηση 1-2-2: Τυπική απόκλιση του τρέχοντος χρόνου επεξεργασίας
  ενός αιτήματος αλλαγής.

### Τεχνικές μέτρησης διεργασίας λογισμικού

 
Οι τεχνικές μέτρησης της διεργασίας λογισμικού που χρησιμοποιούνται
για τη συλλογή δεδομένων διεργασίας και δεδομένων των προϊόντων εργασίας,
μετατρέπουν τα δεδομένα σε χρήσιμες πληροφορίες και αναλύουν τις πληροφορίες
για να προσδιοριστούν δραστηριότητες των διεργασιών που είναι υποψήφιες
για βελτίωση.  Σε ορισμένες περιπτώσεις, μπορεί να χρειαστούν νέες
διεργασίες λογισμικού.

Οι τεχνικές μέτρησης διεργασίας παρέχουν επίσης τις πληροφορίες που
απαιτούνται για τη μέτρηση των επιπτώσεων των πρωτοβουλιών βελτίωσης
της διεργασίας.
Οι τεχνικές μέτρησης διεργασίας μπορεί να χρησιμοποιηθούν για τη συλλογή
τόσο ποσοτικών όσο και ποιοτικών δεδομένων.

#### Τεχνικές μέτρησης ποσοτικής διεργασίας

 
Ο σκοπός των τεχνικών μέτρησης ποσοτικής διεργασίας είναι η συλλογή,
η μετατροπή, και η ανάλυση της ποσοτικής διεργασίας και των στοιχείων
του προϊόντος εργασίας που μπορεί να χρησιμοποιηθούν για να δείξουν
που χρειάζονται βελτιώσεις της διεργασίας και να αξιολογηθούν τα αποτελέσματα
των πρωτοβουλιών για βελτίωση της διεργασίας.
Τεχνικές μέτρησης ποσοτικής διεργασίας χρησιμοποιούνται για τη συλλογή
και ανάλυση δεδομένων σε αριθμητική μορφή στην οποία μπορούν να εφαρμοστούν
μαθηματικές και στατιστικές τεχνικές.

Δεδομένα ποσοτικής διεργασίας μπορεί να συλλεχθούν ως παραπροϊόν των
διεργασιών λογισμικού.
Για παράδειγμα, ο αριθμός των σφαλμάτων που διαπιστώθηκαν κατά τη
δοκιμή του λογισμικού και οι ώρες του προσωπικού που καταναλώθηκαν
μπορούν να συλλέγονται με άμεση μέτρηση, και η παραγωγικότητα της
εύρεσης σφαλμάτων μπορεί να προέρχεται από τον υπολογισμό των σφαλμάτων
που έχουν διαπιστωθεί ανά ώρα προσωπικού.

Βασικά εργαλεία για τον έλεγχο της ποιότητας μπορεί να χρησιμοποιηθούν
για την ανάλυση των δεδομένων μέτρησης ποσοτικής διεργασίας, όπως
φύλλα ελέγχου, διαγράμματα Pareto, ιστογράμματα, διαγράμματα διασποράς,
χρονοδιαγράμματα, διαγράμματα ελέγχου και διαγράμματα αιτίου-αιτιατού.
Επιπλέον, διάφορες στατιστικές τεχνικές μπορούν να χρησιμοποιηθούν,
οι οποίες κυμαίνονται από τον υπολογισμό των διαμέσων και μέσων όρων
σε μεθόδους πολυπαραγοντικής ανάλυσης.

Τα δεδομένα που συλλέγονται με τη χρήση ποσοτικών μεθόδων μέτρησης
της διεργασίας μπορούν επίσης να χρησιμοποιηθούν ως είσοδοι στα μοντέλα
προσομοίωσης.
Τα μοντέλα αυτά μπορούν να χρησιμοποιηθούν για την εκτίμηση των επιπτώσεων
των διαφόρων προσεγγίσεων βελτίωσης της διεργασίας λογισμικού.

Η Ορθογώνια Ταξινόμηση Σφαλμάτων (Orthogonal Defect Classification)
(ODC) μπορεί να χρησιμοποιηθεί για την ανάλυση των δεδομένων μέτρησης
ποσοτικής διεργασίας. Η ODC μπορεί να χρησιμοποιηθεί για να ομαδοποιήσει
τα  σφάλματα σε κατηγορίες και να συνδέσει τα σφάλματα σε κάθε κατηγορία
με τη διεργασία λογισμικού ή των διεργασιών λογισμικού από όπου προέρχεται
η εκάστοτε ομάδα ελαττωμάτων (βλ. παράγραφο [Χαρακτηρισμός σφαλμάτων](#charact-defect),
στο γνωστικό πεδίο Ποιότητα λογισμικού). Σφάλματα διεπαφής λογισμικού,
για παράδειγμα μπορεί να προέρχονται από μία ανεπαρκή διαδικασία σχεδιασμού
λογισμικού. Η βελτίωση της διαδικασίας σχεδιασμού του λογισμικού θα
μειώσει τον αριθμό των σφαλμάτων διεπαφής λογισμικού.
Η ODC μπορεί να παρέχει ποσοτικά στοιχεία για την εφαρμογή ανάλυσης
της βασικής αιτίας.

Η Στατιστική Διαδικασία Ελέγχου μπορεί να χρησιμοποιηθεί για την παρακολούθηση
της σταθερότητας της διεργασία ή την έλλειψη σταθερότητας της διεργασίας,
χρησιμοποιώντας διαγράμματα ελέγχου.

#### Ποιοτικές τεχνικές μέτρησης διεργασίας

Οι ποιοτικές τεχνικές μέτρησης διεργασίας, συμπεριλαμβανομένης της
συνέντευξης, ερωτηματολογίων, και κρίσης εμπειρογνώμονα, μπορεί να
χρησιμοποιηθούν για να ενισχύσουν τις ποσοτικές τεχνικές μέτρησης
διεργασίας.
Τεχνικές ομαδικής συναίνεσης, συμπεριλαμβανομένης της τεχνικής Delphi, 
μπορούν να χρησιμοποιηθούν για να επιτευχθεί συναίνεση μεταξύ των
ομάδων των ενδιαφερομένων μελών.

## Εργαλεία διεργασιών τεχνολογίας λογισμικού

 
Τα εργαλεία διεργασίας λογισμικού υποστηρίζουν πολλές από τις σημειώσεις
που χρησιμοποιούνται για τον καθορισμό, την εφαρμογή και τη διοίκηση
μεμονωμένων διεργασιών λογισμικού και μοντέλα κύκλου ζωής λογισμικού.
Περιλαμβάνουν συντάκτες για σημειολογία, όπως διαγράμματα ροής δεδομένων,
διαγράμματα κατάστασης, BPMN, IDEF0 διαγράμματα, τα δίκτυα Petri και
UML διαγράμματα δραστηριότητας. Σε ορισμένες περιπτώσεις, τα εργαλεία
διεργασίας λογισμικού επιτρέπουν διαφορετικούς τύπους ανάλυσης και
προσομοίωσης, για παράδειγμα την προσομοίωση διακριτού γεγονότος.
Επιπροσθέτως, επιχειρηματικά εργαλεία γενικού σκοπού, όπως ένα υπολογιστικό
φύλλο, μπορεί να είναι χρήσιμα.

Τα εργαλεία της Υπολογιστικά υποβοηθούμενης τεχνολογίας λογισμικού
(Computer-Assisted Software Engineering — CASE) μπορεί να ενισχύσουν
τη χρήση των ολοκληρωμένων διαδικασιών, να υποστηρίξουν την εκτέλεση
των ορισμών διεργασίας και να παρέχουν καθοδήγηση στους ανθρώπους
κατά την εκτέλεση σαφώς καθορισμένων διεργασιών. Απλά εργαλεία, όπως
επεξεργαστές κειμένου και υπολογιστικά φύλλα, μπορούν να χρησιμοποιηθούν
για την προετοιμασία περιγραφών κειμένου των διεργασιών, δραστηριοτήτων,
και εργασιών.
Τα εργαλεία αυτά υποστηρίζουν επίσης ιχνηλασιμότητα μεταξύ των εισροών
και των εκροών πολλαπλών διεργασιών λογισμικού, όπως η ανάλυση των
αναγκών των ενδιαφερομένων μελών, οι προδιαγραφές απαιτήσεων λογισμικού,
η αρχιτεκτονική λογισμικού και ο λεπτομερής σχεδιασμός λογισμικού,
καθώς και τα αποτελέσματα των διεργασιών λογισμικού, όπως η τεκμηρίωση,
τα στοιχεία λογισμικού, οι περιπτώσεις ελέγχου και οι αναφορές προβλημάτων.
Οι περισσότεροι από τους τομείς της γνώσης στον παρόντα Οδηγό περιγράφουν
εξειδικευμένα εργαλεία που μπορούν να χρησιμοποιηθούν για τη διαχείριση
των διεργασιών στο πλαίσιο αυτού του γνωστικού πεδίου. Ειδικότερα,
δείτε το γνωστικό πεδίο [Διαχείριση σχηματισμών λογισμικού](#softconfigmng) για μια
τοποθέτηση σχετικά με τα εργαλεία διαχείρισης σχηματισμών λογισμικού,
που μπορούν να χρησιμοποιηθούν για την διαχείριση των διεργασιών της
κατασκευής, της ολοκλήρωσης και της έκδοσης των προϊόντων λογισμικού.
Άλλα εργαλεία, όπως εκείνα για την διαχείριση απαιτήσεων και για τον
έλεγχο, περιγράφονται στο κατάλληλο γνωστικό πεδίο.

Τα εργαλεία διεργασίας λογισμικού μπορεί να υποστηρίξουν έργα που
αφορούν γεωγραφικά διασκορπισμένες (εικονικές) ομάδες.
Ολοένα και περισσότερο, εργαλεία διεργασίας λογισμικού είναι διαθέσιμα
μέσω υπολογιστικών εγκαταστάσεων στο σύννεφο, καθώς και μέσω ειδικών
υποδομών.

Ένας πίνακας ελέγχου του έργου ή ταμπλό μπορεί να εμφανίσει επιλεγμένα
χαρακτηριστικά διεργασίας και προϊόντων για έργα λογισμικού και να
υποδείξει μετρήσεις που είναι εντός των ορίων ελέγχου, καθώς και εκείνες
που χρειάζονται διορθωτικά μέτρα.
