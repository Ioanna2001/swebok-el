# Ποιότητα λογισμικού {#softquality}

## Ακρωνύμια

|CI/CD|Continuous Integration/Continuous Delivery|
|CoSQ	|Cost of Software Quality	      |
|COTS	|Commercial Off-the-Shelf Software    |
|FMEA	|Failure Mode and Effects Analysis    |
|FTA	|Fault Tree Analysis		      |
|IV&V |Independent Verification and Validation|
|PDCA	|Plan-Do-Check-Act		      |
|PSP	|Personal Software Process	      |
|QFD	|Quality Function Deployment	      |
|SCM  |Software Configuration Management   |
|SQA	|Software Quality Assurance	      |
|SQAP |Software Quality Assurance Plan     |
|SQC	|Software Quality Control             |
|SQM	|Software Quality Management          |
|VSEs |Very Small Entities              |
|V&V	|Verification and Validation          |

## Εισαγωγή

Τι είναι η ποιότητα λογισμικού και γιατί είναι τόσο σημαντική που
περιλαμβάνεται σε πολλά γνωστικά πεδία του Οδηγού SWEBOK ;

Ένας λόγος είναι πως ο όρος ποιότητα λογισμικού είναι πολυσήμαντος.
Η ποιότητα λογισμικού μπορεί να αναφέρεται στα επιθυμητά χαρακτηριστικά
προϊόντων λογισμικού, στο βαθμό που μία συγκεκριμένη διεργασία του
προϊόντος λογισμικού κατέχει αυτά τα χαρακτηριστικά, και σε διεργασίες,
εργαλεία και τεχνικές που χρησιμοποιούνται για να επιτευχθούν αυτά
τα χαρακτηριστικά. Με την πάροδο των ετών, συγγραφείς και οργανισμοί
ερμήνευσαν τον όρο ποιότητα με διαφορετικούς τρόπους. Για τον Phil
Crosby σήμαινε «συμμόρφωση στις απαιτήσεις». Ο Watts Humphrey αναφέρεται
σε αυτήν ως «επίτευξη εξαιρετικών επιπέδων καταλληλότητας χρήσης».
Παράλληλα, η IBM επινόησε τη φράση «ποιότητα καθοδηγούμενη από την
αγορά» («market - driven quality»), όπου «ο πελάτης είναι ο τελικός
κριτής».

Πιο πρόσφατα, η ποιότητα λογισμικού ερμηνεύθηκε ως «η δυνατότητα του
προϊόντος λογισμικού να ικανοποιεί ήδη δηλωμένες και υπονοούμενες
ανάγκες υπό καθορισμένες συνθήκες» και ως «το βαθμό στον οποίο ένα
προϊόν λογισμικού πληροί τις καθιερωμένες απαιτήσεις». Ωστόσο, η ποιότητα
εξαρτάται από το βαθμό στον οποίο αυτές οι καθιερωμένες απαιτήσεις
αντιπροσωπεύουν με ακρίβεια τις ανάγκες των ενδιαφερόμενων μελών,
τα ''θέλω'' και τις προσδοκίες τους. Και οι δύο ορισμοί περικλείουν
την προϋπόθεση της συμμόρφωσης με τις απαιτήσεις. Κανένας δεν αναφέρεται
σε τύπους απαιτήσεων, όπως λειτουργικότητα, εμπιστευτικότητα, απόδοση,
αξιοπιστία ή κάποιο άλλο χαρακτηριστικό.

Αξιοσημείωτο είναι, όμως, το γεγονός ότι αυτοί οι ορισμοί τονίζουν
ότι η ποιότητα εξαρτάται από τις απαιτήσεις.

Αυτοί οι ορισμοί, ακόμη, απεικονίζουν έναν άλλο λόγο για την διασφάλιση
της ποιότητας λογισμικού σε όλη την έκταση αυτού του Οδηγού: μια
συχνή ασάφεια της ποιότητας λογισμικού σε σχέση με τις απαιτήσεις
ποιότητας λογισμικού («the - ilities» είναι ένας κοινός τρόπος
στενογραφίας). Οι απαιτήσεις ποιότητας λογισμικού είναι πράγματι γνωρίσματα
ή περιορισμοί των λειτουργικών απαιτήσεων, δηλαδή του τι κάνει το
σύστημα. Οι απαιτήσεις λογισμικού μπορούν ακόμη να προσδιορίσουν τη
χρήση πόρων, τα πρωτόκολλα επικοινωνίας ή πολλά άλλα χαρακτηριστικά.
Αυτό το γνωστικό πεδίο επιδιώκει σαφήνεια μέσω της χρήσης ποιότητας
λογισμικού με την ευρύτερη έννοια των προαναφερθέντων ορισμών και
μέσω της χρήσης απαιτήσεων ποιότητας λογισμικού ως περιορισμούς
σε λειτουργικές απαιτήσεις.

Η ποιότητα λογισμικού επιτυγχάνεται με την συμμόρφωση σε όλες τις
απαιτήσεις ανεξαρτήτως του τι χαρακτηριστικό προσδιορίζεται ή πώς
οι απαιτήσεις ομαδοποιούνται ή ονομάζονται.

Επίσης, η ποιότητα λογισμικού λαμβάνεται υπ' όψιν σε αρκετά από τα
γνωστικά πεδία του οδηγού, καθώς είναι μια βασική παράμετρος για ένα
εγχείρημα τεχνολογίας λογισμικού. Για όλα τα προϊόντα τεχνολογίας,
ο πρωταρχικός στόχος είναι να παραδοθεί η μέγιστη αξία στα ενδιαφερόμενα
μέλη και παράλληλα να εξισορροπηθούν οι περιορισμοί του κόστους ανάπτυξης
και του χρονοπρογραμματισμού. Αυτό μερικές φορές χαρακτηρίζεται ως
«καταλληλότητα στη χρήση». Η αξία για τα ενδιαφερόμενα μέλη μεταφράζεται
σε απαιτήσεις.

Για προϊόντα λογισμικού, τα ενδιαφερόμενα μέλη θα μπορούσαν να εκλάβουν
ως αξία το κόστος, δηλαδή τι πληρώνουν για το προϊόν, το χρόνο παράδοσης,
δηλαδή το πόσο γρήγορα παραλαμβάνουν το προϊόν και την ποιότητα του
λογισμικού.

Η πτυχή της ποιότητας της διαδικασίας λογισμικού, η οποία έχει υπονοηθεί από
τα παραπάνω, πρέπει να καταστεί σαφής. Η ποιότητα μιας διαδικασίας λογισμικού
μπορεί να παρατηρηθεί σε χαρακτηριστικά διαδικασίας όπως η αποδοτικότητα, η
αποτελεσματικότητα, η χρηστικότητα, και η δυνατότητα εκμάθησης. Ατέλειες στη
διαδικασία είναι πιθανό να εμφανιστούν και ως ατέλειες στο τελικό προϊόν.

Τέλος, τα κινήματα Agile και DevOps στοχεύουν στη βελτίωση της διαδικασίας λογισμικού
και της ποιότητας του προϊόντος μέσω της συμμόρφωσης, προωθώντας γρήγορους κύκλους
επαναληπτικής ανατροφοδότησης και εξαλείφοντας τα οργανωσιακά σιλό συστεγάζοντας 
τους χρήστες και τους μηχανικούς λογισμικού. Άλλες πρακτικές, όπως προγραμματισμός σε ζεύγη 
και αυτοματοποίηση της ανάπτυξης, του ελέγχου, και των λειτουργικών υπηρεσιών προσδίδουν
επίσης αξία, βελτιώνοντας την αποδοτικότητα, και εντοπίζοντας έγκαιρα ατέλειες.

Αυτό το γνωστικό πεδίο αναφέρει ορισμούς και παρέχει μια επισκόπηση
των πρακτικών, των εργαλείων και των τεχνικών για τον προσδιορισμό
της ποιότητας λογισμικού και για την εκτίμηση της κατάστασης της ποιότητας
λογισμικού κατά τη διάρκεια της ανάπτυξης, συντήρησης και επέκτασης, τόσο από
την πλευρά του τελικού προϊόντος, όσο και από την πλευρά της διαδικασίας λογισμικού.

## Κατανομή των θεμάτων για την ποιότητα λογισμικού

{id="fig-softqual-tree"}
![Σχήμα 12.1 Κατανομή των θεμάτων στο γνωστικό πεδίο Ποιότητα λογισμικού.](images/12-SoftQual.png)

Η κατανομή των θεμάτων για τα γνωστικά πεδία της ποιότητας λογισμικού απεικονίζεται στο [Σχήμα 12.1](#fig-softqual-tree).

## Βασικές αρχές της ποιότητας λογισμικού


Η επίτευξη συμφωνίας στο τι σημαίνει ποιότητα για όλα τα ενδιαφερόμενα
μέλη και η σαφής ενημέρωση αναφορικά με αυτήν στους μηχανικούς λογισμικού
προϋποθέτουν να έχουν επίσημα προσδιοριστεί και συζητηθεί οι πολλές
πτυχές της ποιότητας.

Οι κύριες προκλήσεις που πρέπει να αντιμετωπίσει ένας μηχανικός λογισμικού
για να διασφαλίσει την ποιότητα περιλαμβάνουν:

* Δυσκολίες στον σαφή καθορισμό των απαιτήσεων
* Διατήρηση αποδοτικής επικοινωνίας με τον πελάτη/χρήστη
* Αποκλίσεις από τις προδιαγραφές
* Σφάλματα στην αρχιτεκτονική και το σχεδιασμό
* Σφάλματα στον κώδικα
* Μη συμμόρφωση με τις τρέχουσες διαδικασίες
* Ανεπαρκείς αξιολογήσεις και έλεγχοι προϊόντων
* Σφάλματα στην τεκμηρίωση

Η ποιότητα λογισμικού ορίζεται ως "συμμόρφωση στις καθορισμένες απαιτήσεις,
η δυνατότητα ενός προϊόντος λογισμικού να ικανοποιεί τις ανάγκες που έχουν
δηλωθεί και υπονοηθεί κάτω από συγκεκριμένες συνθήκες" [6]. Ορίζεται επιπρόσθετα
"από το βαθμό στον οποίο ένα προϊόν λογισμικού ικανοποιεί τις καθορισμένες
απαιτήσεις - όμως, η ποιότητα εξαρτάται από το βαθμό στον οποίο αυτές οι 
καθορισμένες απαιτήσεις αναπαριστούν εύστοχα τις ανάγκες, τα θέλω και τις
προσδοκιές των ενδιαφερόμενων μελών" [6]. Η ποιότητα συχνά σημαίνει έλλειψη 
ελαττωμάτων. Η λέξη *ελάττωμα* είναι πολυσήμαντη, καθώς οι μηχανικοί, όπως και άλλοι, 
τη χρησιμοποιούν για να αναφερθούν σε κάθε είδος ανομοιομορφίας. Αλλά, οι διαφορετικές
κουλτούρες και προδιαγραφές της μηχανικής, συχνά αντιλαμβάνονται την έννοια "ελάττωμα"
καθώς και άλλους όρους, με κάποια συγκεκριμένη σημασία. Για να αποφευχθεί αυτή η σύγχυση,
οι μηχανικοί λογισμικού θα πρέπει να χρησιμοποιούν τη σημασία που παρέχεται από τις
προδιαγραφές τους [14]:

* *Σφάλμα*: "Μια ανθρώπινη ενέργεια που οδηγεί σε ένα λανθασμένο αποτέλεσμα."
Ονομάζεται επίσης και *ανθρώπινο σφάλμα*.

* *Ελάττωμα*: Μια "ατέλεια ή ανεπάρκεια σε ένα προϊόν εργασίας το οποίο δεν 
ανταποκρίνεται στις απαιτήσεις ή στις προδιαγραφές, και πρέπει είτε να διορθωθεί
είτε να αντικατασταθεί." Ελάττωμα παρεμβάλλεται όταν το άτομο που αναπτύσσει το 
λογισμικό σφάλλει. Ελλοχεύει στο λογισμικό μέχρις ότου (και αν) ανακαλυφθεί.

* *Αποτυχία*: Ο "τερματισμός της ικανότητας ενός συστήματος να εκτελέσει μια απαιτούμενη
λειτουργία ή η αδυναμία του να αποδόσει κάτω από τα προκαθορισμένα όρια - μια εμφανής
απόκλιση απο τις προδιαγραφές του συστήματος, όπου ένα σύστημα ή τμήμα αυτού δεν εκτελεί
απαραίτητη λειτουργικότητα εντός των προκαθορισμένων ορίων." Η αποτυχία προκαλείται
όταν το λογισμικό εκτελεί κάτι ελαττωματικό.

Ένας μηχανικός λογισμικού θα πρέπει να κατανοεί τις έννοιες, τα χαρακτηριστικά,
τις αξίες της ποιότητας και την εφαρμογή τους στο λογισμικό που βρίσκεται
υπό ανάπτυξη ή συντήρηση. Η σημαντική έννοια είναι ότι οι απαιτήσεις
λογισμικού προσδιορίζουν τα απαιτούμενα γνωρίσματα ποιότητας του λογισμικού.
Οι απαιτήσεις λογισμικού επηρεάζουν τις μεθόδους μέτρησης και τα κριτήρια
αποδοχής για την αξιολόγηση του βαθμού στον οποίο το λογισμικό και
η σχετική τεκμηρίωση επιτυγχάνουν τα επιθυμητά επίπεδα ποιότητας.

Μια άλλη σημαντική έννοια είναι ότι η ποιότητα λογισμικού θα έπρεπε να σχεδιάζεται
από τα πρώτα στάδια και να αξιολογείται σε αρκετά ορόσημα στη διάρκεια του κύκλου
ζωής του λογισμικού. Τέλος, το πως να προσαρμοστούν οι δραστηριότητες διασφάλισης ποιότητας 
λογισμικού (SQA) για να φιλοξενήσουν την ευέλικτη ανάπτυξη λογισμικού, παρουσιάζεται εκτενώς
στο πρότυπο 730:2014 του Ινστιτούτου Ηλεκτρολόγων και Ηλεκτρικών Μηχανικών (πρότυπο IEEE) [6].

### *Κουλτούρα και δεοντολογία της τεχνολογίας λογισμικού* [1*, c1s1.6; c2] [5*]

Η οργανωσιακή κουλτούρα επηρεάζει το πως οι μηχανικοί λογισμικού έχουν
επιρροή στην ποιότητα λογισμικού. Όπως εξηγεί και ο Iberle [19], οι πρακτικές
μηχανικής λογισμικού διαφέρουν, και εξαρτώνται από το επιχειρηματικό μοντέλο (π.χ.
εξατομίκευσης, μαζικής αγοράς, εμπορικό, υλικολογισμικό) και τον κλάδο στον οποίο
οι μηχανικοί λογισμικού εργάζονται.

Από τους μηχανικούς λογισμικού αναμένεται να μοιράζονται μια δέσμευση
προς την ποιότητα του λογισμικού ως μέρος της κουλτούρας τους. Μια
υγιής κουλτούρα τεχνολογίας λογισμικού περιλαμβάνει πολλά χαρακτηριστικά,
συμπεριλαμβανομένης της κατανόησης ότι το αντιστάθμισμα μεταξύ κόστους,
χρονοδιαγράμματος και ποιότητας είναι βασικό στοιχείο της τεχνολογίας
οποιουδήποτε προϊόντος.
Μια βασική αρχή της τεχνολογίας λογισμικού θεωρεί πως οι μηχανικοί
αναφέρουν με ακρίβεια τις πληροφορίες, τις συνθήκες και τα αποτελέσματα
που σχετίζονται με την ποιότητα.

Η ηθική παίζει επίσης πολύ σημαντικό ρόλο στην ποιότητα του λογισμικού,
την κουλτούρα και τη στάση των μηχανικών λογισμικού. Η IEEE Computer
Society και η ACM έχουν αναπτύξει έναν κώδικα ηθικής και επαγγελματικής
πρακτικής (βλ.
παράγραφο [Κώδικας δεοντολογίας και επαγγελματικής συμπεριφοράς](#code-ethics)
στο γνωστικό πεδίο Επαγγελματικές πρακτικές της τεχνολογίας λογισμικού).

### *Αξία και κόστη ποιότητας* [1*, c2s2.2]

Ένας πολύ σημαντικός παράγοντας που οδηγεί την αντίσταση της υλοποίησης της SQA
είναι το αντιληπτό υψηλό κόστος. Όμως, και η μη υλοποίηση μιας βασικής SQA
μπορεί να είναι δαπανηρή. Οι μηχανικοί λογισμικού θα πρέπει να ενημερώνουν τη διοίκηση
για τα ρίσκα που αναλμβανούν όταν δεν εστιάζουν στην ποιότητα. Αυτό μπορεί να
γίνει εξηγώντας τις έννοιες του κόστους ποιότητας λογισμικού στη διοίκηση. Το κόστος
ποιότητας λογισμικού (CoSQ) ορίζεται ως το άθροισμα των παρακάτω δαπανών του έργου:

* Κόστος δραστηριοτήτων προγραμματισμού και κατασκευής (π.χ. προγραμματισμός, σχεδίαση,
ανάπτυξη)
* Κόστος δραστηριοτήτων πρόληψης (βελτίωση διαδικασίας, εργαλεία, εκπαίδευση)
* Κόστος δραστηριοτήτων αξιολόγησης για τον εντοπισμό ελαττωμάτων (π.χ. αξιολογήσεις, 
έλεγχοι, δοκιμές)
* Κόστος ανακατασκευής λόγω μη συμμόρφωσης (κόστος εσωτερικής και κόστος εξωτερικής αποτυχίας)

Το CoSQ μπορεί να χωριστεί σε δύο υψηλού επιπέδου κατηγορίες: *κόστος συμμόρφωσης* και
*κόστος μη συμμόρφωσης*. Το κόστος συμμόρφωσης είναι το σύνολο όλων των επενδύσεων στον
εντοπισμό σφαλμάτων και ελαττωμάτων, καθώς επίσης και των προληπτικών δραστηριοτήτων. Οι δαπάνες
αξιολόγησης προκύπτουν από δραστηριότητες του έργου που έχουν ως σκοπό τον εντοπισμό
σφαλμάτων και ελαττωμάτων. Αυτές περιλαμβάνουν τις δοκιμές (με λεπτομέρεια στο γνωστικό πεδίο
Δοκιμές Λογισμικού), αξιολογήσεις και έλεγχοι (με λεπτομέρεια στη συνέχεια αυτού του γνωστικού
πεδίου). Οι δαπάνες αξιολόγησης επεκτείνονται και στους υπεργολάβους προμηθευτές λογισμικού, 
αν αυτοί υπάρχουν. Τα κόστη πρόληψης περιλαμβάνουν επενδύσεις σε προσπάθειες βελτίωσης της 
διαδικασίας λογισμικού (SPI), υποδομές ποιότητας, εργαλεία ποιότητας, υποδείγματα
προϊόντος εργασίας, και εκπαίδευση. Αυτές οι δαπάνες δεν αναφέρονται απαραίτητα σε ένα έργο -
συνήθως αφορούν τον οργανισμό γενικότερα.

Το κόστος μη συμμόρφωσης είναι το σύνολο όλων των δαπανών αντιμετώπισης των σφαλμάτων και
ελαττωμάτων που έχουν εντοπιστεί. Το κόστος πριν από την παράδοση είναι εκείνο που προκύπτει 
για την αποκατάσταση σφαλμάτων και ελαττωμάτων που διαπιστώνονται κατά τη διάρκεια των 
δραστηριοτήτων αξιολόγησης, και ανακαλύπτονται πριν από την παράδοση του προϊόντος λογισμικού 
στον πελάτη. Το κόστος μετά την παράδοση περιλαμβάνει τα έξοδα που πραγματοποιούνται για την 
αντιμετώπιση βλαβών λογισμικού που ανακαλύπτονται μετά την παράδοση στον πελάτη. Τα εξωτερικά 
κόστη περιλαμβάνουν τη διόρθωση που απαιτείται για την επισκευή και τη δοκιμή μιας 
ανανεωμένης έκδοσης. Ωστόσο, ο οικονομικός αντίκτυπος στον πελάτη που αντιμετωπίζει μια 
αποτυχία είναι εξίσου σημαντικός. Για παράδειγμα, πρέπει να αναγνωρίζεται και να 
υπολογίζεται η χαμένη παραγωγικότητα του πελάτη, τα δεδομένα που χάθηκαν και η πιθανή ζημία
της υπόληψής του στην αγορά. Πέρα από τον αντίκτυπο στον πελάτη, το λογισμικό χαμηλής 
ποιότητας μπορεί επίσης να επηρεάσει την κοινωνία και το περιβάλλον. Οι μηχανικοί λογισμικού
θα πρέπει να αναζητούν το βέλτιστο CoSQ - το ελάχιστο συνολικό κόστος για ένα συγκεκριμένο 
επίπεδο ποιότητας.


### *Προδιαγραφές, μοντέλα και πιστοποίησεις*

Η ορθή χρήση των προδιαγραφών λογισμικού της μηχανικής λογισμικού, καθώς και η αξιολόγηση
και βελτίωση της διαδικασίας λογισμικού βελτιώνουν την ποιότητα του. Μία από τις πιο
σημαντικές προδιαγραφές μηχανικής λογισμικού είναι το πρότυπο ISO/IEC/IEEE 12207:2017, το οποίο
περιγράφει τις διεργασίες του κύκλου ζωής λογισμικού. Πρωτίστως, οι μηχανικοί λογισμικού
πρέπει να γνωρίζουν τις σημαντικότερες προδιαγραφές μηχανικής λογισμικού που εφαρμόζονται
στον κλάδο που απασχολούνται. Όπως έχει συζητηθεί από τον Iberle [19], οι πρακτικές που 
χρησιμοποιούν οι μηχανικοί λογισμικού διαφέρουν σημαντικά από κλάδο σε κλάδο, ανάλογα με το
επιχειρηματικό μοντέλο και την κουλτούρα του οργανισμού στον οποίο εργάζονται. Για παράδειγμα,
οι προδιαγραφές του προτύπου IEEE 1228:1994 για προγραμματισμό ασφάλειας λογισμικού και του προτύπου
IEEE 1633:2016 για την προτεινόμενη πρακτική αξιοπιστίας λογισμικού, στοχεύουν κλάδους στους οποίους 
η ασφάλεια και η αξιοπιστία είναι σημαντικά.

Τα πρότυπα PDCA διαφέρουν από τις προδιαγραφές, καθώς συχνά προτείνουν "βέλτιστες πρακτικές" 
για τους μηχανικούς λογισμικού από μια συγκεκριμένη σκοπιά. (Βλ. γνωστικό πεδίο διεργασίας 
μηχανικής λογισμικού για περισσότερες πληροφορίες πάνω στο πρότυπο PDCA για το λογισμικό.) 

Μοντέλα "βέλτιστων πρακτικών" άλλων κλάδων όπως οι στόχοι ελέγχου για τις τεχνολογίες
πληροφοριών και συναφών τεχνολογιών(COBIT-Control Objectives for Information and Related Technologies) 
για τη διακυβέρνηση της τεχνολογίας της πληροφορίας, ο οδηγός γνώσης διοίκησης έργων 
(PMBOK®-Project Management Body of Knowledge) για τη διαχείριση έργων, ο οδηγός γνώσης επιχειρηματικής
αναλυτικής (BABOK®-Business Analysis Body of Knowledge), η ενσωμάτωση μοντέλου ωριμότητας ικανοτήτων 
(CMMI-Capability Maturity Model Integration), και το πλαίσιο αρχιτεκτονικής του ανοικτού ομίλου 
(TOGAF-The Open Group Architecture Framework) προτείνουν πρακτικές σχετικές με το λογισμικό που
μπορούν να βελτιώσουν την ποιότητα των προϊόντων και διαδικασιών λογισμικού.

Οργανισμοί λογισμικού μπορούν επίσης να αναλογιστούν όλα τα πιθανά οφέλη από την απόκτηση
αδειών ή πιστοποιήσεων (π.χ. ISO 9001 για την ποιότητα, ISO 27001 για την ασφάλεια, ISO 
20000 για τις διεργασίες). Ακόμη, οι μηχανικοί λογισμικού μπορούν επίσης να αποκτήσουν 
πιστοποιήσεις στο πλαίσιο σκραμ και κλιμακούμενης ευελιξίας (SAFe®-Scrum and Scaled Agile 
Framework®) για ευέλικτες διεργασίες. Η χρήση των μοντέλων και των πιστοποίησεων αυτών έχουν 
δείξει πως αυξάνουν την εμπιστοσύνη των ενδιαφερόμενων μελών στο γεγονός ότι οι γνώσεις και 
οι ικανότητες των μηχανικών λογισμικού παραμένουν ενημερωμένες και έχουν διεθνή αναγνώριση.

### *Eπίπεδα αξιοπιστίας και ακεραιότητας του λογισμικού* [1*, c4s4.8.2, c7s7.3.3] [11]

Συστήματα υψηλής πολυπλοκότητας λογισμικού και σύστηματα κρίσιμα για την ασφάλεια είναι αυτά
όπου μια αποτυχία του συστήματος θα μπορούσε να βλάψει ανθρώπινες ζωές, άλλα έμβια όντα,
φυσικές δομές, και το περιβάλλον. Το λογισμικό τέτοιων συστημάτων θεωρείται κρίσιμο για 
την ασφάλεια και απαιτούν τη χρήση συστηματικών μεθόδων και εργαλείων για να διασφαλιστεί το
υψηλό ποιοτικό επίπεδο. Ένας αυξανόμενος αριθμός από κλάδους χρησιμοποιεί έναν αυξημένο
αριθμό από λογισμικό κρίσιμο για την ασφάλεια, συμπεριλαμβανομένων των συστημάτων μεταφοράς,
χημικών και πυρηνικών εργοστασίων, και ιατρικών συσκευών. Αποτυχία του λογισμικού σε τέτοια
συστήματα μπορεί να έχει καταστροφικές συνέπειες. Οι μηχανικοί ακολουθούν προδιαγραφές του
κλάδου, όπως πιστοποίηση ευαισθησίας λογισμικού σε συστήματα αερομεταφοράς και εξοπλισμού 
DO-178C [8], σιδηροδρομικές εφαρμογές EN 50128 [18], και ανερχόμενες διεργασίες, εργαλεία
και τχενικές για την ασφαλέστερη ανάπτυξη λογισμικού κρίσιμού για την ασφάλεια. Αυτές οι
προδιαγραφές, τα εργαλεία και οι τεχνικές μειώνουν τον κίνδυνο ενσωμάτωσης σφαλμάτων στο
λογισμικό και συνεπώς βελτιώνουν τη διαθεσιμότητα, αξιοπιστία και συντηρησιμότητα του
λογισμικού. Οι μηχανικοί λογισμικού και οι προϊστάμενοί τους πρέπει να αντιληφθούν τους
κινδύνους και τα ζητήματα που μπορεί να προκύψουν, και οφείλουν να αναπτύξουν τις απαραίτητες
δεξιότητες για να προβλέψουν και να αποτρέψουν τυχών ατυχήματα πριν αυτά συμβούν [15].

Το λογισμικό κρίσιμο για την ασφάλεια μπορεί να καταταχθεί σε δύο κατηγορίες: *άμεσο* και
*έμμεσο*. Το άμεσο λογισμικό ενσωματώνεται σε ένα σύστημα κρίσιμο για την ασφάλεια, όπως
ο υπολογιστής ελέγχου πτήσης ενός αεροσκάφους. Το έμμεσο λογισμικό περιλαμβάνει εφαρμογές
λογισμικού που χρησιμοποιούνται για την ανάπτυξη λογισμικού κρίσιμου για την ασφάλεια. Το
έμμεσο λογισμικό συμπεριλαμβάνεται σε περιβάλλοντα μηχανικής λογισμικού και δοκιμών λογισμικού.

Τρεις συμπληρωματικές τεχνικές για τη μείωση κινδύνου αποτυχιών είναι η αποφυγή, η ανίχνευση
και αφαίρεση, και ο περιορισμός της ζημιάς. Αυτές οι τεχνικές επηρεάζουν τις λειτουργικές 
απαιτήσεις, τις απαιτήσεις απόδοσης και τις διαδικασίες ανάπτυξης. Αύξηση του κινδύνου 
συνεπάγεται αυξημένη SQA και πιο σχολαστικές τεχνικές αξιολόγησης όπως επιθεωρήσεις [16].
Υψηλότερα επίπεδα κινδύνου επιβάλλουν πιο ενδελεχείς επιθεωρήσεις των απαιτήσεων, της
σχεδίασης, και του κώδικα, ή τη χρήση αυστηρότερων τεχνικών επαλήθευσης. Μια άλλη τεχνική
για τη διαχείριση και τον έλεγχο του κινδύνου λογισμικού είναι η δημιουργία περιπτώσεων
εγγύησης. Η *περίπτωση εγγύησης* είναι ένα εμπεριστατωμένο, ελεγχόμενο τεχνούργημα που 
δημιουργήθηκε για να υποστηρίξει τον ισχυρισμό πως οι απαιτήσεις ικανοποιούνται. Περιλαμβάνει
τις ακόλουθες σχέσεις: μία ή περισσότερες απαιτήσεις σχετικά με την ιδιοκτησία, επιχειρήματα
που συνδέουν λογικά τις αποδείξεις και όποιες υποθέσεις των ισχυρισμών, και τις αποδείξεις
και τις υποθέσεις που υποστηρίζουν αυτά τα επιχειρήματα [9].

#### *Αξιοπιστία* [7, c10]

Σε περιπτώσεις όπου η αποτυχία του συστήματος μπορεί να έχει σοβαρές επιπτώσεις, η συνολική 
αξιοπιστία (π.χ. αξιοπιστία υλικού, λογισμικού, ανθρώπου ή λειτουργιών) είναι η κύρια 
απάιτηση ποιότητας, πέραν της βασικής λειτουργικότητας του λογισμικού, για τους ακόλουθους
λόγους: Οι αποτυχίες συστήματος επηρεάζουν πολλούς ανθρώπους - οι χρήστες συνήθως απορρίπτουν
τα συστήματα που είναι αναξιόπιστα και επικίνδυνα - οι δαπάνες από μία αποτυχία του συστήματος
ενδέχονται να είναι τεράστιες - και τα αναξιόπιστα συστήματα μπορεί να οδηγήσουν σε απώλεια
πληροφοριών. Πολλές προδιαγραφές αντιμετωπίζουν διαφορετικές όψεις της αξιοπιστίας, όπως
η εμπιστοσύνη και η διαθεσιμότητα. Η αξιοπιστία συστήματος και λογισμικού ανασυντάσσουν 
διάφορα ποιοτικά χαρακτηριστικά: διαθεσιμότητα, εμπιστοσύνη, συντηρησιμότητα και 
υποστηριξιμότητα, εκτίμηση κινδύνου, και ασφάλεια. Στην ανάπτυξη αξιόπιστου λογισμικού,
οι μηχανικοί πρέπει να εφαρμόζουν τεχνικές και εργαλεία, για τη μείωση του κινδύνου ενσωμάτωσης
σφαλμάτων σε ενδιάμεσα παραδοτέα ή στο τελικό προϊόν λογισμικού. Μπορούν να χρησιμοποιήσουν
στατικές, δυναμικές, ή αυστηρές μεθόδους για επιβεβαίωση και επικύρωση (V&V), και διεργασίες
δοκιμών, καθώς επίσης και άλλες εξειδικευμένες τεχνικές, μεθόδους, και εργαλεία για τον
εντοπισμό ελαττωμάτων που επηρεάζουν την αξιοπιστία, όσο το δυνατόν νωρίτερα στον κύκλο
ζωής του λογισμικού [7*, c10.5]. Επιπρόσθετα, ενδέχεται να χρειαστεί η ενσωμάτωση 
συγκεκριμένων μηχανισμών εντός του λογισμικού για την προστασία από εξωτερικές επιθέσεις 
και την ανοχή σφαλμάτων κατά τη λειτουργία.

#### *Επίπεδα Ακεραιότητας του Λογισμικού* [1*, c4s4.8.2, c7s7.3.3] [11]

Ο καθορισμός επιπέδων ακεραιότητας είναι μια μέθοδος διαχείρισης κινδύνου. Ένα *επίπεδο 
ακεραιότητας* είναι "μια τιμή που αναπαριστά μοναδικά χαρακτηριστικά του έργου (π.χ.
πολυπλοκότητα, κρισιμότητα, κίνδυνος, επίπεδο ασφάλειας, επιθυμητή απόδοση, και αξιοπιστία) 
που καθορίζουν τη σημαντικότητα του συστήματος, του λογισμικού, ή του υλικού του χρήστη" [11].
Τα χαρακτηριστικά που καθορίζουν το επίπεδο ακεραιότητας του λογισμικού διαφέρουν ανάλογα με 
την επιθυμητή εφαρμογή και χρήση του συστήματος. Το λογισμικό είναι μέρος του συστήματος,
και το επίπεδο ακεραιότητάς του καθορίζεται ως μέλος αυτού.

Τα επίπεδα ακεραιότητας λογισμικού που έχουν ανατεθεί μπορεί να αλλάξουν όσο εξελλίσεται
το λογισμικό. Τα χαρακτηριστικά της σχεδίασης, του κώδικα, της διαδικασίας και της τεχνολογίας
που εφαρμόζονται στο σύστημα ή το λογισμικό μπορούν να ανεβάσουν ή να μειώσουν τα επίπεδα 
ακεραιότητας που έχουν ανατεθεί. Τα καθορισμένα επίπεδα ακεραιότητας λογισμικού για ένα έργο
προκύπτουν από τις συμφωνίες ανάμεσα στον αγοραστή, τον προμηθευτή, τον προγραμματιστή, και
από ανεξάρτητες αρχές διασφάλισης [11].

Οι μηχανικοί λογισμικού θα πρέπει να γνωρίζουν ότι σε ορισμένους κρίσιμους για την ασφάλεια 
κλάδους, όπως η αεροναυπηγική, οι σιδηρόδρομοι, η πυρηνική ενέργεια, οι ιατρικές συσκευές και 
πολλοί άλλοι, οι ειδικές για τον κλάδο οδηγίες μπορούν να απαιτούν ένα ορισμένο επίπεδο 
ανεξαρτησίας για τις δραστηριότητες ποιότητας του λογισμικού και να ορίζουν τις κατ'ελάχιστες 
τεχνικές V&V που πρέπει να χρησιμοποιούνται ανά επίπεδο ακεραιότητας (παράδειγμα τέτοιων 
τεχνικών είναι: ανάλυση ευχρηστίας, ανάλυση αλγορίθμων, ανάλυση οριακών τιμών, ανάλυση ροής 
δεδομένων, επανεξέταση με περίπατο [11][26]).

## Διεργασίες διαχείρισης ποιότητας λογισμικού


"Η διαχείριση της ποιότητας λογισμικού (SQM) ασχολείται με τον συντονισμό 
των δραστηριοτήτων που κατευθύνουν και ελέγχουν έναν οργανισμό όσον αφορά
την ποιότητα λογισμικού" [6]. Ο σκοπός της διεργασίας διαχείρισης ποιότητας 
είναι να διαβεβαιώσει ότι τα προϊόντα, οι υπηρεσίες, και οι υλοποιήσεις 
της διεργασίας διαχείρισης ποιότητας πληρούν τους στόχους του οργανισμού και 
ποιότητας έργου, και επιτυγχάνουν τη ικανοποίηση των πελατών.

Οι μηχανικοί λογισμικού μπορούν να μάθουν για τη διεργασία διαχείρισης ποιότητας
λογισμικού σε πολλά πρότυπα, μοντέλα, και πιστοποιήσεις που είναι διαθέσιμα και 
χρησιμοποιούνται ευρέως στον κλάδο.

Μια σημαντική έννοια της διαχείρισης ποιότητας λογισμικού είναι ο σχεδιασμός
και η συντήρηση ενός Συστήματος Διαχείρισης Ποιότητας (QMS). Όπως προτείνεται 
από το πρότυπο ISO 9001, ένα σύστημα διαχείρισης ποιότητας ορίζει τις διεργασίες, 
τους ιδιοκτήτες των διεργασιών, τις απαιτήσεις των διεργασιών, μετρήσεις για 
τις διεργασίες και τις εκροές τους, και κανάλια ανατροφοδότησης σε όλοκληρο 
τον κύκλο ζωής λογισμικού. Ένα σύστημα διαχείρισης ποιότητας αποτελείται από 
πολλές βασικές δραστηριότητες: Διασφάλιση Ποιότητας Λογισμικού (SQA), 
Επαλήθευση και Επικύρωση (V&V), αξιολογήσεις και έλεγχοι, διαχείριση παραμετροποίησης 
λογισμικού (SCM), και απαιτεί πολιτικές, διαδικασίες, και διεργασίες για να 
εξασφαλίσει ότι όλοι οι εμπλεκόμενοι καταλαβαίνουν τι αναμένεται σε όρους 
διεργασίας λογισμικού και ποιότητας προϊόντος. Για να είναι ένα σύστημα διαχείρισης 
ποιότητας αποτελεσματικό, η στήριξη από τη διοίκηση είναι επιτακτική ανάγκη. 
Η στήριξη της διοίκησης υπονοεί ότι τα έργα εκπαιδεύονται στην απαίτηση του 
συστήματος διαχείρισης ποιότητας και έχουν αρκετούς πόρους για να επιτύχουν το 
στόχο ποιότητας που έχει καθοριστεί για το έργο αυτό. Η χορηγία της διοίκησης 
θα πρέπει να ζητείται συχνά κατά τη διάρκεια αξιολόγησης έργων λογισμικού για 
να διασφαλιστεί ότι οι δραστηριότητες ποιότητας λογισμικού εκτελούνται και 
οι μη συμμορφώσεις αντιμετωπίζονται. 

Για ένα έργο λογισμικού, οι διεργασίες ποιότητας λογισμικού αποτελούνται από 
καθήκοντα και τεχνικές που υποδεικνύουν πως τα σχέδια λογισμικού (για παράδειγμα, 
σχέδια διαχείρισης λογισμικού, ανάπτυξης, διοίκησης ποιότητας ή διαχείρισης
παραμετροποίησης) υλοποιούνται και πόσο καλά τα ενδιάμεσα και τα τελικά προϊόντα 
πληρούν τις καθορισμένες απαιτήσεις. Αποτελέσματα από τα καθήκοντα αυτά συγκεντρώνονται 
σε αναφορές για τη διοίκηση. Η διοίκηση της διεργασίας διαχείρισης ποιότητας λογισμικού 
έχει το καθήκον να διασφαλίσει πως τα αποτελέσματα των αναφορών είναι ακριβή 
και διενεργούνται.

Η διαχείριση κινδύνου μπορεί επίσης να έχει σημαντικό ρόλο στην παράδοση 
ποιοτικού λογισμικού. Η ενσωμάτωση πειθαρχημένης ανάλυσης κινδύνου και 
τεχνικών διοίκησης στις διεργασίες κύκλου ζωής λογισμικού μπορούν να 
βελτιώσουν την ποιότητα προϊόντος. (Βλέπε το γνωστικό πεδίο Διαχείρισης 
Μηχανικής Λογισμικού για περισσότερο σχετικό υλικό στη διαχείριση κινδύνου.)


### *Βελτίωση ποιότητας λογισμικού* [1*, s9.9 and c9] [2] [3]

Η Βελτίωση Ποιότητας Λογισμικού (SQI) πραγματοποιείται χρησιμοποιώντας 
πολλές διαφορετικές προσεγγίσεις μέσα στον κλάδο του λογισμικού, συμπεριλαμβανομένων 
της βελτίωσης διεργασίας λογισμικού (SPI), των Έξι Σίγμα, Lean, και Kaizen
για να αναφέρουμε μερικές. Για παράδειγμα, οι δραστηριότητες βελτίωσης διεργασίας 
λογισμικού επιδιώκουν να βελτιώσουν την αποτελεσματικότητα, την αποδοτικότητα, 
και άλλα χαρακτηριστικά διεργασιών για τη βελτίωση της ποιότητας του λογισμικού.
Για παράδειγμα, παρόλο που η βελτίωση διεργασίας λογισμικού μπορεί να συμπεριληφθεί 
σε οποιαδήποτε από τις τρεις πρώτες κατηγορίες, πολλοί οργανισμοί οργανώνουν τη 
βελτίωση διεργασίας λογισμικού σε μια ξεχωριστή κατηγορία που μπορεί να εκτείνεται 
σε πολλά έργα.

Η ποιότητα των προϊόντων λογισμικού μπορεί να βελτιωθεί μέσα από αρχές 
Lean ή μέσω μιας επαναληπτικής διεργασίας συνεχούς βελτίωσης,
η οποία απαιτεί έλεγχο διαχείρισης, συντονισμό και ανατροφοδότηση
από πολλές ταυτόχρονες διεργασίες: (1) τις διεργασίες του κύκλου ζωής
του λογισμικού, (2) τη διεργασία εντοπισμού, αφαίρεσης και πρόληψης
σφαλμάτων, (3) τη διεργασία βελτίωσης ποιότητας. 

Η θεωρία και οι έννοιες που κρύβονται πίσω από τη βελτίωση ποιότητας,
όπως η δόμηση του λογισμικού με ποιότητα μέσω της πρόληψης και του
έγκαιρου εντοπισμού σφαλμάτων, της συνεχούς βελτίωσης και της επικέντρωσης
στα ενδιαφερόμενα μέρη, σχετίζονται με την τεχνολογία λογισμικού.
Αυτές οι έννοιες βασίζονται στη εργασία των ειδικών ποιότητας που
έχουν δηλώσει ότι η ποιότητα ενός προϊόντος συνδέεται άμεσα με την
ποιότητα της διεργασίας που χρησιμοποιήθηκε για να δημιουργηθεί. Προσεγγίσεις
όπως ο κύκλος βελτίωσης ονόματι Σχεδιασμός-Εκτέλεση-Έλεγχος-Δράση(Plan-Do-Check-Act)
(PDCA), η εξελικτική παράδοση, το μοντέλο Kaizen και η Εξάπλωση της
Λειτουργίας Ποιότητας (Quality Function Deployment — QFD) προσφέρουν
τεχνικές για τον καθορισμό των στόχων ποιότητας και τον προσδιορισμό
της επίτευξης τους.

Τελικά, από τη στιγμή που η μηχανική λογισμικού είναι μια περίπλοκη 
διαδικασία, δεν μπορεί να περιοριστεί σε ένα εγχειρίδιο διεργασιών. 
Για να συμπληρωθεί το κίνημα βελτίωσης διεργασιών και εργαλειών ο 
Humphrey πρότεινε την προσωπική διεργασία λογισμικού (PSP) για τους 
μηχανικούς λογισμικού, προκειμένου επίσης να αξιολογούν διαρκώς τις 
ικανότητες και τις γνώσεις τους, και να τις βελτιώνουν συνεχώς.

### *Διαχείριση σχεδίου ποιότητας*

Ο σχεδιασμός ποιότητας λογισμικού περιλαμβάνει τον καθορισμό των προτύπων 
και των μοντέλων ποιότητας που θα χρησιμοποιηθούν, τον ορισμό των συγκεκριμένων 
στόχων ποιότητας, την εκτίμηση για την απαραίτητη προσπάθεια επίτευξης κάθε στόχου, 
και την απόφαση του οροσήμου στο οποίο θα λάβει χώρα η δραστηριότητα ποιότητας 
λογισμικού. Σε μερικές περιπτώσεις, ο σχεδιασμός ποιότητας λογισμικού περιλαμβάνει 
επίσης και τον ορισμό των διεργασιών ποιότητας λογισμικού που θα χρησιμοποιηθούν.

Αρχικά, η οργάνωση λογισμικού πρέπει να δεσμευτεί στην ποιότητα με την καθιέρωση 
του δικού της Συστήματος Διαχείρισης Ποιότητας (Quality Management System — QMS) 
το οποίο περιλαμβάνει πολιτικές διαχείρισης ποιότητας, στόχους, και διεργασίες. 
Αυτό απαιτεί την ανάθεση της ευθύνης και της αρμοδιότητας για την εφαρμογή του 
συστήματος διαχείρισης ποιότητας και την ανεξαρτησία τους από τις τρέχουσες ομάδες 
διαχείρισης έργων.

Μια εγκεκριμένη οργανωσιακή πολιτική, σχετική με την ποιότητα του λογισμικού, βοηθά στην 
καθοδήγηση των αποφάσεων για την ανάπτυξη έργων και προϊόντων, καθώς και στη συμπεριφορά 
του προσωπικού. Οι μηχανικοί λογισμικού θα πρέπει να προωθούν τη χρήση γραφικά 
αναπαρισταμένων διεργασιών και διαδικασιών που εφαρμόζουν την πολιτική ποιότητας και 
εξηγούν τους ρόλους, τις δραστηριότητες που πρέπει να εκτελεστούν και τα αναμενόμενα 
αποτελέσματα των βασικών δραστηριοτήτων μηχανικής λογισμικού. Κατά συνέπεια, για να 
χρησιμοποιηθεί ένα σύστημα διαχείρισης ποιότητας στη βελτίωση, οι διαδικασίες του θα 
πρέπει να  τεκμηριώνονται με γνώμονα τον χρήστη του και να προσδιορίζουν τα σημεία όπου 
θα επαληθεύονται οι έλεγχοι ποιότητας. Τέλος, οι διαδικασίες εξηγούν λεπτομερώς τα 
βήματα που γίνονται για την εκτέλεση μιας συγκεκριμένης δραστηριότητας.

### *Μέτρηση διαχείρισης ποιότητας*

Αφού τεθεί σε εφαρμογή το σύστημα διαχείρισης ποιότητας, το πρότυπο ISO/IEC Technical 
Specification TS 33061:2021 [22] ορίζει ένα μοντέλο αξιολόγησης διαδικασιών για τις 
διαδικασίες του κύκλου ζωής του λογισμικού, χρησιμοποιώντας πέντε επίπεδα ικανοτήτων 
διαδικασίας (από το επίπεδο 0: ελλιπής έως το επίπεδο 5: βελτιστοποίηση της διαδικασίας). 
Επιπλέον, οι μηχανικοί λογισμικού μπορούν να αξιολογήσουν την ωριμότητα των δραστηριοτήτων 
του συστήματος διαχείρισης ποιότητας στα έργα λογισμικού τους χρησιμοποιώντας την 
καθοδήγηση του προτύπου IEEE 730:2014 [6]. Η χορηγία της διοίκησης υποστηρίζει τις 
αξιολογήσεις των διεργασιών και των προϊόντων, και τα ευρήματα που προκύπτουν τροφοδοτούν 
ένα πρόγραμμα βελτίωσης που αναπτύσσεται και προσδιορίζει λεπτομερείς δράσεις και έργα 
βελτίωσης που πρέπει να αντιμετωπιστούν σε ένα εφικτό χρονικό πλαίσιο. Σε τακτά χρονικά 
διαστήματα, οι μηχανικοί λογισμικού συγκεντρώνουν και αναλύουν τα αποτελέσματα της 
αξιολόγησης της διασφάλισης ποιότητας. Αυτό μπορεί να επιτευχθεί με την εξέταση των 
μέτρων ποιότητας και του χαρακτηρισμού ελαττωμάτων που παράγονται από τα έργα.

#### *Μέτρηση ποιότητας λογισμικού* [1*, c10] [7, c24s24.5]

Οι μετρήσεις της ποιότητας λογισμικού χρησιμοποιούνται για να υποστηρίξουν
τη λήψη αποφάσεων. Με την αυξανόμενη πολυπλοκότητα του λογισμικού, τα ζητήματα 
ποιότητας πάνε πέρα από το εάν δουλεύει το λογισμικό στο πόσο καλά επιτυγχάνει
μετρήσιμους ποιοτικούς στόχους. Η ποσοτικοποίηση κάποιου χαρακτηριστικού του λογισμικού 
μπορεί να βοηθήσει τους μηχανικούς να αξιολογήσουν την ποιότητά του ή την ποιότητα 
της διεργασίας. (Η μέτρηση της διεργασίας περιγράφεται λεπτομερώς στο γνωστικό 
πεδίο Διεργασίες).

Οι αποφάσεις που υποστηρίζονται από μέτρηση ποιότητας λογισμικού περιλαμβάνουν
τον προσδιορισμό των επιπέδων ποιότητας του λογισμικού, κυρίως επειδή
τα μοντέλα προϊόντων λογισμικού περιλαμβάνουν μετρήσεις για να προσδιορίσουν
το βαθμό στον οποίο το προϊόν λογισμικού επιτυγχάνει ποιοτικούς στόχους.
Επίσης, περιλαμβάνουν ζητήματα διοίκησης σχετικά με την προσπάθεια,
το κόστος και τον χρονοπρογραμματισμό, καθώς και τον προσδιορισμό του πότε
να σταματήσει ο έλεγχος και να κυκλοφορήσει ένα προϊόν (βλ. Μετρήσεις 
Σχετικές με τον Έλεγχο, στο γνωστικό πεδίο Έλεγχος λογισμικού).
Τέλος, περιλαμβάνουν τον προσδιορισμό της αποτελεσματικότητας των
προσπαθειών βελτίωσης των διεργασιών.

Το κόστος ποιότητας λογισμικού (CoSQ) είναι ένα θέμα που τίθεται συχνά στην
επιλογή του τρόπου με τον οποίο μια ομάδα ανάπτυξης ή συντήρησης θα
πρέπει να είναι οργανωμένη. Συχνά, χρησιμοποιούνται μοντέλα κόστους
γενικής χρήσης, τα οποία βασίζονται στο πότε ένα σφάλμα εντοπίζεται
και πόση προσπάθεια απαιτείται για την επιδιόρθωση του σφάλματος σε
σχέση με την προσπάθεια που απαιτείται για τον εντοπισμό του σφάλματος
νωρίτερα στη διεργασία της ανάπτυξης.
Τα δεδομένα που συλλέγονται εσωτερικά από τη μέτρηση της ποιότητας
λογισμικού μπορεί να δώσουν μια καλύτερη εικόνα του κόστους μέσα στο
έργο ή τον οργανισμό.

Καθώς τα δεδομένα μέτρησης της ποιότητας λογισμικού μπορεί να είναι
χρήσιμα για το ίδιο, όπως ο αριθμός των ελαττωματικών απαιτήσεων ή
το ποσοστό των ελαττωματικών απαιτήσεων, μαθηματικές και γραφικές
τεχνικές μπορούν να εφαρμοσθούν για να συμβάλλουν στην ερμηνεία των
μετρικών (βλ. το γνωστικό πεδίο Μαθηματικά Θεμέλια Μηχανικής/Engineering 
Mathematical Foundations).
Αυτές οι τεχνικές περιλαμβάνουν:

  * περιγραφικά στατιστικά στοιχεία, όπως είναι η ανάλυση κατά Παρέτο,
  τα διαγράμματα κίνησης, τα διαγράμματα διασποράς, η κανονική κατανομή,
  * στατιστικούς ελέγχους, όπως είναι ο διωνυμικός έλεγχος,  ο έλεγχος
  του «Χ εις το τετράγωνο»,
  * ανάλυση τάσεων, όπως είναι τα διαγράμματα ελέγχου, βλ. *Εργαλειοθήκη Ποιότητας*
  στην περαιτέρω ανάγνωση, και
  * πρόβλεψη, όπως είναι τα μοντέλα αξιοπιστίας.

Οι περιγραφικές τεχνικές και οι έλεγχοι που βασίζονται σε στατιστικά
στοιχεία συχνά παρέχουν ένα στιγμιότυπο από τις πιο προβληματικές
περιοχές του υπό εξέταση προϊόντος λογισμικού. Τα διαγράμματα και
οι γραφικές παραστάσεις που προκύπτουν είναι οπτικοποιημένα βοηθήματα,
τα οποία οι υπεύθυνοι λήψης αποφάσεων μπορούν να χρησιμοποιήσουν για
να συγκεντρώσουν τους πόρους και να διεξάγουν βελτιώσεις διεργασιών,
όπου αυτές είναι πιο αναγκαίες. Τα αποτελέσματα από την ανάλυση των
τάσεων μπορεί να υποδείξουν ότι πληρείται ένα χρονοδιάγραμμα, όπως
στον έλεγχο, ή ότι για συγκεκριμένες κατηγορίες λαθών μπορεί να γίνει
πιο πιθανό να συμβούν εκτός κι αν κάποια διορθωτική ενέργεια λάβει
χώρα στην ανάπτυξη. Οι τεχνικές πρόβλεψης συμβάλλουν στην εκτίμηση
της προσπάθειας και του χρονοδιαγράμματος και στην πρόβλεψη αποτυχιών.
Περισσότερη συζήτηση γύρω από τη μέτρηση γενικά εμφανίζεται στο γνωστικό
πεδίο Διεργασίες τεχνολογίας λογισμικού και της Διοίκησης τεχνολογίας
λογισμικού.
Πιο συγκεκριμένες πληροφορίες στη μέτρηση ελέγχου παρουσιάζεται στο
γνωστικό πεδίο Έλεγχος λογισμικού.

Η μέτρηση της ποιότητας λογισμικού περιλαμβάνει τις μετρήσεις περιστατικών
σφαλμάτων και την εφαρμογή στατιστικών μεθόδων με σκοπό την κατανόηση
των τύπων των σφαλμάτων που συμβαίνουν πιο συχνά. Τρεις ευρέως χρησιμοποιούμενες 
μετρήσεις ποιότητας λογισμικού είναι η πυκνότητα σφαλμάτων (αριθμός σφαλμάτων ανά 
μονάδα μεγέθους εγγράφων/λογισμικού), η πυκνότητα ελαττωμάτων (αριθμός ελαττωμάτων 
που βρέθηκαν διαιρεμένος με το μέγεθος του λογισμικού) και ο ρυθμός αποτυχίας 
(μέσος χρόνος μέχρι την αποτυχία). Τα μοντέλα αξιοπιστίας κατασκευάζονται από δεδομένα 
αποτυχίας που συλλέγονται κατά τη διάρκεια δοκιμών λογισμικού ή από λογισμικό σε 
λειτουργία και, συνεπώς, μπορούν να χρησιμοποιηθούν για την εκτίμηση της πιθανότητας 
μελλοντικών αποτυχιών και να βοηθήσουν στη λήψη αποφάσεων σχετικά με το πότε πρέπει 
να σταματήσει ο έλεγχος.

Οι πληροφορίες μπορεί να χρησιμοποιηθούν από τη βελτίωση των διεργασιών του λογισμικού 
για τον προσδιορισμό μεθόδων πρόληψης, μείωσης ή εξάλειψης από την επανεμφάνισή
τους. Συμβάλλουν, επίσης, στην κατανόηση των τάσεων, του πόσο καλά
λειτουργούν οι τεχνικές ανίχνευσης και περιορισμού και πόσο καλά οι
διεργασίες ανάπτυξης και συντήρησης προχωρούν. Από αυτές τις μεθόδους
μέτρησης, μπορούν να αναπτυχθούν προφίλ σφαλμάτων για ένα συγκεκριμένο
κλάδο εφαρμογών. Συνεπώς, για το επόμενο έργο λογισμικού μέσα στον
οργανισμό, τα προφίλ μπορούν να χρησιμοποιηθούν για την καθοδήγηση
των διεργασιών διαχείρισης ποιότητας λογισμικού, δηλαδή να αναλώσουν την 
περισσότερη προσπάθεια εκεί όπου τα προβλήματα είναι πιο πιθανό να συμβούν. 
Ομοίως, πρότυπα συγκριτικής αξιολόγησης ή ελαττώματα τυπικά για εκείνο τον κλάδο,
μπορούν να συμβάλλουν στον προσδιορισμό του πότε το προϊόν είναι έτοιμο
προς παράδοση. (Συζήτηση για τη χρήση δεδομένων μέτρησης για τη βελτίωση των διεργασιών
ανάπτυξης και συντήρησης εμφανίζεται στα γνωστικά πεδία Διοίκησης
τεχνολογίας λογισμικού και Διεργασίες τεχνολογίας λογισμικού.)


### *Εκτέλεση διορθωτικών και προληπτικών ενεργειών*

Είναι σημαντικό, όταν οι στόχοι της διαχείρισης ποιότητας δεν επιτυγχάνονται, 
να τεκμηριώνονται και να υποβάλλονται διορθωτικές ενέργειες, προκειμένου να βελτιωθεί 
το σύστημα διαχείρισης ποιότητας και να αποτραπεί η επανεμφάνιση του προβλήματος 
σε μελλοντικά έργα λογισμικού. Αυτό απαιτεί οι συμμετέχοντες στο έργο να έχουν 
έναν τρόπο αναφοράς των προβλημάτων της διαδικασίας και των εργαλείων μηχανικής
λογισμικού σε έναν ανεξάρτητο οργανισμό που θα τεκμηριώνει και θα παρακολουθεί 
την πρόοδο των διορθωτικών ενεργειών και θα ενημερώνει τα αρμόδια ενδιαφερόμενα μέρη.

#### *Χαρακτηρισμός ελαττωμάτων* [1*, c1s3]

Για να βοηθήσουν στην εξάλειψη της αιτίας ή των αιτιών μιας υπάρχουσας μη συμμόρφωσης 
ή μιας ανεπιθύμητης κατάστασης για την αποφυγή επανάληψης, οι μηχανικοί λογισμικού 
μπορούν να χρησιμοποιήσουν τεχνικές ελέγχου ποιότητας λογισμικού (SQC) για να βρουν 
σφάλματα, ελαττώματα και αποτυχίες στις διαδικασίες και τα προϊόντα τους. Κατά τον 
εντοπισμό σφαλμάτων, ελαττωμάτων και αποτυχιών, ο μηχανικός λογισμικού ενδιαφέρεται 
για τον αριθμό και τους τύπους των προβλημάτων. Οι αριθμοί από μόνοι τους, χωρίς 
κατηγοριοποίηση, ενδέχεται να μην επαρκούν για να βοηθήσουν στον εντοπισμό των υποκείμενων 
αιτιών και, συνεπώς, στην αποτροπή τους στο μέλλον. Ως εκ τούτου, οι μηχανικοί 
λογισμικού θα πρέπει να καθιερώσουν μια ουσιαστική ταξινόμηση ελαττωμάτων για να 
περιγράψουν και να κατηγοριοποιήσουν τέτοιες ανωμαλίες. Μια πιθανή ενέργεια που 
προκύπτει από τις αξιολογήσεις ομοτίμων(peer reviews) και τα ευρήματα ελέγχου είναι η 
έγκαιρη αφαίρεση αυτών των σφαλμάτων και ατελειών από το υπό εξέταση προϊόν εργασίας.

Άλλες δραστηριότητες διαχείρισης ποιότητας λογισμικού προσπαθούν να εξαλείψουν 
τις αιτίες τους (π.χ. ανάλυση αιτιών (RCA)). Οι δραστηριότητες ανάλυσης αιτιών 
περιλαμβάνουν την ανάλυση και τη σύνοψη των ευρημάτων για την εξεύρεση των 
βαθύτερων αιτιών και τη χρήση τεχνικών μέτρησης για τη βελτίωση των διαδικασιών, 
τεχνικών και εργαλείων μηχανικής λογισμικού. (Η βελτίωση των διαδικασιών συζητείται 
κυρίως στο γνωστικό πεδίο Διαδικασία μηχανικής λογισμικού. Η ανάλυση αιτιών 
συζητείται περαιτέρω στο γνωστικό πεδίο Θεμέλια μαθηματικής μηχανικής).

Τα δεδομένα των σφαλμάτων και των ατελειών που εντοπίζονται κατά τη 
διάρκεια της διασφάλισης ποιότητας λογισμικού και των τεχνικών ελέγχου μπορεί 
να χαθούν εάν δεν καταγραφούν. Για ορισμένες τεχνικές (π.χ. αξιολογήσεις ομοτίμων 
και επιθεωρήσεις), οι μηχανικοί λογισμικού είναι παρόντες για να καταγράφουν 
τα δεδομένα αυτά και να αντιμετωπίζουν τα ζητήματα και να λαμβάνουν αποφάσεις. 
Επιπλέον, όταν χρησιμοποιούνται αυτοματοποιημένα εργαλεία (βλ. Θέμα 4, Εργαλεία 
ποιότητας λογισμικού), η εκροή του εργαλείου μπορεί να παρέχει αναφορές για τις 
τάσεις των ελαττωμάτων που μπορούν να παρέχονται στη διοίκηση του οργανισμού.

## Διαδικασία διασφάλισης ποιότητας λογισμικού

### *Προετοιμασία διασφάλισης ποιότητας* [1*, c1s1.5] [6]

Η *διασφάλιση ποιότητας λογισμικού* (SQA) ορίζεται ως "ένα σύνολο δραστηριοτήτων που 
καθορίζουν και αξιολογούν την επάρκεια των διαδικασιών λογισμικού για την παροχή 
αποδεικτικών στοιχείων που δημιουργούν εμπιστοσύνη ότι οι διαδικασίες λογισμικού 
είναι κατάλληλες και παράγουν προϊόντα λογισμικού κατάλληλης ποιότητας για τους 
προβλεπόμενους σκοπούς τους". Για να λυθεί μια κοινή παρανόηση, η διασφάλιση ποιότητας 
λογισμικού δεν είναι μόνο η δοκιμή ενός λογισμικού. Ένα βασικό χαρακτηριστικό της 
διασφάλισης ποιότητας λογισμικού, σε κρίσιμα συστήματα, είναι η αντικειμενικότητα της 
λειτουργίας διασφάλισης ποιότητας λογισμικού όσον αφορά την ποιότητα ενός προϊόντος 
λογισμικού. Στην περίπτωση αυτή, η λειτουργία διασφάλισης ποιότητας λογισμικού μπορεί 
επίσης να είναι οργανωτικά ανεξάρτητη από το έργο, δηλαδή απαλλαγμένη από τεχνικές, 
διοικητικές και οικονομικές πιέσεις [6]. Η διασφάλιση ποιότητας λογισμικού 
έχει δύο πτυχές: τη διασφάλιση του προϊόντος και τη διασφάλιση της διαδικασίας, οι 
οποίες εξηγούνται στην ενότητα Μέτρηση διαχείρισης ποιότητας.

Το σχέδιο ποιότητας λογισμικού (σε ορισμένους βιομηχανικούς κλάδους ονομάζεται σχέδιο 
διασφάλισης ποιότητας λογισμικού (SQAP)) καθορίζει τις δραστηριότητες και τα καθήκοντα 
που χρησιμοποιούνται για να διασφαλιστεί ότι το λογισμικό που αναπτύσσεται για ένα 
συγκεκριμένο προϊόν ικανοποιεί τις καθορισμένες απαιτήσεις και τις ανάγκες των χρηστών 
του έργου εντός των περιορισμών κόστους και χρονοδιαγράμματος του έργου και είναι ανάλογο 
με τους κινδύνους του έργου. Το σχέδιο διασφάλισης ποιότητας λογισμικού διασφαλίζει 
πρώτα ότι οι στόχοι ποιότητας είναι σαφώς καθορισμένοι και κατανοητοί.

Οι δραστηριότητες και τα καθήκοντα ποιότητας του σχεδίου διασφάλισης ποιότητας 
λογισμικού προσδιορίζονται, μαζί με το κόστος, τις απαιτήσεις πόρων, τους 
στόχους και το χρονοδιάγραμμα σε σχέση με τους σχετικούς στόχους, στα σχέδια διαχείρισης 
μηχανικής λογισμικού, ανάπτυξης λογισμικού και συντήρησης λογισμικού. Το σχέδιο 
διασφάλισης ποιότητας λογισμικού προσδιορίζει τα έγγραφα, τα πρότυπα, τις πρακτικές 
και τις συμβάσεις που διέπουν το έργο και τον τρόπο με τον οποίο τα στοιχεία αυτά 
ελέγχονται και παρακολουθούνται για να διασφαλίζεται η επάρκεια και η συμμόρφωση. 
Το σχέδιο διασφάλισης ποιότητας λογισμικού προσδιορίζει επίσης μέτρα, στατιστικές 
τεχνικές, διαδικασίες για την αναφορά προβλημάτων και τη λήψη διορθωτικών μέτρων, 
πόρους όπως εργαλεία, τεχνικές και μεθοδολογίες, ασφάλεια φυσικών μέσων, εκπαίδευση, 
και αναφορά και τεκμηρίωση διασφάλισης ποιότητας λογισμικού. Επιπλέον, το 
σχέδιο διασφάλισης ποιότητας λογισμικού εξετάζει τις δραστηριότητες διασφάλισης ποιότητας 
λογισμικού οποιουδήποτε άλλου τύπου δραστηριότητας που περιγράφεται στα σχέδια 
λογισμικού - όπως η προμήθεια λογισμικού προμηθευτή για το έργο, η εγκατάσταση 
εμπορικού λογισμικού (commercial off-the-shelf - COTS) και η εξυπηρέτηση μετά την 
παράδοση του λογισμικού. Μπορεί επίσης να περιέχει κριτήρια αποδοχής και δραστηριότητες 
αναφοράς και διαχείρισης που είναι κρίσιμες για την ποιότητα του λογισμικού. Το 
σχέδιο διασφάλισης ποιότητας λογισμικού δεν πρέπει να έρχεται σε σύγκρουση με το 
σχέδιο διαχείρισης παραμετροποίησης λογισμικού (βλ. γνωστικό πεδίο παραμετροποίησης 
διαμόρφωσης λογισμικού) ή με οποιοδήποτε άλλο σχετικό τεχνούργημα σχεδιασμού έργου.

Η ποιότητα λογισμικού περιλαμβάνει διάφορες οπτικές: την ποιότητα της διαδικασίας 
λογισμικού, την ποιότητα του τελικού προϊόντος λογισμικού και την ποιότητα των 
προϊόντων εργασίας λογισμικού (που αποκαλούνται επίσης ενδιάμεσα προϊόντα). Οι 
επόμενες ενότητες καλύπτουν κάθε οπτική της γνώσης για την ποιότητα λογισμικού 
που πρέπει να έχει ένας μηχανικός λογισμικού.

### Εκτέλεση διασφάλισης διεργασιών [1*, c3s3.2–s3.3; ; c8 ;c9] [7, c25]

Οι Crosby [2] και Humphrey [3] έχουν αποδείξει ότι η διαχείριση ποιότητας λογισμικού 
(SQM) και η ποιότητα της διαδικασίας μηχανικής λογισμικού έχουν άμεση επίδραση στην 
ποιότητα του τελικού προϊόντος λογισμικού. (Τα μοντέλα και τα κριτήρια που αξιολογούν 
και βελτιώνουν τις ικανότητες των οργανισμών λογισμικού είναι κυρίως ζητήματα οργάνωσης 
και διαχείρισης έργων και, ως τέτοια, καλύπτονται από τα γνωστικά πεδία διαχείρισης 
μηχανικής λογισμικού και διαδικασία μηχανικής λογισμικού). Ο Διεθνής Οργανισμός Τυποποίησης 
(ISO) 9000 [10] προτείνει μια άλλη οπτική ποιότητας διεργασιών, όπου ένα σύστημα 
διαχείρισης που επιβλέπει τους φορείς, τις δραστηριότητες, τους ελέγχους, τις εισροές 
και τις εκροές των διεργασιών διασφαλίζει την ποιότητα των εκροών (π.χ. των προϊόντων 
εργασίας και του τελικού προϊόντος). Ένα σύστημα διαχείρισης ορίζεται ως "σύνολο 
αλληλένδετων ή αλληλεπιδρώντων στοιχείων ενός οργανισμού για τη θέσπιση πολιτικών και 
στόχων, καθώς και διαδικασιών για την επίτευξη αυτών των στόχων" [10]. Αυτή η οπτική 
απαιτεί από τους οργανισμούς μηχανικής λογισμικού να αφιερώσουν χρόνο για να περιγράψουν 
τις πολιτικές, τις διεργασίες και τις διαδικασίες τους με αρκετή λεπτομέρεια ώστε οι 
ρόλοι και οι αρμοδιότητες των μηχανικών λογισμικού να είναι σαφείς κατά τη διάρκεια των 
δραστηριοτήτων του κύκλου ζωής (όπως περιγράφεται λεπτομερώς στο γνωστικό πεδίο 
διαδικασία μηχανικής λογισμικού).

Οι δραστηριότητες διασφάλισης ποιότητας λογισμικού, οι οποίες απαριθμούνται στο πρότυπο 
IEEE 730:2014 [6], περιγράφουν τις πολλές δραστηριότητες διασφάλισης ποιότητας που 
πρέπει να διεξάγονται νωρίς στον κύκλο ζωής ενός έργου λογισμικού για τη διασφάλιση 
της ποιότητας. Οι μηχανικοί λογισμικού θα πρέπει να γνωρίζουν την ανάγκη να σχεδιάζουν 
και να εκτελούν δραστηριότητες διασφάλισης ποιότητας λογισμικού σε ορισμένα ορόσημα του 
έργου και να τηρούν αρχεία της εκτέλεσής τους. Οι δραστηριότητες αυτές αποτελούνται 
από ανασκοπήσεις εγγράφων και κώδικα, καθώς και από δραστηριότητες επαλήθευσης και 
επικύρωσης (V&V), συμπεριλαμβανομένων των δοκιμών (όπως περιγράφεται λεπτομερώς στην 
ενότητα Επαλήθευση και επικύρωση και δοκιμές του παρόντος γνωστικού πεδίου), οι οποίες 
αξιολογούν τη συμμόρφωση της εξόδου μιας διαδικασίας με τις απαιτήσεις και τις προδιαγραφές της.

Τέλος, η διαχείριση παραμετροποίησης λογισμικού (SCM) είναι μια σημαντική δραστηριότητα 
για τη διασφάλιση της ποιότητας των προϊόντων εργασίας και του λογισμικού. Η *διαχείριση 
παραμετροποιήσης* ορίζεται ως το "γνωστικό πεδίο που εφαρμόζει τεχνική και διοικητική καθοδήγηση 
και εποπτεία για:

* τον προσδιορισμό και την τεκμηρίωση των λειτουργικών και φυσικών χαρακτηριστικών ενός 
στοιχείου παραμετροποίησης,

* τον έλεγχο των αλλαγών σε αυτά τα χαρακτηριστικά,

* καταγραφή και αναφορά της κατάστασης επεξεργασίας και εφαρμογής των αλλαγών, 

* την επαλήθευση της συμμόρφωσης με τις καθορισμένες απαιτήσεις".

Οι μηχανικοί λογισμικού θα πρέπει να προσδιορίσουν ποια προϊόντα εργασίας και 
τεχνουργήματα λογισμικού απαιτούν διαχείριση παραμετροποίησης. Επιπλέον, θα πρέπει 
να είναι εξοικειωμένοι με τις διαδικασίες έκδοσης του πηγαίου κώδικα, οι οποίες 
περιλαμβάνουν την παρακολούθηση των βασικών και των αυξητικών εκδόσεων του λογισμικού 
και τη διασφάλιση ότι οι αλλαγές που πραγματοποιούν οι διάφοροι προγραμματιστές δεν 
επηρεάζουν η μία την άλλη, και θα πρέπει να γνωρίζουν πώς να χειρίζονται την 
εργαλειοθήκη ελέγχου εκδόσεων. (Για περισσότερες πληροφορίες σχετικά με αυτή τη 
διαδικασία, ανατρέξτε στο γνωστικό πεδίο Διαχείρισης διαμόρφωσης λογισμικού).

### *Εκτέλεση διασφάλισης προϊόντων* [1*, s3.2–s3.3] [7, c4s4.1.2]

Πρώτον, ο μηχανικός λογισμικού πρέπει να προσδιορίσει τον πραγματικό σκοπό του 
λογισμικού που πρόκειται να σχεδιαστεί και να κατασκευαστεί. Οι απαιτήσεις των 
ενδιαφερομένων μερών εδώ είναι υψίστης σημασίας. Περιλαμβάνουν απαιτήσεις ποιότητας 
(οι οποίες ονομάζονται περιορισμοί ποιότητας υπηρεσιών στο γνωστικό πεδίο απαιτήσεων 
λογισμικού) και λειτουργικές απαιτήσεις. Έτσι, οι μηχανικοί λογισμικού είναι υπεύθυνοι 
για την εκμαίευση απαιτήσεων ποιότητας που μπορεί να μην είναι σαφείς στην αρχή και για 
την κατανόηση της σημασίας τους και της δυσκολίας ορισμού, μέτρησής και 
καθιέρωσής για τελική αποδοχή. Οι μηχανικοί λογισμικού θα πρέπει να κατανοήσουν τον 
τρόπο ορισμού των ποιοτικών απαιτήσεων καθώς και τους ποιοτικούς στόχους τους, ώστε να 
διασφαλιστεί ότι μπορούν να μετρηθούν αποτελεσματικά στο στάδιο της αποδοχής του έργου. 
Κατά τη διάρκεια του σχεδιασμού του έργου, οι μηχανικοί λογισμικού πρέπει να έχουν κατά 
νου αυτές τις απαιτήσεις ποιότητας. Πρέπει επίσης να προβλέψουν πιθανό πρόσθετο κόστος 
ανάπτυξης, εάν χαρακτηριστικά όπως η ασφάλεια, η προστασία και η αξιοπιστία είναι σημαντικά.

Επιτεύχθηκε ένα διεθνές πρότυπο σχετικά με τα πολλά μετρήσιμα ποιοτικά χαρακτηριστικά 
ενός προϊόντος λογισμικού, το οποίο περιγράφεται στο πρότυπο ISO/IEC 25010:2011 [4]. 
Το πρότυπο αυτό προτείνει διάφορα μοντέλα ποιότητας προϊόντων λογισμικού, αποτελούμενα 
από χαρακτηριστικά και υπο-χαρακτηριστικά, για την ποιότητα προϊόντων λογισμικού και 
την ποιότητα λογισμικού κατά τη χρήση. Ένα άλλο είναι το πρότυπο IEEE 982.1:2005 
λεξικό μέτρων για την παραγωγή αξιόπιστου λογισμικού (Standard Dictionary of Measures to 
Produce Reliable Software). Αυτά τα χαρακτηριστικά λογισμικού ονομάζονται συνήθως 
απαιτήσεις ποιότητας προϊόντος, οι οποίες είναι μη λειτουργικές απαιτήσεις λογισμικού 
[7* C4s4.1.2]. Οι μηχανικοί λογισμικού πρέπει να γνωρίζουν τα πολλά χαρακτηριστικά 
λογισμικού που μπορούν να σχεδιαστούν, να υλοποιηθούν και να μετρηθούν κατά τη διάρκεια 
της κατασκευής λογισμικού (π.χ. λειτουργική καταλληλότητα, αποδοτικότητα απόδοσης, 
συμβατότητα, χρηστικότητα, αξιοπιστία, ασφάλεια, συντηρησιμότητα και φορητότητα). Οι 
μηχανικοί λογισμικού θα πρέπει επίσης να γνωρίζουν ότι ορισμένα χαρακτηριστικά ποιότητας 
έχουν αντικρουόμενες επιπτώσεις. Για παράδειγμα, η προσπάθεια αύξησης του χαρακτηριστικού 
ασφάλειας με την κρυπτογράφηση δεδομένων μπορεί να επηρεάσει αρνητικά το χαρακτηριστικό 
απόδοσης. Αυτό το διεθνές πρότυπο προτείνει επίσης ένα γενικό μοντέλο ποιότητας δεδομένων 
που επικεντρώνεται στην ποιότητα των δεδομένων ως μέρος ενός συστήματος υπολογιστών και 
ορίζει χαρακτηριστικά ποιότητας για δεδομένα-στόχους που χρησιμοποιούνται από ανθρώπους 
και συστήματα.

Μια άλλη οπτική ποιότητας προϊόντων λογισμικού είναι η ποιότητα των προϊόντων εργασίας. 
Με τον όρο *προϊόν εργασίας* εννοείται κάθε τεχνούργημα που προκύπτει από μια διαδικασία 
που χρησιμοποιείται για τη δημιουργία του τελικού προϊόντος λογισμικού. Τα προϊόντα 
εργασίας περιλαμβάνουν προδιαγραφές συστήματος/υποσυστήματος, προδιαγραφές απαιτήσεων 
λογισμικού για τα στοιχεία λογισμικού ενός συστήματος, περιγραφές σχεδιασμού λογισμικού, 
πηγαίο κώδικα, τεκμηρίωση δοκιμών λογισμικού και εκθέσεις δοκιμών. Η ορθή πρακτική της 
μηχανικής απαιτεί την αξιολόγηση των ενδιάμεσων προϊόντων εργασίας που σχετίζονται με 
την ποιότητα με τη χρήση ανασκοπήσεων και επιθεωρήσεων των προϊόντων εργασίας (που 
αναλύονται αργότερα σε αυτό το κεφάλαιο) καθ' όλη τη διάρκεια της διαδικασίας μηχανικής 
λογισμικού.

#### *Επαλήθευση και επικύρωση και δοκιμές* [1*, c7] [11]

Η *επαλήθευση* διασφαλίζει ότι το προϊόν κατασκευάζεται σωστά και ότι τα προϊόντα εξόδου 
μιας φάσης του κύκλου ζωής πληρούν τις προδιαγραφές που τους έχουν επιβληθεί σε 
προηγούμενες φάσεις. Η επαλήθευση ορίζεται ως "η διαδικασία αξιολόγησης ενός συστήματος 
ή στοιχείου για να καθοριστεί εάν τα προϊόντα μιας δεδομένης φάσης ανάπτυξης ικανοποιούν 
τις προϋποθέσεις που επιβλήθηκαν στην αρχή της φάσης αυτής" [11]. Εναλλακτικά, η 
*επικύρωση* διασφαλίζει ότι κατασκευάζεται το σωστό προϊόν - το προϊόν εκπληρώνει τον 
συγκεκριμένο επιδιωκόμενο σκοπό του. Ορίζεται ως "η διαδικασία αξιολόγησης ενός 
συστήματος ή εξαρτήματος κατά τη διάρκεια ή στο τέλος της διαδικασίας ανάπτυξης για να 
προσδιοριστεί εάν ικανοποιεί τις καθορισμένες απαιτήσεις".

Σκοπός της επαλήθευσης και επικύρωσης είναι να βοηθήσει τον οργανισμό ανάπτυξης να 
ενσωματώσει την ποιότητα στο λογισμικό καθ' όλη τη διάρκεια του κύκλου ζωής της ανάπτυξης. 
Η επαλήθευση και επικύρωση περιλαμβάνει εργασίες δοκιμών λογισμικού. Η δοκιμή λογισμικού 
είναι μια απαραίτητη δραστηριότητα για τη διασφάλιση της ποιότητας του προϊόντος. 
Ωστόσο, στις περισσότερες περιπτώσεις, η δοκιμή λογισμικού δεν επαρκεί για να εδραιώσει 
την εμπιστοσύνη ότι το λογισμικό ανταποκρίνεται στην προβλεπόμενη χρήση του. Οι εργασίες 
επαλήθευσης και επικύρωσης που απαριθμούνται στο πρότυπο IEEE 1012:2016 [11] αξιολογούν 
αντικειμενικά τα προϊόντα και τις διαδικασίες καθ' όλη τη διάρκεια του κύκλου ζωής. Η 
αξιολόγηση αυτή καταδεικνύει κατά πόσον οι απαιτήσεις είναι σωστές, πλήρεις, ακριβείς, 
συνεπείς και ελέγξιμες. Η διαδικασία επαλήθευσης και η διαδικασία επικύρωσης πρέπει 
να ξεκινούν νωρίς κατά την ανάπτυξη ή τη συντήρηση. Με τον τρόπο αυτό αποφεύγονται τα 
ελαττώματα σε προχωρημένο στάδιο του κύκλου ζωής, τα οποία θα συνεπάγονταν επανεπεξεργασία 
και θα αύξαναν σημαντικά το κόστος. Οι μηχανικοί λογισμικού θα πρέπει να προσδιορίζουν 
το επίπεδο ακεραιότητας του προϊόντος και να διασφαλίζουν ότι ανατίθενται οι ελάχιστες 
εργασίες επαλήθευσης και επικύρωσης για βασικά χαρακτηριστικά του προϊόντος που αφορούν 
τόσο τον άμεσο προκάτοχο του προϊόντος όσο και τις προγραμματισμένες προδιαγραφές. 
Αναφέρονται επίσης προαιρετικές εργασίες επαλήθευσης και επικύρωσης, οι οποίες μπορούν να 
βελτιώσουν την ποιότητα του προϊόντος λογισμικού. Η τήρηση αρχείου της ιχνηλασιμότητας 
μεταξύ των προϊόντων εργασίας λογισμικού μπορεί να συμβάλλει στην αύξηση της ποιότητας 
των δραστηριοτήτων επαλήθευσης και επικύρωσης. Η *ιχνηλασιμότητα* ορίζεται ως η "ικανότητα 
εντοπισμού του ιστορικού, της εφαρμογής ή της θέσης ενός αντικειμένου" [14].

Ο έγκαιρος σχεδιασμός των δραστηριοτήτων επαλήθευσης και επικύρωσης διασφαλίζει ότι κάθε 
πόρος, ρόλος και ευθύνη είναι σαφώς κατανεμημένα. Το σχέδιο επαλήθευσης και επικύρωσης 
που προκύπτει τεκμηριώνει τους διάφορους πόρους και τους ρόλους τους και τις δραστηριότητες 
διασφάλισης ποιότητας λογισμικού, καθώς και τις τεχνικές και τα εργαλεία που θα 
χρησιμοποιηθούν. Οι μηχανικοί λογισμικού πρέπει να επιλέγουν και να εφαρμόζουν την 
κατάλληλη εργασία επαλήθευσης και επικύρωσης ανάλογα με το επίπεδο ακεραιότητας του 
λογισμικού. (Ανατρέξτε στην ενότητα Προετοιμασία διασφάλισης ποιότητας) Η επαλήθευση και επικύρωση 
μπορεί επίσης να εκτελεστεί από έναν ανεξάρτητο οργανισμό για πολύ κρίσιμο λογισμικό. Η ανεξάρτητη 
επαλήθευση και επικύρωση (IV&V) ορίζεται ως "επαλήθευση και επικύρωση που εκτελείται από 
έναν οργανισμό που είναι τεχνικά, διοικητικά και οικονομικά ανεξάρτητος από τον οργανισμό 
ανάπτυξης" [11].

Οι εργασίες επαλήθευσης και επικύρωσης λογισμικού μπορούν να ταξινομηθούν σε στατικές, 
δυναμικές και τυπικές εργασίες [20]. Οι δυναμικές τεχνικές περιλαμβάνουν την εκτέλεση 
του λογισμικού- οι στατικές τεχνικές περιλαμβάνουν την ανάλυση εγγράφων και πηγαίου 
κώδικα αλλά όχι την εκτέλεση του λογισμικού- οι τυπικές τεχνικές χρησιμοποιούν μαθηματικά 
και τυπικές γλώσσες προδιαγραφών.

#### *Τεχνικές στατικής ανάλυσης*

Οι τεχνικές στατικής ανάλυσης αναλύουν άμεσα το περιεχόμενο και τη δομή ενός προϊόντος 
εργασίας (συμπεριλαμβανομένων των απαιτήσεων, των προδιαγραφών διασύνδεσης, των σχεδίων 
και των μοντέλων) χωρίς να εκτελούν το λογισμικό. Τα εργαλεία και οι τεχνικές στατικής 
εξέτασης του έργου λογισμικού μπορούν να βοηθήσουν τους μηχανικούς λογισμικού σε αυτό 
το έργο. Για παράδειγμα, η ανάγνωση κώδικα, η αξιολόγηση ενός προϊόντος εργασίας από 
ομότιμους και η στατική ανάλυση της ροής ελέγχου του πηγαίου κώδικα θεωρούνται στατικές 
τεχνικές επειδή δεν περιλαμβάνουν την εκτέλεση του κώδικα λογισμικού.

#### *Τεχνικές δυναμικής ανάλυσης*

Οι τεχνικές δυναμικής ανάλυσης περιλαμβάνουν την εκτέλεση ή προσομοίωση του κώδικα 
λογισμικού, αναζητώντας σφάλματα και ατέλειες. Διαφορετικές δυναμικές τεχνικές 
εκτελούνται καθ' όλη τη διάρκεια της ανάπτυξης, της συντήρησης και της λειτουργίας 
του λογισμικού. Γενικά, πρόκειται για τεχνικές δοκιμών, αλλά η προσομοίωση και η 
ανάλυση μοντέλων θεωρούνται τεχνικές δυναμικής ανάλυσης. (Βλ. γνωστικό πεδίο Μοντέλα 
και μέθοδοι τεχνολογίας λογισμικού) Επιπλέον, η δοκιμή μαύρου κουτιού θεωρείται τεχνική 
δυναμικής ανάλυσης, καθώς ο μηχανικός λογισμικού αναλύει την έξοδο που λαμβάνει μετά την 
εισαγωγή των εισόδων. (Βλέπε γνωστικό πεδίο Έλεγχος λογισμικού.)

#### *Τεχνικές τυπικής ανάλυσης*

Οι *τεχνικές τυπικής ανάλυσης* (που ονομάζονται επίσης *τυπικές μέθοδοι*) είναι 
"μαθηματικές προσεγγίσεις στην ανάπτυξη λογισμικού όπου ορίζετε ένα τυπικό μοντέλο 
του λογισμικού. Στη συνέχεια μπορείτε να αναλύσετε τυπικά αυτό το μοντέλο για να 
αναζητήσετε σφάλματα και ασυνέπειες" [7*, c10s10.5]. Ορισμένες φορές, οι απαιτήσεις 
λογισμικού μπορεί να γραφούν χρησιμοποιώντας μια πιο τυπική γλώσσα προδιαγραφών, γνωστή 
και ως τυπικές μέθοδοι. Χρησιμοποιούνται κυρίως για την επαλήθευση των απαιτήσεων και των 
σχεδίων λογισμικού. Έχουν χρησιμοποιηθεί κυρίως για την επαλήθευση ζωτικών τμημάτων 
κρίσιμων συστημάτων, όπως συγκεκριμένες απαιτήσεις ασφάλειας και προστασίας. (Βλέπε 
επίσης τυπικές μέθοδοι στο γνωστικό πεδίο Μοντέλα και μέθοδοι μηχανικής λογισμικού.) 
Διαφορετικές ομάδες μπορεί να εκτελούν δοκιμές κατά τη διάρκεια της ανάπτυξης λογισμικού, 
συμπεριλαμβανομένων ομάδων ανεξάρτητων από την ομάδα ανάπτυξης. Το γνωστικό πεδίο Έλεγχος 
λογισμικού είναι αφιερωμένο εξ ολοκλήρου σε αυτό το θέμα.

#### *Ποιοτικός έλεγχος και έλεγχος λογισμικού* [1*, c7s7.10]

Ο έλεγχος θεωρείται σημαντική δραστηριότητα ελέγχου της ποιότητας του προϊόντος, 
μέρος των διαδικασιών επαλήθευσης και επικύρωσης ενός έργου ανάπτυξης λογισμικού. 
Ο έλεγχος ποιότητας είναι ένα σύνολο δραστηριοτήτων που μετρούν, αξιολογούν και 
αναφέρουν την ποιότητα των αντικειμένων του έργου λογισμικού καθ' όλη τη διάρκεια 
του κύκλου ζωής του έργου [25]. Ο έλεγχος λογισμικού είναι μια σημαντική δραστηριότητα 
ελέγχου ποιότητας για τη διασφάλιση της ποιότητας του λογισμικού. Ο έλεγχος λογισμικού 
είναι μία από τις πολλές δραστηριότητες επαλήθευσης που επιβεβαιώνουν ότι η παραγωγή 
της ανάπτυξης λογισμικού ανταποκρίνεται στις απαιτήσεις εισόδου. Το πρότυπο IEEE 730:2014 
[6] απαριθμεί τις πολλές δραστηριότητες δοκιμής και επανελέγχου που πρέπει να σχεδιάζουν, 
να εκτελούν και να καταγράφουν οι μηχανικοί λογισμικού. Συνιστά επίσης τον καθορισμό 
κριτηρίων ολοκλήρωσης του ελέγχου. Οι μηχανικοί λογισμικού θα πρέπει να σχεδιάζουν τις 
δραστηριότητες ελέγχου, συμπεριλαμβανομένων των επιπέδων, των τεχνικών, των μέτρων και 
των εργαλείων. (Ανατρέξτε στο γνωστικό πεδίο Ελέγχου για λεπτομέρειες σχετικά με τις 
γνώσεις που πρέπει να έχουν οι μηχανικοί λογισμικού σχετικά με τον έλεγχο λογισμικού).

#### *Τεχνικές αναθεωρήσεις και έλεγχοι* [1*, c5, c6] [23, s4, s5]

Στην προηγούμενη ενότητα είδαμε τεχνικές ελέγχου ποιότητας λογισμικού για την αξιολόγηση 
της ποιότητας του λογισμικού. Για τα άλλα τεχνουργήματα, ο έλεγχος ποιότητας των 
προϊόντων αξιολογείται με τη χρήση ανασκοπήσεων και επιθεωρήσεων αυτών των προϊόντων 
εργασίας. Αυτές οι δραστηριότητες ελέγχου ποιότητας λογισμικού σχεδιάζονται και 
εκτελούνται κατά τη διάρκεια των δραστηριοτήτων ανάπτυξης, συντήρησης και λειτουργίας [17]. 
Οι ανασκοπήσεις από ομότιμους (peer reviews) ορίζονται ως "η ανασκόπηση των προϊόντων 
εργασίας που πραγματοποιείται από ομότιμους κατά τη διάρκεια της ανάπτυξης των προϊόντων 
εργασίας για τον εντοπισμό ελαττωμάτων προς αφαίρεση" [14]. Για παράδειγμα, κατά τη 
διάρκεια της ανάπτυξης λογισμικού, μια ανασκόπηση κώδικα (που συχνά γίνεται με τη χρήση 
μιας τεχνικής/εργαλείου αιτήματος έλξης - pull request) λαμβάνει χώρα όταν ένας ομότιμος 
αναθεωρεί τον κώδικα, συχνά κατόπιν αιτήματος του προγραμματιστή λογισμικού, πριν αυτός 
συγχωνευθεί σε ένα έργο.

Οι αναθεωρήσεις είναι πολύτιμες επειδή μπορούν να εντοπίσουν ζητήματα σε πρώιμο στάδιο της 
ανάπτυξης ή ακόμη και πριν από το σχεδιασμό ενός στοιχείου. Η διόρθωση ενός ελαττώματος 
σε ένα στοιχείο που έχει κωδικοποιηθεί είναι πολύ πιο δαπανηρή από το να το εντοπίσετε εκ 
των προτέρων. Οι διαδικασίες επισκόπησης και ελέγχου ορίζονται σε γενικές γραμμές ως 
στατικές δραστηριότητες, που σημαίνει ότι δεν εκτελείται λογισμικό ή μοντέλα. Αντίθετα, 
εξετάζουν τα τεχνουργήματα μηχανικής λογισμικού (που ονομάζονται επίσης *ενδιάμεσα* ή 
*προϊόντα εργασίας*) σχετικά με τα πρότυπα που έχει θεσπίσει ο οργανισμός ή το έργο για 
τα εν λόγω τεχνουργήματα.

Οι διάφοροι τύποι επισκοπήσεων προϊόντων εργασίας (π.χ. τυπικές και άτυπες) 
διακρίνονται ανάλογα με τον σκοπό, το επίπεδο ανεξαρτησίας, τα εργαλεία και τις 
τεχνικές που χρησιμοποιούνται, τους ρόλους που εμπλέκονται και το αντικείμενο της 
δραστηριότητας. Οι ανασκοπήσεις διαδραματίζουν σημαντικό ρόλο στην ποιότητα του 
λογισμικού, στην SCM και στην ανταλλαγή γνώσεων μεταξύ συναδέλφων. Ωστόσο, αυτοί οι 
διαφορετικοί ρόλοι μοιράζονται έναν ενιαίο σκοπό - τη διασφάλιση της ποιότητας των 
παραδιδόμενων προϊόντων. Οι ανασκοπήσεις πρέπει να αποτελούν μέρος της κουλτούρας της 
μηχανικής λογισμικού και να σχεδιάζονται, να εκτελούνται και να τεκμηριώνονται κατά τη 
διάρκεια του κύκλου ζωής του λογισμικού. Στους ευέλικτους κύκλους ζωής, ο 
προγραμματισμός σε ζεύγη προσκαλεί συνεχείς αναθεωρήσεις. Διαφορετικοί τύποι αναθεώρησης 
για προϊόντα εργασίας περιγράφονται στο πρότυπο ISO/IEC 20246:2017 [12]: Ανασκοπήσεις 
κατά περίπτωση (ad hoc) - μη δομημένες ανασκοπήσεις όπου κάθε αξιολογητής αναμένεται να βρει 
όσο το δυνατόν περισσότερα ελαττώματα οποιουδήποτε τύπου- Ανασκοπήσεις βάσει καταλόγου ελέγχου - 
συστηματικές ανασκοπήσεις που εντοπίζουν ζητήματα βάσει καταλόγων ελέγχου- Ανασκοπήσεις 
βάσει σεναρίων - ανασκοπήσεις όπου στους αξιολογητές παρέχονται δομημένες κατευθυντήριες 
γραμμές για τον τρόπο ανάγνωσης του υπό εξέταση προϊόντος εργασίας, Ανασκοπήσεις με βάση 
την οπτική γωνία - ανασκοπήσεις στις οποίες οι αναθεωρητές αναλαμβάνουν διαφορετικές 
οπτικές γωνίες των ενδιαφερομένων μερών και αναθεωρούν το προϊόν εργασίας από την οπτική 
γωνία του εκάστοτε ενδιαφερομένου- και Ανασκοπήσεις με βάση τον ρόλο - ανασκοπήσεις στις 
οποίες ο αναθεωρητής αξιολογεί το προϊόν εργασίας από την οπτική γωνία διαφόρων ρόλων των 
ενδιαφερομένων μερών, οι οποίοι μπορεί να διαφέρουν από τον καθημερινό τους ρόλο.

Οι έλεγχοι είναι πιο επίσημες δραστηριότητες που συχνά επιβάλλονται να διενεργούνται 
από τρίτους για να διασφαλίζεται η ανεξαρτησία. Σε ώριμους οργανισμούς, οι τεχνικές 
επισκοπήσεις και οι έλεγχοι ενσωματώνονται πλήρως στα γενικά σχέδια του έργου. Ως εκ 
τούτου, οι τεχνικές ανασκοπήσεις και οι έλεγχοι πρέπει να σχεδιάζονται, να εγκρίνονται 
και να διεξάγονται. Αν και ένας έλεγχος έργου συχνά αφορά την τρέχουσα κατάσταση 
ολόκληρου του έργου, οι τεχνικές επιθεωρήσεις μπορούν επίσης να είναι πιο εστιασμένες 
και να αφορούν μια συγκεκριμένη φάση του έργου [24]. Οι επιθεωρήσεις απαιτήσεων 
συστήματος βοηθούν να διασφαλιστεί ότι το επίπεδο κατανόησης των απαιτήσεων του 
συστήματος ανωτάτου επιπέδου είναι επαρκές για την υποστήριξη περαιτέρω δραστηριοτήτων 
ανάλυσης απαιτήσεων και σχεδιασμού και ότι το σύστημα μπορεί να προχωρήσει στον αρχικό 
σχεδιασμό του συστήματος με αποδεκτό κίνδυνο- οι επιθεωρήσεις λειτουργικού ή 
προκαταρκτικού σχεδιασμού του συστήματος βοηθούν να διασφαλιστεί ότι το υπό εξέταση 
σύστημα μπορεί να προχωρήσει στον προκαταρκτικό ή λεπτομερή σχεδιασμό με αποδεκτό 
κίνδυνο και ότι όλες οι απαιτήσεις του συστήματος και οι απαιτήσεις λειτουργικής απόδοσης 
που προκύπτουν από τις εγκεκριμένες προκαταρκτικές προδιαγραφές του συστήματος είναι 
καθορισμένες και συνεπείς με τον προϋπολογισμό του έργου, το χρονοδιάγραμμα του 
προγράμματος, τον κίνδυνο και άλλους περιορισμούς του προγράμματος και του συστήματος. 
Οι επισκοπήσεις προκαταρκτικής σχεδίασης συμβάλλουν στη διασφάλιση ότι η προκαταρκτική 
σχεδίαση για το υπό εξέταση σύστημα είναι επαρκώς ώριμη και έτοιμη να προχωρήσει σε 
λεπτομερή σχεδίαση και μπορεί να ικανοποιήσει τις δηλωθείσες απαιτήσεις απόδοσης εντός 
του προϋπολογισμού του προγράμματος, του χρονοδιαγράμματος, του κινδύνου και άλλων 
περιορισμών του προγράμματος και του συστήματος. Οι επισκοπήσεις ετοιμότητας ελέγχου 
αξιολογούν τους στόχους ελέγχου, τις μεθόδους και τις διαδικασίες ελέγχου, το πεδίο 
εφαρμογής της ελέγχου, την ασφάλεια, την ετοιμότητα για τη δοκιμή και την αξιολόγηση 
του έργου και κατά πόσον οι πόροι ελέγχου έχουν προσδιοριστεί και αποκτηθεί κατάλληλα.

## Εργαλεία ποιότητας λογισμικού [1*, c3s3.2.3, c7s7.8.1, c7s7.11]

Τα εργαλεία λογισμικού βελτιώνουν την ποιότητα του λογισμικού. Τα απλά εργαλεία μπορεί 
να είναι φόρμες και κατάλογοι ελέγχου (π.χ. ένας πίνακας ιχνηλασιμότητας απαιτήσεων ή 
ένας κατάλογος ελέγχου αναθεώρησης κώδικα). Αλλά και τα αυτοματοποιημένα εργαλεία μπορούν 
να βοηθήσουν σημαντικά στη βελτίωση της αποτελεσματικότητας και της ποιότητας του 
λογισμικού. Παραδείγματα αυτοματοποιημένων εργαλείων είναι τα εργαλεία που επιτρέπουν 
την έκδοση/διακλάδωση κώδικα (π.χ. Git) και τα αιτήματα έλξης για αναθεώρηση κώδικα. 
Τα εργαλεία DevOps σε υπηρεσίες/σενάρια όπως τα περιβάλλοντα κατά παραγγελία, η συνεχής 
ολοκλήρωση/συνεχής παράδοση (CI/CD), η αξιολόγηση της ποιότητας του κώδικα και οι 
αυτοματοποιημένες δοκιμές συμβάλλουν σημαντικά στην ποιότητα του λογισμικού. (Βλέπε τη 
συζήτηση για τα εργαλεία στο γνωστικό πεδίο Διαδικασίες λογισμικού).

Τα εργαλεία αυτά είναι γνωστά ως εργαλεία στατικής και δυναμικής ανάλυσης. Τα εργαλεία 
στατικής ανάλυσης εισάγουν πηγαίο κώδικα, εκτελούν συντακτική και σημασιολογική ανάλυση 
χωρίς να εκτελούν τον κώδικα και παρουσιάζουν τα αποτελέσματα στους χρήστες. Υπάρχει 
μεγάλη ποικιλία όσον αφορά το βάθος, τη διεξοδικότητα και το πεδίο εφαρμογής των εργαλείων 
στατικής ανάλυσης που μπορούν να εφαρμοστούν σε τεχνουργήματα, συμπεριλαμβανομένων των 
μοντέλων, και στον πηγαίο κώδικα. (Για περιγραφές των εργαλείων δυναμικής ανάλυσης, 
ανατρέξτε στα γνωστικά πεδία Κατασκευή λογισμικού, Έλεγχος λογισμικού και Συντήρηση 
λογισμικού). Οι κατηγορίες εργαλείων στατικής ανάλυσης περιλαμβάνουν τα ακόλουθα: 
Εργαλεία που διευκολύνουν και αυτοματοποιούν εν μέρει τις ανασκοπήσεις και τις 
επιθεωρήσεις εγγράφων και κώδικα. Αυτά τα εργαλεία μπορούν να δρομολογήσουν εργασίες σε 
διαφορετικούς συμμετέχοντες για να αυτοματοποιήσουν μερικώς και να ελέγξουν τη 
διαδικασία αναθεώρησης. Επιπλέον, επιτρέπουν στους χρήστες να εισάγουν ελαττώματα που 
εντοπίζονται κατά τη διάρκεια επιθεωρήσεων και ανασκοπήσεων για μεταγενέστερη αφαίρεση- 
Εργαλεία που βοηθούν τους οργανισμούς να εκτελούν ανάλυση κινδύνων για την ασφάλεια του 
λογισμικού. Τα εργαλεία αυτά παρέχουν, για παράδειγμα, αυτοματοποιημένη υποστήριξη για την 
ανάλυση τρόπων και επιπτώσεων αστοχίας (FMEA) και την ανάλυση δένδρων σφαλμάτων (FTA)- 
Εργαλεία που υποστηρίζουν την παρακολούθηση προβλημάτων λογισμικού. Τα εργαλεία αυτά 
επιτρέπουν την καταχώρηση των ανωμαλιών που ανακαλύπτονται κατά τη διάρκεια των δοκιμών 
λογισμικού και τη μετέπειτα ανάλυση, διάθεση και επίλυση. Ορισμένα εργαλεία 
περιλαμβάνουν υποστήριξη για ροή εργασιών και για την παρακολούθηση της κατάστασης 
επίλυσης του προβλήματος- και εργαλεία που αναλύουν δεδομένα που συλλέγονται από 
περιβάλλοντα μηχανικής λογισμικού και περιβάλλοντα ελέγχου λογισμικού και παράγουν 
οπτικές απεικονίσεις ποσοτικοποιημένων δεδομένων σε γραφήματα, διαγράμματα και πίνακες. 
Αυτά τα εργαλεία περιλαμβάνουν μερικές φορές τη λειτουργικότητα για την εκτέλεση 
στατιστικής ανάλυσης σε σύνολα δεδομένων (για τη διάκριση τάσεων και την πραγματοποίηση 
προβλέψεων). Ορισμένα από αυτά τα εργαλεία παρέχουν ποσοστά εισαγωγής και αφαίρεσης 
ελαττωμάτων, πυκνότητες ελαττωμάτων, αποδόσεις και κατανομή της εισαγωγής και αφαίρεσης 
ελαττωμάτων για κάθε φάση του κύκλου ζωής.

## Πίνακας θεμάτων και υλικού αναφοράς

## Περαιτέρω ανάγνωση

Πρότυπο IEEE 730-2014, "πρότυπο ΙΕΕΕ για τις διεργασίες διασφάλισης ποιότητας λογισμικού" 
(IEEE Standard for Software Quality Assurance Processes), 2014 [6]. Στο πρότυπο αυτό 
καθορίζονται οι απαιτήσεις για την έναρξη, τον προγραμματισμό, τον έλεγχο και την 
εκτέλεση των διαδικασιών διασφάλισης ποιότητας λογισμικού ενός έργου ανάπτυξης ή 
συντήρησης λογισμικού.

Πρότυπο IEEE Std 1012-2016, "πρότυπο ΙΕΕΕ για επαλήθευση και επικύρωση συστημάτων, 
λογισμικού και υλικού" (IEEE Standard for System, Software, and Hardware Verification 
and Validation), 2016 [11]. Οι διαδικασίες επαλήθευσης και επικύρωσης (V&V) 
χρησιμοποιούνται για να διαπιστωθεί εάν τα προϊόντα ανάπτυξης μιας συγκεκριμένης 
δραστηριότητας συμμορφώνονται με τις απαιτήσεις της δραστηριότητας αυτής και εάν το 
προϊόν ικανοποιεί την προβλεπόμενη χρήση και τις ανάγκες των χρηστών. Οι απαιτήσεις 
των διαδικασιών του κύκλου ζωής V&V καθορίζονται για διαφορετικά επίπεδα ακεραιότητας.

Πρότυπο ISO/IEC Std 20246-2017, "Μηχανική λογισμικού και συστημάτων - Ανασκοπήσεις 
προϊόντων εργασίας" (Software and Systems Engineering — Work Product Reviews), 2017 [12]. 
Αυτό το διεθνές πρότυπο καθορίζει ένα γενικό πλαίσιο για τις ανασκοπήσεις προϊόντων 
εργασίας, το οποίο μπορεί να αναφέρεται και να χρησιμοποιείται από όλους τους οργανισμούς 
που εμπλέκονται στη διαχείριση, την ανάπτυξη, τη δοκιμή και τη συντήρηση συστημάτων και 
λογισμικού. 

N. Leveson, *Safeware: System Safety and Computers* [15]. Το βιβλίο αυτό 
περιγράφει τη σημασία των πρακτικών ασφάλειας λογισμικού και τον τρόπο με τον οποίο οι 
πρακτικές αυτές μπορούν να ενσωματωθούν σε έργα ανάπτυξης λογισμικού.

T. Gilb και D. Graham, *Software Inspection* [16]. Αυτό το βιβλίο εισάγει τη μέτρηση 
και τη στατιστική δειγματοληψία για τις αναθεωρήσεις και τα ελαττώματα. Παρουσιάζει 
τεχνικές που παράγουν ποσοτικοποιημένα αποτελέσματα για τη μείωση των ελαττωμάτων, τη 
βελτίωση της παραγωγικότητας, την παρακολούθηση των έργων και τη δημιουργία τεκμηρίωσης.

K. E. Wiegers, *Peer Reviews in Software: A Practical Guide* [17*]. Το βιβλίο αυτό 
παρέχει σαφείς, συνοπτικές εξηγήσεις για τις διάφορες μεθόδους αξιολόγησης από 
ομότιμους που διακρίνονται ανάλογα με το επίπεδο τυπικότητας και αποτελεσματικότητας. 
Παρέχει ρεαλιστική καθοδήγηση για την εφαρμογή των μεθόδων και για τον προσδιορισμό των 
μεθόδων που είναι κατάλληλες για δεδομένες περιστάσεις.

### Αναφορές

[1*] C. Y. Laporte, A. April, *Software Quality Assurance*, IEEE Press, 2018.

[2] P. B. Crosby, *Quality Is Free*, McGraw-Hill, 1979.

[3] W. Humphrey, *Managing the Software Process*, Addison-Wesley, 1989.

[4] ISO/IEC, “ISO/IEC 25010:2011 Systems and Software Engineering — Systems 
and Software Quality Requirements and Evaluation (SQuaRE) — Systems and 
Software Quality Models,” ed., 2011.

[5*] IEEE CS/ACM Joint Task Force on Software Engineering Ethics and Professional 
Practices, “Software Engineering Code of Ethics and Professional Practice 
https://www.computer.org/education/code-of-ethics.

[6] IEEE, “IEEE 730 Standard for Software Quality Assurance Processes,” ed., 
IEEE, 2014.

[7*] I. Sommerville, *Software Engineering*, 10th ed., New York: Addison-Wesley, 
2016.

[8] RTCA, “DO-178C, Software Considerations in Airborne Systems and Equipment 
Certification,” ed., January 5, 2012. Also known as ED-12C in EUROCAE.

[9] ISO/IEC, “ISO/IEC 15026-1:2019 Systems and Software Engineering — Systems 
and Software Assurance — Part 1: Concepts and Vocabulary,” ed., ISO/IEC, 2019.

[10] ISO, “ISO 9000:2015 Quality Management Systems — Fundamentals and Vocabulary,” 
ed., ISO, 2015.

[11] IEEE, “IEEE Std. 1012:2016, Standard for System and Software Verification and 
Validation,” IEEE, 2016.

[12] ISO/IEC 20246:2017, “Software and systems engineering — Work product reviews,” 
ed., 2017.

[13*] K. E. Wiegers, *Software Requirements*, 3rd ed., Redmond, WA: Microsoft Press, 
2013.

[14] IEEE/ISO/IEC, “IEEE/ISO/IEC 24765: Systems and Software Engineering — 
Vocabulary,” 1st ed., 2017.

[15] N. Leveson, *Safeware: System Safety and Computers*, Addison-Wesley Professional, 
1995.

[16] T. Gilb and D. Graham, *Software Inspection*, Addison-Wesley Professional, 1993.

[17*] K. Wiegers, *Peer Reviews in Software: A Practical Guide*, 
Addison-Wesley Professional, 2001.

[18] BS EN 50128:2011+A2:2020, “Standard for Railway Applications – Communications, 
Signaling and Processing Systems – Software for Railway Control and Protection Systems,” 
British-Adopted European Standard, August 10, 2020.

[19] K. Iberle, *They don’t care about quality*, proceedings of STAR East, Orlando, 
United States, 2013, available at https://kiberle.com/publications/.

[20] D. Wallace, L. M. Ippolito, B. B. Cuthill, *Reference Information for the 
Software Verification and Validation Process*, National Institute of Standards and 
Technology (NIST), U.D. Department of Commerce, Special Publication 500-234, 1996.

[21] IEC 60300-1:2014, “Dependability Management — Part 1: Guidance for Management 
and Application,” version 3, September 25, 2014.

[22] ISO/IEC TR 29110-1:2016, “System and Software Engineering — Lifecycle Profiles 
for Very Small Entities (VSEs) — Part 1: Overview Dependability Management — Part 1: 
Guidance for Management,” 2nd ed., 2016-06.

[23] ISO/IEC TS 33061:2021, “Information technology — Process assessment — Process 
Assessment Model for Software Life Cycle Processes,” 2021-04.

[24] IEEE Std 15288.2:2014, “IEEE Standard for Technical Reviews and Audits on 
Defense Programs.”

[25] A guide to the Project management Body of Knowledge, 7th edition, PMI, 2021, 368p.
