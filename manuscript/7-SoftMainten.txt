# Συντήρηση λογισμικού {#softmaint}


## Ακρωνύμια

|SCM	|Software Configuration Management |
|SLA	|Service-Level Agreement
|SQA	|Software Quality Assurance


## Εισαγωγή

Οι επιτυχημένες προσπάθειες για την ανάπτυξη λογισμικού αποφέρουν ένα
προϊόν λογισμικού που ικανοποιεί τις απαιτήσεις των χρηστών. Όσο αυτές
οι απαιτήσεις και άλλοι παράγοντες αλλάζουν, το προϊόν λογισμικού
πρέπει να εξελίσσεται: Από την στιγμή που το λογισμικό μπαίνει σε
λειτουργία, ελαττώματα αποκαλύπτονται, το περιβάλλον λειτουργίας αλλάζει
και νέες απαιτήσεις χρηστών κάνουν την εμφάνιση τους.
Η φάση συντήρησης του κύκλου ζωής (του λογισμικού) ξεκινάει μετά
από την περίοδο εγγύησης ή μετά την παροχή υποστήριξης της εφαρμογής,
αλλά οι δραστηριότητες συντήρησης ξεκινούν πολύ νωρίτερα.

Η συντήρηση είναι ένα αναπόσπαστο κομμάτι του κύκλου ζωής του λογισμικού.
Παρ’ όλα αυτά δεν έχει δεχθεί την ίδια προσοχή με τις υπόλοιπες δραστηριότητες
τεχνολογίας λογισμικού.
Ιστορικά, η ανάπτυξη λογισμικού έχει πολύ υψηλότερο κύρος, σε σχέση με
την συντήρηση. Αυτή η τάση τείνει να αλλάξει στις μέρες μας, με τους 
περισσότερους οργανισμούς να προσπαθούν να μεγιστοποιήσουν την επένδυση τους 
για ανάπτυξη λογισμικού εξασφαλίζοντας συνεχή ανάπτυξη, συντήρηση και 
λειτουργία, σταδιακά εξαλείφοντας τα οργανωτικά σιλό σε αυτές τις περιοχές.
Η αυξανόμενη αποδοχή των πρακτικών και των εργαλείων των DevOps, έχουν 
επιστήσει περαιτέρω προσοχή στην ανάγκη για συνεχή εξέλιξη του λογισμικού,
ενώ διασφαλίζουν την ομαλή λειτουργία του για να ικανοποιήσουν τους χρήστες, 
οι οποίοι απαιτούν ταχύτερη ανατροπή από τους μηχανικούς λογισμικού από ότι στο
 παρελθόν.

Σε αυτόν τον Οδηγό SWEBOK, η συντήρηση λογισμικού ορίζεται σαν το σύνολο
από τις δραστηριότητες που απαιτούνται για να παρέχουν αποδοτική υποστήριξη
στο λογισμικό σε λειτουργία. Οι δραστηριότητες που υποστηρίζουν τη λειτουργία 
λογισμικού και τη συντήρηση εκτελούνται τόσο πριν όσο και μετά την παράδοση 
του λογισμικού. Οι δραστηριότητες πριν την παράδοση του λογισμικού
περιλαμβάνουν τον σχεδιασμό των μετά την παράδοση δραστηριοτήτων,
την συντηρησιμότητα και τον καθορισμό της λογιστικής υποστήριξης που
χρειάζεται για την μεταβίβαση από την ανάπτυξη στην συντήρηση.
Οι δραστηριότητες μετά την παράδοση περιλαμβάνουν την παρακολούθηση, την 
τροποποίηση, την εκπαίδευση και την εκτέλεση μιας διαδικασίας υποστήριξης ή την
σύνδεση με μια υπάρχουσα.

Το γνωστικό πεδίο Συντήρηση λογισμικού συνδέεται με όλες τις πτυχές
της τεχνολογίας λογισμικού.
Ως εκ τούτου, η περιγραφή αυτού του γνωστικού πεδίου συνδέεται με όλα
τα υπόλοιπα στοιχεία της τεχνολογίας σε αυτόν τον Οδηγό.

## Κατανομή των θεμάτων για την συντήρηση λογισμικού 

{id="fig-softmainten-tree"}
![Σχήμα 1 Κατανομή των θεμάτων στο γνωστικό πεδίο Συντήρηση λογισμικού.](images/7-SoftMainten.png)

Η κατανομή των θεμάτων για τα γνωστικά πεδία της συντήρηση λογισμικού 
απεικονίζεται στο [Σχήμα 1](#fig-softmainten-tree).

## Βασικές αρχές της συντήρησης λογισμικού

Αυτή η ενότητα εισάγει το πλαίσιο και την ορολογία που αποτελούν
την βάση για την κατανόηση του ρόλου και της οπτικής της συντήρησης
λογισμικού. Μεταξύ αυτών των εννοιών υπάρχουν διαφορετικές κατηγορίες της 
συντήρησης λογισμικού. Η εκμάθηση αυτών των κατηγοριών είναι κρίσιμη για την 
κατανόηση του τι περιβάλλει αυτό το γνωστικό πεδίο και γιατί είναι τόσο 
σημαντικό.

###  Ορισμοί και ορολογία

Ο σκοπός της συντήρησης λογισμικού ορίζεται στο διεθνές πρότυπο για
συντήρηση λογισμικού: ISO/IEC/IEEE 14764.
Στο πλαίσιο της τεχνολογίας λογισμικού, η συντήρηση λογισμικού είναι
ουσιαστικά μια εκ των πολλών τεχνικών διεργασιών. Ο στόχος της συντήρησης 
λογισμικού είναι η τροποποίηση του υπάρχοντος λογισμικού με ταυτόχρονη 
διατήρηση της ακεραιότητας του. Το διεθνές πρότυπο επίσης τονίζει την σημασία 
εκτέλεσης κάποιων δραστηριοτήτων συντήρησης, πριν της τελικής παράδοσης 
του λογισμικού (pre-delivery activities). Η συντήρηση λογισμικού μοιράζεται 
γνώση και εργαλεία με την ανάπτυξη λογισμικού και τη λειτουργία λογισμικού 
και επίσης έχει τις δικές της διαδικασίες και τεχνικές.

###  Η φύση της συντήρησης

Η συντήρηση λογισμικού συντηρεί το προϊόν λογισμικού σε όλη τη διάρκεια
του κύκλου ζωής του από την ανάπτυξη, έως την λειτουργία του. Το λογισμικό 
παρακολουθείται για την χωρητικότητα, την συνέχεια και τη διαθεσιμότητα.
Τα αιτήματα τροποποίησης και οι αναφορές περιστατικών ή προβλημάτων 
καταγράφονται και παρακολουθούνται, προσδιορίζεται η επίδραση των προτεινόμενων 
αλλαγών, παραμετροποιείται ο κώδικας και τα άλλα αντικείμενα λογισμικού, 
γίνεται έλεγχος και μια νέα έκδοση του λογισμικού εκδίδεται για λειτουργία.
Επίσης, παρέχεται στους χρήστες εκπαίδευση και συνεχής καθημερινή 
υποστήριξη. Ένας συντηρητής λογισμικού (maintainer) ορίζεται
ως ένας ρόλος ή ένας οργανισμός, ο οποίος εκτελεί δραστηριότητες συντήρησης.
Σε αυτό το γνωστικό πεδίο ο όρος κάποιες φορές θα αναφέρεται σε άτομα
που εκτελούν αυτές τις δραστηριότητες, για να αντιπαραβάλλουν το ρόλο τους με 
τον ρόλο του προγραμματιστή.

Οι συντηρητές μπορούν να «μάθουν» από τις γνώσεις των προγραμματιστών και των 
χειριστών για το λογισμικό. Η επαφή με τους προγραμματιστές και η εμπλοκή
των συντηρητών από νωρίς μπορεί να μειώσει τη συνολική προσπάθεια και τα 
έξοδα συντήρησης. Μία επιπρόσθετη πρόκληση δημιουργείται όταν οι συντηρητές 
προσχωρούν στο έργο αφού οι αρχικοί προγραμματιστές έχουν φύγει ή δεν 
είναι πλέον διαθέσιμοι. Οι συντηρητές πρέπει να κατανοούν και να χρησιμοποιούν 
στοιχεία λογισμικού από την ανάπτυξη (π.χ. κώδικα, δοκιμές ή τεκμηρίωση), 
να τα υποστηρίζει άμεσα, και  έπειτα να τα εξελίσσει και να τα διατηρεί 
σταδιακά με την πάροδο του χρόνου.

###  Ανάγκη για συντήρηση


Η συντήρηση λογισμικού είναι απαραίτητη για να διασφαλίζεται ότι το λογισμικό
συνεχίζει να ικανοποιεί τις απαιτήσεις του χρήστη καθ'όλη τη διάρκεια 
ζωής του.Η συντήρηση είναι απαραίτητη ανεξαρτήτως από τον τύπο μοντέλου
κύκλου ζωής λογισμικού που χρησιμοποιείται για την αναπτυξή του (π.χ. καταρράκτη 
ή ευέλικτου). Τα προϊόντα λογισμικού αλλάζουν ως αποτέλεσμα τόσο διορθωτικών, 
όσο και μη διορθωτικών δράσεων. Η συντήρηση λογισμικού συνήθως 
πραγματοποιείται ώστε να επιτυγχάνεται:
  * η διόρθωση λαθών και κρυμμένων ελλατώματα,
  * η βελτίωση του σχεδιασμού ή της απόδοσης του λειτουργικού λογισμικού,
  * η εφαρμογή ενισχύσεων,
  * η αλληλεπίδραση με άλλο λογισμικό,
  * η βοήθεια των χρηστών να κατανοήσουν τη λειτουργικότητα του λογισμικού,
  * η προσαρμογή σε αλλαγές σε διεπαφή συστήματα ή υποδομές,
  * η αποτροπή απειλών στην ασφάλεια,
  * η αποκατάσταση της τεχνικής απαξίωσης στοιχείων συστήματος ή λογισμικού
  * η απόσυρση του λογισμικού.

### Η πλειοψηφία του κόστους συντήρησης

Είναι γενικά αποδεκτό ότι το σχετικό κόστος της διόρθωσης σφαλμάτων
αυξάνεται σε μεταγενέστερα στάδια του κύκλου ζωής του λογισμικού. Η συντήρηση 
επίσης, καταναλώνει ένα μεγάλο μερίδιο από τους συνολικούς οικονομικούς 
πόρους που αποδίδονται στη διάρκεια ζωής του λογισμικού. Μια συχνή αντίληψη 
για την συντήρηση λογισμικού είναι ότι κυρίως διορθώνει λάθη. Παρ’ όλα 
αυτά μελέτες και έρευνες τα τελευταία χρόνια έχουν δείξει ότι η περισσότερη 
συντήρηση λογισμικού -- πάνω από το 80% -- χρησιμοποιείται για τη 
βελτίωση και την προσαρμογή λογισμικού. Η ομαδοποίηση βελτιώσεων και 
διορθώσεων στις αναφορές διοίκησης συμβάλλει στην παρανόηση ότι οι 
διορθώσει κοστίζουν παραπάνω απ'ότι κάνουν πραγματικά. Η κατανόηση των 
κατηγοριών της συντήρησης μας βοηθάει στο να γίνει αντιληπτή η δομή του 
κόστους της συντήρησης λογισμικού -- εκεί είναι που πάνε οι περισσότερες 
από τις δαπάνες.  Επίσης, η κατανόηση των παραγόντων που επηρεάζουν την 
συντηρησιμότητα του λογισμικού μπορεί να βοηθήσει τους οργανισμούς στο να 
περιορίσουν το κόστος. Οι περιβαλλοντικοί παράγοντες που επηρεάζουν το 
κόστος συντήρησης λογισμικού περιλαμβάνουν τα εξής:

  * το λειτουργικό περιβάλλον (το υλικό και το λογισμικό)
  * το οργανωσιακό περιβάλλον (οι πολιτικές, ο ανταγωνισμός,η διεργασία,
  το προϊόν και το προσωπικό)

### Η εξέλιξη του λογισμικού

Η συντήρηση λογισμικού σαν δραστηριότητα που υποστηρίζει την εξέλιξη 
λογισμικού αναφέρθηκε για πρώτη φορά στα τέλη της δεκαετίας του 1960. Η 
έρευνα, από τον Lehman και άλλους, σε μία περίοδο είκοσι χρόνων οδήγησε 
στην διατύπωση των οκτώ Νόμων της Εξέλιξης Λογισμικού:
* Συνεχής Αλλαγή -- Το λογισμικό πρέπει συνέχεια να εξελίσσεται, ή 
γίνεται όλοι και λιγότερο ικανοποιητικό.
* Αυξανόμενη Πολυπλοκότητα -- Όπως εξελίσσεται το λογισμικό, η 
πολυπλοκότητα του αυξάνεται εκτός κι αν γίνουν ενέργειες για την 
διατήρηση ή μείωση αυτής της πολυπλοκότητας.
* Αυτορρύθμιση -- Η Διαδικασία εξέλιξης του προγράμματος είναι αυτορρυθμιζόμενη 
με σχεδόν κανονική κατανομή από μετρήσεις χαρακτηριστικών του προϊόντος 
και της διαδικασίας.
* Αμετάβλητο Ποσοστό Εργασίας -- Ο μέσος όρος αποτελεσματικού παγκόσμιου 
ποσοστού δραστηριότητας σε ένα εξελισσόμενο πακέτο  λογισμικού είναι αμετάβλητο 
στην διάρκεια ζωή του προϊόντος.
* Διατήρηση της Οικειότητας -- Όπως εξελίσσεται το λογισμικό, όλα όσα 
συσχετίζονται με αυτό (π.χ. προγραμματιστές, προσωπικό πωλήσεων και χρήστες) 
πρέπει να διατηρήσουν την κυριαρχία τους στο περιεχόμενο και στη 
συμπριφορά του για να επιτύχουν ικανοποιητική ανάπτυξη. Η υπερβολική 
ανάπτυξη μειώνει αυτή την κυριαρχία. Ως εκ τούτου, η μέση σταδιακή 
ανάπτυξη παραμένει αμετάβλητη όσο εξελίσσεται το σύστημα.
* Συνεχής Ανάπτυξη -- Το λειτουργικό περιεχόμενο ενός προγράμματος πρέπει 
συνεχώς να αυξάνεται για να διατηρεί την ικανοποίηση χρήστη στη διάρκεια ζωής 
του.
* Πτώση Ποιότητας -- Η ποιότητα του λογισμικού θα φαίνεται να μειώνεται 
εκτός αν συτηρείται αυστηρά και προσαρμόζεται στις αλλαγές του λειτουργικού 
περιβάλλοντος.
* Σύστημα Ανατροφοδότησης -- Οι διαδικασίες εξέλιξης του λογισμικού αποτελούν 
πολυεπίπεδα, πολλαπλών βρόχων και πολλαπλών πρακτόρων συστήματα ανατροφοδότησης
και πρέπει να αντιμετωπίζονται σαν τέτοια για να καταφέρουν σημαντική 
βελτίωση σε κάθε λογική βάση (με άλλα λόγια, η διαδικασία συντήρησης 
είναι παρόμοια με μια ευέλικτη διαδικασία).

Ένα από τα πιο σημαντικά ευρήματα της έρευνας του Lehman ήταν, ότι η συντήρηση 
είναι 
εξελικτική ανάπτυξη και ότι οι αποφάσεις συντήρησης διευκολύνονται με 
μια κατανόηση του τι συμβαίνει στο λογισμικό με την πάροδο του 
χρόνου. Ένας άλλος τρόπος να σκεφτόμαστε την συντήρηση είναι ως μια 
συνεχή ανάπτυξη που φιλοξενεί επιπλέον εισόδους (ή περιορισμούς)- με 
άλλα λόγια, μεγάλα λογισμικά προγράμματα δεν είναι ποτέ ολοκληρωμένο και 
συνεχίζει να εξελίσσεται. Όσο εξελίσσονται γίνονται πιο περίπλοκα εκτός και 
εάν γίνει κάποια δράση για να μειωθεί η πολυπλοκότητα του. 

### Κατηγορίες συντήρησης


Έχουν καθιερωθεί πέντε κατηγορίες (τύποι) συντήρησης για να ταξινομηθεί ένα 
αίτημα συντήρησης: διορθωτική (corrective), προληπτική (preventive), 
προσαρμοστική (adaptive), προσθετική (additive) και βελτιωτική (perfective).
Το πρότυπο ISO/IEC/IEEE 14764 [1], επαναπανασυγκροτεί αυτές τις κατηγορίες 
συντήρησης ως είτε διορθώσεις, ή βελτιώσεις, όπως φαίνεται στην εικόνα 2.
Το πρότυπο ISO/IEC/IEEE 14764 [1] επίσης ορίζει μια έκτη κατηγορία -- έκτακτη
συντήρηση:
  * Διορθωτική συντήρηση: η διαδραστική τροποποίηση ή διόρθωση ενός
  προϊόντος λογισμικού, που εκτελείται μετά την παράδοση με σκοπό να
  διορθώσει προβλήματα που εντοπίστηκαν.
  * Προληπτική συντήρηση: η τροποποίηση του προϊόντος λογισμικού μετά την 
  παράδοση για να διορθωθούν κρυμμένα λάθη στο προϊόν λογισμικού πριν συμβούν
   στο ζωντανό σύστημα.
  * Προσαρμοστική συντήρηση: η τροποποίηση ενός προϊόντος λογισμικού,
  που εκτελείται μετά την παράδοση του με σκοπό να το διατηρήσει λειτουργικό
  σε περιβάλλον που μεταβάλλεται ή έχει μεταβληθεί. Η προσαρμοστική συντήρηση 
  παρέχει βελτιώσεις απαραίτητες για να φιλοξενήσει τις αλλαγές στο περιβάλλον 
  στο οποίο το προϊόν λογισμικού λειτουργεί (π.χ. μια αναβάθμιση στο λειτουργικό 
  σύστημα  οδηγεί σε αλλαγές στις εφαρμογές).
  * Προσθετική συντήρηση: η τροποποίηση ενός προϊόντος λογισμικού που εκτελείται
  μετά την παράδοση για να προσθέσει λειτουργικότητα ή χαρακτηριστικά για να 
  βελτιώσει τη χρησιμότητα του προϊόντος. Η προσθετική συντήρηση διαφέρει από
  την βελτιωτική συντήρηση σε α) παρέχει επιπλέον νέες λειτουργίες ή 
  χαρακτηριστικά για την βελτίωση της χρησιμότητας λογισμικού, απόδοσης, 
  συντηρισημότητας ή άλλα χαρακτηριστικά ποιότητας λογισμικού και β) προσθέτει
  λειτουργικότητα ή χαρακτηριστικά με σχετικά μεγάλες προσθήκες ή αλλαγές για 
  τη βελτίωση των γνωρισμάτων λογισμικού μετά την παράδοση.
  * Βελτιωτική συντήρηση: η τροποποίηση ενός προϊόντος λογισμικού μετά
  την παράδοση του με σκοπό να παρέχει βελτιώσεις στους χρήστες, βελτιώσεις
  στην τεκμηρίωση του και βελτίωση του κώδικα ώστε να βελτιωθούν οι
  επιδόσεις, συντηρησιμότητα ή άλλα χαρακτηριστικά λογισμικού.
  * Έκτακτη συντήρηση: Μη προγραμματισμένη τροποποίηση που πραγματοποιείται 
  για να κρατησει ένα σύστημα λειτουργικό προσωρινά, ενώ εκκρεμεί διορθωτική 
  συντήρηση. 


## Βασικά ζητήματα συντήρησης λογισμικού

Ένα σύνολο ζητημάτων πρέπει να τεθούν υπό διαχείριση, ώστε η συντήρηση 
λογισμικούνα είναι αποτελεσματική. Η συντήρηση λογισμικού αναδεικνύει 
ιδιαίτερες τεχνικές και διοικητικές προκλήσεις, για τους μηχανικούς λογισμικού 
(π.χ. η πρόκληση του να προσπαθούν να βρουν το λάθος σε μεγάλο περίπλοκο 
λογισμικό που έχει συγγραφεί από κάποιον άλλο). 

Ομοίως, σε μία ευέλικτη ρύθμιση, οι συντηρητές και οι προγραμματιστές προσπαθούν
συνεχώς να βεβαιωθούν ότι οι πελάτες βλέπουν την αξία στο τέλος κάθε επανάληψης, 
ώστε οι δραστηριότητες συντήρησης ανταγωνίζονται με την ανάπτυξη νέων 
χαρακτηριστικών για έγκριση από τον πελάτη. Ο σχεδιασμόςμιας μελλοντικής 
έκδοσης, που συχνά συμπίπτει με την εφαρμογή έκτακτων διορθώσεων για την τωρινή,
μπορεί επίσης να αποβεί μια πρόκληση στη ζυγοστάθμιση των έργων συντήρησης και 
ανάπτυξης. Η ενότητα που ακολουθεί παρουσιάζει τεχνικά και διοικητικά ζητήματα, 
που σχετίζονται με την συντήρηση λογισμικού.
Έχουν ομαδοποιηθεί βάσει των παρακάτω θεμάτων:

  * Τεχνικά ζητήματα
  * Διοικητικά ζητήματα
  * Κόστος συντήρησης
  * Μετρικές συντήρησης.

### Τεχνικά ζητήματα

#### Περιορισμένη κατανόηση

Η περιορισμένη κατανόηση περιγράφει την αρχική κατανόηση ενός μηχανικού 
λογισμικού πάνω σε λογισμικό που έχει δημιουργήσει κάποιος άλλος. Αυτό 
απεικονίζεται στο πόσο γρήγορα ένας μηχανικός λογισμικού μπορεί να καταλάβει που 
να αλλάξει ή να διορθώσει το λογισμικό. αναφέρεται στο πόσο γρήγορα ένας 
μηχανικός λογισμικού μπορεί να καταλάβει, που να κάνει αλλαγή ή διόρθωση σε ένα
λογισμικό που δεν έχει αναπτύξει ο ίδιος. Έρευνες δείχνουν ότι τουλάχιστον
η μισή από την συνολική προσπάθεια που καταβάλλεται για την συντήρηση
λογισμικού, δαπανάται στην κατανόηση του. Έτσι, φυσικά το θέμα της κατανόησης
λογισμικού φέρει μεγάλο ενδιαφέρον για τους μηχανικούς λογισμικού. Ένας αριθμός 
από παράγοντες κατανόησης έχουν αναγνωριστεί: 1) τομέας γνώσης, 2) πρακτικές 
προγραμματισμού (π.χ. ζητήματα εφαρμογής), 3) τεκμηρίωση, και 4) θέματα 
οργάνωσης και παρουσίασης. Η κατανόηση είναι πιο δύσκολή σε μια απεικόνιση μέσω 
κειμένου (π.χ. στον πηγαίο κώδικα), όπου είναι συχνά δύσκολο να παρακολουθήσεις
την εξέλιξη του λογισμικού μέσα από τις διάφορες εκδόσεις ή εκδοχές, αν οι
αλλαγές δεν έχουν τεκμηριωθεί και οι προγραμματιστές δεν είναι διαθέσιμοι για 
να τις εξηγήσουν.
Ως εκ τούτου, οι μηχανικοί λογισμικού αρχικά κατανοούν εν μέρει μόνο το 
λογισμικό και πρέπει επομένως να γίνουν πολλά από τους μηχανικούς λογισμικού για 
τον περιορισμό του φαινομένου αυτού. Πολλές τεχνικές μπορούν να βοηθήσουν τους 
μηχανικούς να καταλάβουν το υπάρχον λογισμικό, όπως η απεικόνιση και η 
αντίστροφη μηχανική χρησιμοποιώντας βασισμένη στα εργαλεία γραφικές 
αναπαραστάσεις του κώδικα.

#### Έλεγχος

Ο προγραμματισμός ελέγχου και οι δραστηριότητες συμβαίνουν κατά τη διάρκεια 
επεξεργασίας των αιτημάτων τροποποίησης(ΑΤ) και των αναφορών προβλημάτων(ΑΑ). 
Το κόστος, τόσο σε όρους χρήματος, όσο και χρόνου, του επαναληπτικού ελέγχου
σε μεγάλο μέρος του λογισμικό είναι αρκετά σημαντικό. Ο συντηρητής πρέπει να 
αναπαράγει και να επαληθεύει τις αλλαγές προγραμματίζοντας και τρέχοντας τις
κατάλληλες δοκιμές -π.χ. η παλινδρομική δοκιμή είναι σημαντική για την 
συντήρηση-, ώστε να διασφαλίσει ότι οι αναφορές προβλημάτων είναι έγκυρες. Ο 
έλεγχος παλινδρόμησης είναι η επιλεκτική δοκιμή του λογισμικού ή τμήματος του 
για να επαληθευτεί ότι οι τροποποιήσεις δεν έχουν απρόβλεπτα αποτελέσματα. Μια 
ακόμη πρόκληση είναι η εύρεση χρόνου για την διεξαγωγή όσο περισσότερου ελέγχου 
γίνεται. Όταν διαφορετικά μέλη της ομάδας συντήρησης δουλεύουν πάνω σε 
διαφορετικά προβλήματα, ο συντονισμός μιας δοκιμής μπορεί να αποτελέσει πρόκληση. 
Να αποσυνδέεις το λογισμικό για να το ελέγχεις μπορεί να φανεί δύσκολο αν το 
λογισμικό εκτελεί κρίσιμες λειτουργίες. Το γνωστικό πεδίο Έλεγχος λογισμικού 
παρέχει επιπλέον πληροφορίες και αναφορές στον έλεγχο λογισμικού και στην 
υπόπαράγραφο του Ελέγχου παλινδρόμησης.

#### Ανάλυση επίδρασης {#impact-analysis}

Η ανάλυση επίδρασης είναι μια ολόκληρωμένη ανάλυση για την επίδραση μίας 
προτεινόμενης αλλαγής στο υπάρχον λογισμικό. Οι συντηρητές χρειάζονται λεπτομερή 
γνώση της δομής του λογισμικού και του περιεχομένου. Χρησιμοποιούν αυτή τη 
πληροφορία για να εκτελέσουν την ανάλυση επίδρασης, που εντοπίζει όλα τα 
συστήματα και τα προϊόντα λογισμικού, που θα επηρεαστούν από την αίτηση αλλαγής 
λογισμικού και παρουσιάζει μια εκτίμηση για τους απαιτούμενους πόρους για την 
επίτευξη αυτής της αλλαγής. Η ανάλυση καθορίζει επίσης το ρίσκο που περιέχεται 
στην υλοποίηση της αλλαγής. Το αίτημα αλλαγής, που μερικές φορές αναφέρεται ως 
αίτημα τροποποίησης και συχνά ως Αναφορά προβλήματος, πρέπει αρχικά να αναλυθεί
και να μεταφραστεί σε όρους λογισμικού. Η ανάλυση επίδρασης πραγματοποιείται
αφού το αίτημα αλλαγής μπει στη διαδικασία διαχείρισης σχηματισμών λογισμικού.
Το ISO/IEC/IEEE 14764 [1] αναφέρει ότι οι εργασίες για την ανάλυση επίδρασης 
κάνουν τα εξής:

  * Αναπτύσσουν ένα σχέδιο αναγνώρισης για Αιτήματα τροποποίησης/Αναφορές 
  προβλήματος,
  * Αναπτύσσουν ένα σχέδιο αναγνώρισης για κατηγοριοποίηση και δίνοντας 
  προτεραιότητα στα Αιτήματα τροποποίησης/Αναφορές προβλήματος,
  * Καθορίζουν τις διαδικασίες για έναν χειριστή ναι υποβάλλει Αιτήματα 
  τροποποίησης/Αναφορές προβλήματος,
  * Αναγνωρίζουν τις ανάγκες και τα ζητήματα πληροφόρησης που πρέπει να 
  παρακολουθούνται και να αναφέρονται στους χρήστες και προσδιορίζουν τις 
  μετρήσεις που παρέχουν σχόλια σχετικά με αυτές τις ανάγκες και και τα 
  ζητήματα,
  * Καθορίζουν πως τρόποι υλοποίησης θα παρέχονται προσωρινά στους χειριστές,
  * Παρακολουθούν τις εργασίες μέχρι την αφαίρεση,
  * Καθορίζουν την ακόλουθη ανατροφοδότηση που παρέχεται στους χρήστες.

Οι συντηρητές λογισμικού συχνά χρησιμοποιούν τη σοβαρότητα ενός προβλήματος σαν 
οδηγό όταν αποφασίζουν το πώς και πότε θα διορθωθεί ένα πρόβλημα. Έπειτα ο 
συντηρητής εντοπίζει ποια εξαρτήματα του λογισμικού επηρεάζονται, αναπτύσσουν 
διάφορες πιθανές λύσεις και τελικά, προτείνουν ένα σχέδιο δράσης.

Αναλύσεις επιπτώσεων των προτεινόμενων αλλαγών συντήρησης συχνά λαμβάνουν υπόψη 
διάφορους παράγοντες, όπως την κατηγορία δράσης, το μέγεθος της τροποποίησης, 
το εμπεριεχόμενο κόστος, και οποιαδήποτε επίπτωση στην απόδοση και στην 
ασφάλεια. Το λογισμικό που έχει σχεδιαστεί λαμβάνοντας υπόψη την δυνατότητα
συντήρησης διευκολύνει κατά πολύ την ανάλυση επίδρασης.
Περισσότερες πληροφορίες μπορούν να βρεθούν στο γνωστικό πεδίο Διαχείριση
σχηματισμών λογισμικού.

#### Συντηρησιμότητα

Το ISO/IEC/IEEE 14764 [1] ορίζει την συντηρησιμότητα ως την ικανότητα του 
προϊόντος λογισμικού να τροποποιείται.
Τροποποιήσεις μπορεί να περιλαμβάνουν διορθώσεις, βελτιώσεις ή προσαρμογές
του λογισμικού στις αλλαγές του περιβάλλοντος, καθώς και σε αλλαγές
στις προδιαγραφές απαιτήσεων και στις λειτουργικές προδιαγραφές.

Ως ένα σημαντικό χαρακτηριστικό της ποιότητας του λογισμικού, η συντηρησιμότητα 
πρέπει να έχει προσδιοριστεί, αξιολογηθεί και ελεγχθεί στη διάρκεια
της ανάπτυξης του λογισμικού ώστε να μειωθεί το κόστος συντήρησης.
Όταν αυτές οι δραστηριότητες διεξάγονται επιτυχώς, η συντηρησιμότητα του 
λογισμικού θα οφεληθεί. Η συντηρησιμότητα είναι συχνά δύσκολο να επιτευχθεί 
γιατί δεν λαμβάνεται συχνά αρχικά υπόψη στην διάρκεια της ανάπτυξης. Οι 
προγραμματιστές είναι συνήθως πιο συγκεντρωμένοι σε άλλες δραστηριότητες και 
μπορεί να μην δώσουν αρκετή σημασία στις απαιτήσεις συντήρησης. Αυτό μπορεί να 
οδηγήσει σε κακή αρχιτεκτονική, έλλειψη  τεκμηρίωσης ή περιβάλλοντων ελέγχου 
λογισμικού, που είναι κάποιοι από τους κύριους λόγους για την δυσκολία 
κατανόησης του προγράμματος και την ανεπαρκή ανάλυση επίδρασης κατά τη διάρκεια 
της συντήρησης. Η παρουσία συστηματικών και ώριμων διαδικασιών, τεχνικών και 
εργαλείων, βοηθάει στην βελτίωση της συντηρησιμότητας του λογισμικού.

Η διακυβευμένη δυνατότητα συντήρησης λογισμικού συνήθως αυξάνει το βάρος των 
μηχανικών λογισμικού που το διατηρούν στο μέλλον. Με άλλλα λόγια δημιουργεί 
τεχνικό χρέος. Τεχνικό χρέος συνήθως επικρατεί όταν οι μηχανικοί λογισμικού 
επιδιώκουν να λήξουν εργασίες ανάπτυξης ή συντήρησης πριν εξεταστούν διεξοδικά 
από ομότιμους. Αυτή η πρακτική γενικά δημιουργεί ένα τεχνικό κόστος που θα 
απαιτήσει επιπλέον χρόνο και προσπάθεια για να αντιμετωπιστούν κατά τη 
συντήρηση. Ειδικά, οι μηχανικοί λογισμικού πρέπει να διερευνήσουν τρείς περιοχές 
σε βάθος όταν αναφέρονται σε τεχνικό χρέος:
  1. Ποιότητα κώδικα έναντι συνάφειας: Δεν είναι όλα τα τεχνικά χρέη επείγοντα.
  2. Ευθυγράμμιση με οργανωσιακούς στόχους: Η αρχιτεκτονική λογισμικού πρέπει 
  να αντικατοπτρίζει τους στόχους του οργανισμού.
  3. Απώλεια διαδικασίας: Εξασφάλιση συμπληρωματικών δεξιοτήτων των μηχανικών 
  λογισμικού που εμπλέκονται.

### Διοικητικά ζητήματα


#### Ευθυγράμμιση με τους οργανωσιακούς στόχους

Αυτή η ενότητα περιγράφει πως να βελτιστοποιηθούν δραστηριότητες και οικονομικά 
συντήρησης λογισμικού για να ευθυγραμμιστούν με τους οργανωτικούς στόχους και 
προτεραιότητες της επιχείρησης, των πελατών και των χρηστών.

Σε πολλούς οργανισμούς η αρχική ανάπτυξη λογισμικού είναι
βασισμένη σε έργα (projects) με καθορισμένο χρόνο και κόστος. Ο
κύριος στόχος είναι η παράδοση ενός προϊόντος που ανταποκρίνεται στις
ανάγκες των χρηστών, χωρίς επιπλέον κόστος, και στην ώρα του. Αντίθετα,
η συντήρηση λογισμικού έχει ως στόχο την παράταση της ζωής του
λογισμικού και την διατήρησης της λειτουργικότητάς του για όσο το δυνατόν 
περισσότερο. Μπορεί επίσης να εκτελείται για να ικανοποιήσει τις απαιτήσεις των 
χρηστών για βελτιώσεις και αναβαθμίσεις λογισμικού.

Και στις δύο περιπτώσεις, τα οικονομικά της συντήρησης λογισμικού δεν είναι 
τόσο προφανή όσο αυτά της ανάπτυξης λογισμικού. Σε οργανωτικό επίπεδο, μπορεί 
να φανεί ώς μια δραστηριότητα που καταναλώνει σημαντικούς πόρους χωρίς ξεκάθαρο
μετρήσιμο όφελος για τον οργανισμό. Κατά συνέπεια, δίνεται μεγαλύτερη βαρύτητα 
στην προσθήκη νέων χαρακτηριστικών παρά σε άλλες δραστηριότητες συντήρησης 
(όπως η ανακατασκευή, η ασφάλεια ή η βελτίωση της απόδοσης) ώστε να επιτευχθούν
οι σκοποί και οι στόχοι των πελατών λογισμικού, όπως επίσης και οι περιορισμοί 
χρόνοι και προϋπολογισμού. Ωστόσο, τέτοιοι οργανωτικοί στόχοι και περιορισμοί 
πρέπει να εξισοροοπούνται με τη συντήρηση λογιμικού και τα μηχανολογικά πρότυπα, 
ώστε να αποφευχθεί η αποσύνθεση του κώδικα και τεχνικά χρέη. 

Η εφαρμογή προσεγγίσεων διαχείρισης προϊόντος στη διαχείριση της ανάπτυξης και 
συντήρησης λογισμικού μπορεί να βοήθησει τους οργανισμούς:
  * Στην κατανόηση του συνολικού κόστους του λειτουργικού λογισμικού στη 
  διάρκεια όλης της ζωής του
  * Στην σύγκριση κόστους και πλεονεκτημάτων της ανάπτυξης νέου λογισμικού 
  έναντι της ενίσχυσης ήδη υπάρχοντος λογισμικού
  * Στην επίλυση ζητημάτων προσωπικού και και δεξιοτήτητων, αφού η ίδια ομάδα 
  είναι υπεύθυνη για τη συντήρηση και την ανάπτυξη
  * Στην εστίαση στις απαιτήσεις συντηρησιμότητας από την αρχή, καθώς η ίδια 
  ομάδα έχει ευθύνη τόσο για την ανάπτυξη όσο και για την συντήρηση.

#### Στελέχωση

Καθώς η συντήρηση χρειάζεται λεπτομερή γνώση λογισμικού, οι οργανισμοί πρέπει 
να είναι ενήμεροι για την ανάγκη να προσελκύουν και να διατηρούν προσωπικό για 
την συντήρηση λογισμικού. Έφόσον η ενασχόληση μόνο με την συντήρηση μπορεί να 
θεωρηθεί λιγότερο ενδιαφέρουσα, οι συντηρητές λογισμικού μπορεί να νιώσουν σαν 
"πολίτες δεύτερης κλάσης", και ηθικά μπορεί να υποφέρει ως αποτέλεσμα, 
οδηγώντας σε φτωχή απόδοση ή υψηλή εναλλαγή προσωπικού. Οι οργανισμοί πρέπει 
να σχεδιάσουν της ομάδες και τους ρόλους ανάπτυξης και συντήρησης προσεκτικά 
και να προσφέρουν επαγγελματικές ευκαιρίες ανάπτυξης για το προσωπικό.

#### Διεργασία

Ο κύκλος ζωής λογισμικού είναι μια σειρά από δραστηριότητες, μεθόδους,
πρακτικές και μετατροπές που χρησιμοποιούνται για την ανάπτυξη και
την συντήρηση του λογισμικού και των σχετικών προϊόντων. Σε επίπεδο
διαδικασίας οι δραστηριότητες συντήρησης λογισμικού μοιράζονται πολλά
κοινά με την ανάπτυξη λογισμικού (π.χ. η διαχείριση σχηματισμών
λογισμικού (ΔΣΛ) είναι σημαντική και για τις δύο. Η συντήρηση απαιτεί  ωστόσο
αρκετές δραστηριότητες που δεν εντοπίζονται στην ανάπτυξη λογισμικού
(βλ. παράγραφο [Μοναδικές δραστηριότητες](#uniq-activities)).

#### Διαχείριση προμηθευτών

Η διαχείριση προμηθευτή διασφαλίζει ότι οι προμηθευτές της επιχείρησης και οι 
επιδόσεις τους διαχειρίζονται κατάλληλα για να υποστηρίξουν την απρόσκοπτη 
παροχή ποιότητας προϊόντος και υπηρεσιών όταν οι συντήρηση σθμβδίζει με τους 
προμηθευτές. Η φύση της σχέσης του οργανισμού με τους προμηθευτές και η 
προσέγγισή της στη διαχείριση προμηθευτών πρέπει να καθορίζεται από τη φύση 
αυτών αυτών των προϊόντων και υπηρεσιών. Οι εργολάβοι μπορούν να 
προσλαμβάνονται για την εκτέλεση εργασιών συντήρησης και την εξωτερική ανάθεση 
και εξωχώρηση συντήρησης λογισμικού είναι μια σημαντική βιομηχανία. Η εξωτερική 
ανάθεση συντήρησης σημαίνει αντικατάσταση εσωτερικής δυνατότητας με δυνατότητα 
εξωτερικών προμηθευτών. Προσεγγίσεις στις συμβάσεις συντήρησης περιλαμβάνει τα 
ακόλουθα:
* Ατομική πηγή ή συνεργασία: Ένας προμηθευτής παρέχει όλες τις υπηρεσίες, ή 
ένας εξωτερικός ενοποιητής υπηρεσίας διαχειρίζεται την σχέση του οργανισμού με 
όλους τους προμηθευτές.
* Πολλαπλοί προμηθευτές: Τα προϊόντα και οι υπηρεσίες παρέχονται από 
περισσότερες από έναν ανεξάρτητους προμηθευτές. Αυτά συνδυάζονται σε μία 
ενιαία (ενεργοποιημένο μέσω λογισμικού) υπηρεσία. Οι πολλαπλοί προμηθευτές στις 
υπηρεσίες λογισμικού είναι ολοένα αυξανόμενα κοινές, επιτρέπονται από την 
ανάπτυξη του "οτιδήποτε σαν υπηρεσία" (Χοσυ) διεπαφές προγραμματισμού εφαρμογών 
(ΔΠΕ), και πηγές δεδομένων.

Πολλοί οργανισμοί αναθέτουν εξωτερικά ολόκληρα χαρτοφυλάκια λογισμικών. 
Τυπικά, αυτά τα χαρτοφυλάκια περιλαμβάνουν λογισμικό λογισμικό που δεν είναι 
κρίσιμης σημασίας, αφού οι οργανισμοί δεν θέλουν να χάνουν τον έλεγχο του 
λογισμικού που χρησιμοποιούνται στην βασική επιχείρηση. Μια σημαντική 
πρόκληση για τους εξωτερικούς συνεργάτες είναι ο καθορισμός του πεδίου 
εφαρμογής της υπηρεσίας συντήρησης που απαιτείται, τους όρους της συμφωνίας 
υπηρεσίας-επιπέδου (ΣΥΕ), και οι λεπτομέρειες σύμβασης. Οι εξωτερικοί 
συνεργάτες πρέπει να επενδύουν σε υποδομές καλής επικοινωνίας και ένα 
αποτελεσματικό γραφείο βοήθειας στελεχωμένο με ανθρώπους που μπορούν να 
επικοινωνήσουν αποτελεσματικά με πελάτες και χρήστες. Η εξωτερική ανάθεση 
απαιτεί σημαντική αρχική επένδυση και την εγκατάσταση και την ανασκόπηση των 
διαδικασιών συντήρησης λογισμικού που απαιτούν αυτοματοποίηση.

#### Οργανωσιακές πτυχές της συντήρησης

Οι οργανωσιακές πτυχές της συντήρησης περιέχουν τον καθορισμό των ομάδων που θα 
είναι υπεύθυνες για τη συντήρηση λογισμικού. Όταν χρησιμοποιούμε ευκίνητα 
μοντέλα κύκλου ζωής, ο προγραμματιστής διεξάγει επίσης διαδικασίες συντήρησης, 
συμπεριφερόμενος ως προγραμματιστής και συντηρητής. Άλλοι οργανισμοί προτιμούν
η ομάδα που αναπτύσσει το λογισμικό δεν το συντηρεί απαραίτητα όταν είναι 
λειτουργικό. Στην απόφαση του που θα τοποθετηθεί η λειτουργία της συντήρησης 
λογισμικού, πρέπει να αναρωτηθούν τα θετικά και τα αρνητικά κάθε εναλλακτικής. 
Υπάρχουν ορισμένα μειονεκτήματα στο να συντηρεί ο προγραμματιστής το λογισμικό 
αφού τεθεί στην παραγωγή, όπως ο κίνδυνος ότι η νέα ανάπτυξη θα διαταράσσεται 
όταν οι προγραμματιστές πρέπει να παρευρεθούν σε αποτυχίες και η πιθανή απώλεια
γνώσης όταν οι προγραμματιστές εγκαταλείπουν την οργανισμό, δεδομένου ότι 
λιγότερα άτομα είναι εξοικειωμένα με το λογισμικό- αυτό θα μπορούσε επίσης να
να οδηγήσει σε χαμηλότερης ποιότητας τεκμηρίωση, καθώς λιγότερα άτομα 
εμπλέκονται. Ωστόσο, η ύπαρξη χωριστής λειτουργίας συντήρησης έχει τις 
προκλήσεις της, καθώς σε πολλούς μηχανικούς λογισμικού δεν αρέσει να 
περιορίζουν την εργασία τους στην συντήρησης και μπορεί να είναι πιο πιθανό να 
εγκαταλείψουν για μια πιο ενδιαφέρουσα εργασία. Επιπλέον, μια διαδικασία 
παράδοσης πρέπει να τεθεί σε εφαρμογή μεταξύ προγραμματιστών και συντηρητών, η 
οποία μερικές φορές οδηγεί σε τριβές μεταξύ των ομάδων [3]. Η εισαγωγή των 
διαδικασιών διαχείρισης προϊόντων έχει ενθαρρύνει την προσέγγιση δημιουργίας 
μιας ενιαίας ομάδας, ιδίως για την ανάπτυξη και συντήρησης λογισμικού που 
πρέπει να ανταποκρίνεται γρήγορα σε αλλαγές στις ανάγκες πελατών και χρηστών. 
Επειδή υπάρχουν πολλά πλεονεκτήματα και μειονεκτήματα σε κάθε επιλογή, η 
απόφαση θα πρέπει να ληφθεί για κάθε περίπτωση ξεχωριστά. Αυτό που είναι 
σημαντικό είναι ότι ο οργανισμός αναθέτει την καθήκοντα συντήρησης σε μια 
έμπειρη ομάδα ή άτομο και να τηρεί ποιοτική τεκμηρίωση σχετικά με τις εργασίες 
συντήρησης και όλες τις αλλαγές που γίνονται σε στο λογισμικό, ανεξάρτητα από 
τις δομή του οργανισμού.


### Κόστος συντήρησης λογισμικού {#soft-maint-costs}

Οι μηχανικοί λογισμικού πρέπει να κατανοήσουν τις διάφορες κατηγορίες 
συντήρησης λογισμικού που περιγράφονται στο 1.6. Η παρουσίαση των τάσεων του 
κόστους ανά κατηγορίες συντήρησης μπορεί να δείξει στους πελάτες πού δαπανάται 
η προσπάθεια συντήρησης για κάθε υποστηριζόμενο σύστημα [7]. Τα δεδομένα 
σχετικά με προσπάθεια συντήρησης ανά κατηγορία μπορούν επίσης να 
χρησιμοποιηθούν για την ακριβή εκτίμηση του κόστους της συντήρησης λογισμικού. 
Η εκτίμηση του κόστους είναι μια σημαντική πτυχή του σχεδιασμού λογισμικού 
συντήρησης λογισμικού.


#### Τεχνικό χρέος και εκτίμηση κόστους

Το τεχνικό χρέος γενικά κάνει τον κώδικα πιο ακριβό στη συντήρησή του απ' ό,τι 
πρέπει να είναι. Το τεχνικό χρέος αντιπροσωπεύει την προσπάθεια που απαιτείται 
για τη διόρθωση προβλημάτων που παραμένουν στον κώδικα όταν μια εφαρμογή 
κυκλοφορεί. Αρκετές τεχνικές και δείκτες μπορούν να βοηθήσουν τους μηχανικούς 
να μετρήσουν τεχνικό χρέος, όπως το μέγεθος, την πολυπλοκότητα και τον αριθμό 
των τεχνικών ατελειών και παραβιάσεων του ορθού αρχιτεκτονικού σχεδιασμού και
πρακτικών κωδικοποίησης στον πηγαίο κώδικα. Το ISO/IEC/IEEE 14764 παρέχει 
προτάσεις για τη βελτίωση της συντηρησιμότητας, μεταξύ άλλων: διασφάλιση της 
αναγνωσιμότητας, επιδίωξη δομημένου κώδικα, μείωση της πολυπλοκότητας του 
κώδικα, παροχή ακριβή σχολίων κώδικα, χρήση αναγνωριστικών και λευκών κενών, 
εξάλειψη των γλωσσικών αδυναμιών και δομές που εξαρτώνται από τον 
μεταγλωττιστή, διευκόλυνση ανίχνευσης σφαλμάτων, εξασφάλιση της ιχνηλασιμότητας 
του σχεδιασμού κώδικα, διεξαγωγή επιθεωρήσεων και ελέγχου του κώδικα. Ένα 
προϊόν λογισμικού πρέπει να εξελίσσεται, με την προσθήκη νέων χαρακτηριστικών 
και δυνατοτήτων, και η βάση του κώδικά πρέπει να παραμένει συντηρήσιμη, εύκολα 
κατανοητή και εύκολη στην περαιτέρω εξέλιξή της. Ένα κοινό εμπόδιο για την 
αντιμετώπιση των τεχνικών χρέους - ή, στην πραγματικότητα, της εφαρμογής 
οποιασδήποτε δυνητικής βελτίωσης - είναι η αβέβαιη ανταμοιβή γι' αυτό. Αυτός 
είναι ο λόγος για τον οποίο είναι τόσο σημαντικό για τους οργανισμούς να 
καθορίσουν τα ακόλουθα:
* την ποιότητα του τρέχοντος λογισμικού τους
* το τρέχον κόστος του τεχνικού τους χρέους
* τη δυνητική εξοικονόμηση από την επένδυση στη βελτίωση της ποιότητας
* τον αντίκτυπο των τρεχόντων ζητημάτων ποιότητας στην επιχείρησή τους
Επιπλέον, το τεχνικό χρέος είναι μόνο ένας παράγοντας από τους πολλούς που 
συμβάλλουν στην υπερβολική απρογραμμάτιστη δουλειά - θέματα ομάδας ή 
διαδικασίας μπορεί επίσης να χρειαστεί να κατανοηθούν και να αντιμετωπιστούν. 
Τα σύγχρονα εργαλεία μπορούν να βοηθήσουν στον εντοπισμό τέτοιων ζητημάτων, που
σημαίνει ότι το τεχνικό χρέος δεν πρέπει να αντιμετωπίζεται απομονωμένα, αλλά 
μέσω της εξέτασης βαθύτερων αιτιών.

#### Εκτίμηση κόστους συντήρησης

Μια εκτίμηση του κόστους συντήρησης του λογισμικού θα πρέπει να προετοιμάζεται 
νωρίς στην διαδικασία προετοιμασίας του λογισμικού. Το κόστος θα πρέπει να 
είναι συνάρτηση του πεδίου εφαρμογής των δραστηριοτήτων συντήρησης. Το 
ISO/IEC/IEEE 14764 [1, c7s2.4] προσδιόρισε διάφορους παράγοντες που θα πρέπει 
να περιλαμβάνονται, όπως οι ακόλουθοι:
* Μετακινήσεις προς τις τοποθεσίες των χρηστών
* Εκπαίδευση για τους συντηρητές καθώς και τους χρήστες
* Κόστος και ετήσια συντήρηση για το περιβάλλον μηχανικής λογισμικού (ΠΜΛ) και 
δοκιμές λογισμικού
* Κόστος προσωπικού (π.χ. μισθοί, παροχές)
* Άλλες δαπάνες πόρων, όπως αναλώσιμα
* Κόστος συντήρησης αδειών χρήσης λογισμικού
* Αλλαγές προϊόντων, διαχείριση προγραμμάτων 
* Μηχανικοί τοπικής εξυπηρέτησης
* Ενοικίαση εγκαταστάσεων για συντήρηση
Επιπλέον, καθώς η συντήρηση και η προσπάθειες ανάπτυξης εξελίσσονται, οι 
εκτιμήσεις θα πρέπει να τροποποιούνται. Τα δεδομένα ιστορικής μέτρησης θα 
πρέπει να χρησιμοποιούνται ως εισροές για την εκτίμηση κόστους συντήρησης. 
Επιπλέον, οι εκτιμήσεις κόστους απαιτούνται επίσης κατά τη διάρκεια των 
επιπτώσεων ανάλυσης ενός αιτήματος τροποποίησης (ΑΤ) ή μιας αναφοράς 
προβλημάτος (ΑΠ). Η μέθος εκτίμησης του κόστους (π.χ. παραμετρικό μοντέλο,
σύγκριση με αναλογικά συστήματα, χρήση εμπειρικών και ιστορικών δεδομένων) θα 
πρέπει να περιγράφεται. Οι εκτιμήσεις των μεμονωμένων ΑΤ ή ΑΠ συνήθως 
περιλαμβάνουν την εκτιμώμενη προσπάθεια που σχετίζεται με εκτέλεση μιας 
αλλαγής, εκτιμήσεις πόρων και ένα εκτιμώμενο χρονοδιάγραμμα για την εφαρμογή 
της αλλαγής.

### Μετρικές συντήρησης λογισμικού

Κάποια από τα αντικείμενα που σχετίζονται με τη συντήρηση λογισμικού
και μπορούν να μετρηθούν είναι οι διαδικασίες, οι πόροι και το προϊόν.

Πολλές μετρικές μπορούν να προκύψουν από τα χαρακτηριστικά του λογισμικού,
τη διεργασία συντήρησης και το προσωπικό συμπεριλαμβανομένων του μεγέθους,
της πολυπλοκότητας, της ποιότητας, της δυνατότητας κατανόησης, της
συντηρησιμότητας και της προσπάθειας. Ο βαθμός πολυπλοκότητας του
λογισμικού μπορεί να μετρηθεί με την χρήση εργαλείων που υπάρχουν
διαθέσιμα στο εμπόριο. Αυτή η μετρική είναι μια καλή πρώτη ένδειξη
για το πρόγραμμα μετρήσεων του συντηρητή. Συζητήσεις σχετικά με την
μέτρηση των διεργασιών και του προϊόντος λογισμικού παρουσιάζονται
στο γνωστικό πεδίο Διεργασίες τεχνολογίας λογισμικού.
Επίσης, περιγράφεται ένα πρόγραμμα συντήρησης λογισμικού.

#### Συγκεκριμένες μετρικές

Ο συντηρητής πρέπει να καθορίζει ποιοι δείκτες ταιριάζουν στον κάθε
οργανισμό ανάλογα με το περιεχόμενο του. Το μοντέλο ποιότητας λογισμικού
προτείνει δείκτες που αφορούν συγκεκριμένα την συντήρηση λογισμικού.
Κάποιες μετρικές που αφορούν τα χαρακτηριστικά της συντηρησιμότητας
είναι οι εξής:

  * Αναλυσιμότητα: μετρά την προσπάθεια και τους πόρους, που απαιτούνται
  για την διάγνωση ελαττωμάτων ή παραγόντων αποτυχίας ή τον εντοπισμό
  των μερών του λογισμικού που χρήζουν τροποποίησης.
  * Δυνατότητα Αλλαγών: μετρά την προσπάθεια του συντηρητή για την εφαρμογή
  μια συγκεκριμένης αλλαγής.
  * Σταθερότητα: μετρά την απρόβλεπτη συμπεριφορά του λογισμικού, συμπεριλαμβανομένης
  εκείνης που συνέβη κατά τον έλεγχο.
  * Ελεγξιμότητα: μετρά την προσπάθεια του συντηρητή και των χρηστών
  για τον έλεγχο του τροποποιημένου λογισμικού.

Άλλες μετρικές που επίσης χρησιμοποιούν οι συντηρητές είναι:

  * το μέγεθος του λογισμικού,
  * η πολυπλοκότητα του,
  * το πόσο κατανοητό είναι και
  * η συντηρησιμότητά του.

Η απαιτούμενη προσπάθεια για συντήρηση σε κατηγορίες των διαφόρων
εφαρμογών παρέχει επιχειρηματικές πληροφορίες στους χρήστες και τους
οργανισμούς.
Μπορεί επίσης να δώσει την δυνατότητα στον οργανισμό να συγκρίνει
τα διάφορα προφίλ συντήρησης εκ των έσω.

## Διεργασία συντήρησης

Εκτός από τις τυπικές διεργασίες ανάπτυξης λογισμικού και τις δραστηριότητες
που περιγράφονται στο πρότυπο IEEE 14764, υπάρχει ένα σύνολο δραστηριοτήτων,
που είναι μοναδικές για τους συντηρητές.

### Διεργασίες συντήρησης

Οι διαδικασίες συντήρησης παρέχουν τις απαιτούμενες ενέργειες και
τις εισόδους/εξόδους για αυτές, όπως περιγράφονται στο IEEE 14764.
Οι ενέργειες της διαδικασίας συντήρησης στο IEEE 14764 απεικονίζονται
στο [Σχήμα 7.2](#fig-softmaintenpr-5.2).
Οι διαδικασίες συντήρησης περιλαμβάνουν τις εξής:

  * εφαρμογή διεργασιών,
  * ανάλυση προβλήματος και τροποποίησης,
  * εφαρμογή τροποποίησης,
  * επιθεώρηση/αποδοχή συντήρησης,
  * μετάπτωση δεδομένων και
  * απόσυρση λογισμικού.

{id="fig-softmaintenpr-5.2"}
![Σχήμα 7.2 Η διεργασία συντήρησης λογισμικού.](images/7.2-SoftMainten.png)


Κάποια άλλα μοντέλα διεργασιών συντήρησης είναι τα εξής:

  * γρήγορης λύσης,
  * σπειροειδές,
  * Osborne's,
  * επαναληπτικής βελτιστοποίησης και
  * με στόχο την επαναχρησιμοποίηση.

Πρόσφατα, στην συντήρηση έχουν υιοθετηθεί και ευέλικτες μεθοδολογίες,
που προωθούν μικρές διεργασίες. Αυτές οι μεθοδολογίες προέρχονται
από την ανάγκη για όσο το δυνατόν γρηγορότερη ολοκλήρωση των διεργασιών
συντήρησης.
Επίσης, εξειδικευμένα μοντέλα για την ωριμότητα της συντηρησιμότητας
του λογισμικού παρέχουν βελτιώσεις στην διαδικασία συντήρησης λογισμικού.

### Ενέργειες συντήρησης {#act-maint}

Οι διαδικασίες συντήρησης περιέχουν ενέργειες και εργασίες απαραίτητες
για την τροποποίηση του υπάρχοντος λογισμικού, ενώ διατηρείται η ακεραιότητα
του. Αυτές οι ενέργειες και εργασίες αποτελούν ευθύνη του συντηρητή.
Όπως έχει ήδη αναφερθεί, πολλές από τις διεργασίες συντήρησης είναι
παρόμοιες με τις διεργασίες ανάπτυξης λογισμικού. Οι συντηρητές εκτελούν
ανάλυση, σχεδιασμό, προγραμματισμό, έλεγχο και τεκμηρίωση. Πρέπει
να καταγράφουν τις απαιτήσεις για τις δραστηριότητές τους, όπως γίνεται
και στην ανάπτυξη, και να ανανεώνουν την τεκμηρίωση βάσει των αλλαγών
που εκτελούνται. Το IEEE 14764 προτείνει ότι, όταν ένας συντηρητής χρησιμοποιεί
μια διεργασία ανάπτυξης, αυτή θα πρέπει να είναι προσαρμοσμένη βάσει
συγκεκριμένων αναγκών.
Παρ’ όλα αυτά, κάποιες διεργασίες συντήρησης αφορούν αποκλειστικά και
μόνο την συντήρηση λογισμικού.

#### Μοναδικές δραστηριότητες {#uniq-activities}

Υπάρχει ένα σύνολο από διεργασίες, ενέργειες και πρακτικές που αφορούν
αποκλειστικά την συντήρηση λογισμικού:

  * Κατανόηση του προγράμματος: δραστηριότητες που απαιτούνται για την
  απόκτηση γενικής γνώσης σχετικά με το τι κάνει το λογισμικό και το
  πως τα διάφορα μέρη του δουλεύουν μαζί.
  * Μετάβαση: μια ελεγχόμενη και συντονισμένη σειρά από ενέργειες κατά
  την διάρκεια των οποίων το λογισμικό μεταφέρεται προοδευτικά από τον
  προγραμματιστή στον συντηρητή.
  * Αποδοχή/Απόρριψη αιτημάτων τροποποίησης: τροποποιήσεις που απαιτούν
  εργασία πέραν ενός συγκεκριμένου μεγέθους/προσπάθειας/πολυπλοκότητας
  μπορεί να απορριφθούν από τους συντηρητές και να ανατεθούν σε κάποιον
  προγραμματιστή.
  * Κέντρο υποστήριξης συντήρησης: μια λειτουργία υποστήριξης των τελικών
  χρηστών που συντονίζει την ανάθεση, την ταξινόμηση και το κόστος των
  αιτημάτων τροποποίησης.
  * Ανάλυση επιπτώσεων: μια τεχνική για την αναγνώριση περιοχών που
  επηρεάζονται από μια πιθανή αλλαγή.
  * Συμφωνητικά Παροχής Υπηρεσιών Συντήρησης, άδειες και συμβόλαια συντήρησης
  (Service-Level Agreement — SLA) συμβόλαια που περιγράφουν τους στόχους
  ποιότητας και υπηρεσιών.

#### Υποστηρικτικές διεργασίες

Οι συντηρητές μπορεί επίσης να εκτελούν υποστηρικτικές διαδικασίες
όπως η τεκμηρίωση, η διαχείριση σχηματισμών λογισμικού, η επαλήθευση και
η επικύρωση, η επίλυση προβλημάτων, η διασφάλιση ποιότητας λογισμικού, η κριτική
και ο έλεγχος.
Μια επίσης σημαντική υποστηρικτική ενέργεια είναι η εκπαίδευση συντηρητών
και χρηστών.

#### Ενέργειες σχεδιασμού συντήρησης

Μια σημαντική ενέργεια για την συντήρηση λογισμικού είναι ο σχεδιασμός
και οι συντηρητές πρέπει να αντιμετωπίσουν μια πληθώρα από προβλήματα
που συνδέονται με αυτόν, όπως:

  * ο επιχειρηματικός σχεδιασμός (οργανωτικό επίπεδο),
  * ο σχεδιασμός της συντήρησης (επίπεδο μετάβασης),
  * ο σχεδιασμός των εκδόσεων (επίπεδο λογισμικού) και
  * ατομικός σχεδιασμός αλλαγών λογισμικού (επίπεδο αιτήματος)

Στο επίπεδο αιτήματος ο σχεδιασμός γίνεται κατά τη διάρκεια της ανάλυσης
επίδρασης (βλ. θέμα [Ανάλυση επίδρασης](#impact-analysis)).
Η ενέργεια του σχεδιασμού εκδόσεων απαιτεί από τον συντηρητή:

  * να συλλέγει ημερομηνίες διαθεσιμότητας των ατομικών αιτημάτων,
  * να συμφωνεί με τους χρήστες για το πλαίσιο των εκάστοτε εκδόσεων,
  * να αναγνωρίζει πιθανές διαφωνίες και να αναπτύσσει εναλλακτικές,
  * να αξιολογεί το ρίσκο κάθε νέας έκδοσης και να αναπτύσσει σχέδια
  εκτάκτου ανάγκης σε περίπτωση που προκύψει κάποιο πρόβλημα και
  * να ενημερώνει όλα τα ενδιαφερόμενα μέρη.

Ενώ η ανάπτυξη λογισμικού συνήθως διαρκεί από κάποιους μήνες μέχρι
κάποια χρόνια, η συντήρηση συνήθως διαρκεί πολλά χρόνια. Η εκτίμηση
των απαιτούμενων πόρων είναι κλειδί για την συντήρηση λογισμικού.
Ο προγραμματισμός της συντήρησης λογισμικού πρέπει να ξεκινά με την
λήψη της απόφασης για την ανάπτυξη του νέου προϊόντος λογισμικού και
να λαμβάνει υπόψη κάποιους στόχους ποιότητας. Πρέπει να αναπτυχθεί
ένα έγγραφο, που να περιγράφει το πλαίσιο, καθώς και ένα σχέδιο συντήρησης.
Το βασικό πλαίσιο κάθε λογισμικού πρέπει να τεκμηριώνεται στο σχέδιο
και πρέπει να αναφέρεται:

  * στην έκταση της συντήρησης,
  * στην προσαρμογή της διεργασίας συντήρησης,
  * στον προσδιορισμό του οργανισμού που θα διεξάγει την συντήρηση
 και
  * στην εκτίμηση του κόστους συντήρησης.

Το επόμενο βήμα είναι η ανάπτυξη του αντίστοιχου σχεδίου συντήρησης.
Το σχέδιο αυτό θα πρέπει να προετοιμάζεται κατά την ανάπτυξη του λογισμικού
και να προσδιορίζει το πώς οι χρήστες θα μπορούν να ζητούν αλλαγές
στο λογισμικό και να αναφέρουν προβλήματα. Το IEEE 14764 αναφέρεται
και παρέχει οδηγίες για τον σχεδιασμό της συντήρησης.
Στο τελευταίο στάδιο, στο ανώτερο επίπεδο του σχεδιασμού, ο οργανισμός
που αναλαμβάνει τη συντήρηση θα πρέπει να διεξάγει διαδικασίες επιχειρηματικού
σχεδιασμού (προϋπολογισμού, χρηματοοικονομικές και ανθρώπινου δυναμικού)
όπως γίνεται με όλες τις επιχειρηματικές διαδικασίες.

#### Διαχείριση σχηματισμών λογισμικού

Το IEEE 14764 περιγράφει τη διαχείριση σχηματισμών λογισμικού σαν
ένα κρίσιμο στοιχείο της διαδικασίας συντήρησης.
Οι διαδικασίες διαχείρισης σχηματισμών λογισμικού πρέπει να προνοούν
για την επαλήθευση, την επικύρωση και τον έλεγχο κάθε βήματος που
απαιτείται για να αναγνωριστεί, να εγκριθεί, να υλοποιηθεί και να
εκδοθεί το προϊόν λογισμικού.

Αποκλειστικά η καταγραφή των αιτημάτων τροποποίησης και αναφορών προβλημάτων
δεν αρκεί. Το προϊόν λογισμικού και όσες αλλαγές γίνονται σε αυτό
πρέπει να ελέγχονται. Ο έλεγχος αυτός πραγματοποιείται με την εφαρμογή
και την επιβολή μιας εγκεκριμένης διαδικασίας Διαχείρισης σχηματισμών
λογισμικού (Software Configuration Management, SCM). Το γνωστικό
πεδίο Διαχείρισης σχηματισμών λογισμικού παρέχει λεπτομέρειες για
αυτήν και περιγράφει την διεργασία με την οποία τα αιτήματα για αλλαγές
στο λογισμικό υποβάλλονται, αξιολογούνται και εγκρίνονται. Η SCM
για την συντήρηση λογισμικού διαφέρει από την SCM για την ανάπτυξη
λογισμικού στον αριθμό των μικρών αλλαγών που πρέπει να ελεγχθούν
σε λογισμικό που ήδη λειτουργεί. Η διεργασία SCM εφαρμόζεται με
την ανάπτυξη και την τήρηση ενός σχεδίου διαχείρισης σχηματισμών λογισμικού
και λειτουργικών διαδικασιών.
Οι συντηρητές συμμετέχουν σε Πίνακες Ελέγχου Σχηματισμών για να καθορίσουν
το περιεχόμενο της επόμενης έκδοσης.

#### Ποιότητα λογισμικού

Δεν αρκεί απλά να ελπίζουμε ότι η συντήρηση του λογισμικού θα βελτιώσει
την ποιότητα του. Οι συντηρητές θα πρέπει να έχουν ένα πρόγραμμα ποιότητας.
Το πρόγραμμα ποιότητας πρέπει να έχει σχεδιαστεί και οι διεργασίες
του πρέπει να εκτελεστούν για την υποστήριξη της συντήρησης. Οι ενέργειες
και οι τεχνικές για την διασφάλιση ποιότητας λογισμικού, την επικύρωση
και επαλήθευση, τις αξιολογήσεις και τον έλεγχο πρέπει να επιλέγονται
από κοινού με όλες τις άλλες διεργασίες για να εξασφαλίζεται το επιθυμητό
επίπεδο ποιότητας. Επίσης προτείνεται ο συντηρητής να υιοθετήσει τις
διεργασίες, τις τεχνικές και τα παραδοτέα, που χρησιμοποιήθηκαν για
την ανάπτυξη του λογισμικού, και να δοκιμάσει τα αποτελέσματα.
Περισσότερες λεπτομέρειες υπάρχουν στο γνωστικό πεδίο Ποιότητα λογισμικού.

## Τεχνικές συντήρησης


Αυτό το θέμα αναφέρει κάποιες ευρέως αποδεκτές τεχνικές συντήρησης
λογισμικού.

### Κατανόηση προγράμματος

Οι προγραμματιστές δαπανούν ένα σημαντικό μέρους του χρόνου τους για
να διαβάσουν και να καταλάβουν τα προγράμματα ώστε να εφαρμόσουν αλλαγές.
Οι φυλλομετρητές κώδικα είναι πολύ σημαντικά εργαλεία για την κατανόηση
του προγράμματος και χρησιμοποιούνται για να οργανώσουν και να παρουσιάσουν
κώδικα.
Ξεκάθαρη και περιεκτική τεκμηρίωση μπορεί επίσης να βοηθήσει στην
κατανόηση του προγράμματος.

### Ανασχεδιασμός

Ως ανασχεδιασμός ορίζεται η εξέταση και η τροποποίηση λογισμικού με
σκοπό τη ανακατασκευή του σε μια νέα μορφή και περιλαμβάνει την μεταγενέστερη
εφαρμογή της νέας μορφής. Συχνά χρησιμοποιείται όχι για να βελτιώσει
την συντηρησιμότητα του λογισμικού, αλλά για να αντικαταστήσει παλαιό
λογισμικό. Η αναπαραγοντοθέτηση είναι τεχνική ανασχεδιασμού που στοχεύει
στην αναδιοργάνωση του προγράμματος χωρίς να αλλάζει η συμπεριφορά
του. Σκοπεύει στην βελτίωση της δομής του προγράμματος και της συντηρησιμότητας
του.
Τεχνικές αναπαραγοντοθέτησης μπορούν να χρησιμοποιηθούν κατά την διάρκεια
μικρών αλλαγών.

### Αντίστροφη ανάπτυξη

Η αντιστροφή ανάπτυξη είναι η διαδικασία ανάλυσης του λογισμικού για
την αναγνώριση των συστατικών του και των μεταξύ τους σχέσεων και
την δημιουργία απεικονίσεων άλλης μορφής ή υψηλότερου επιπέδου αφαιρετικότητας.
Η αντίστροφη ανάπτυξη είναι παθητική, δεν αλλάζει το λογισμικό ούτε
δημιουργεί νέο. Έχει ως στόχο να δημιουργήσει διαγράμματα κλήσεων
και ροής ελέγχου από τον πηγαίο κώδικα. Ένας τύπος αντίστροφης ανάπτυξης
είναι η ανατεκμηρίωση. Ένας άλλος τύπος είναι η ανάκτηση του σχεδιασμού.
Τέλος, τα τελευταία χρόνια το ενδιαφέρον έχει στραφεί στην αντίστροφη
ανάπτυξη δεδομένων, όπου λογικά σχήματα/σχέσεις ανακτώνται από φυσικές
βάσεις δεδομένων.
Τα εργαλεία που θα χρησιμοποιηθούν παίζουν πολύ σημαντικό ρόλο στην
αντίστροφη ανάπτυξη καθώς και στις σχετικές εργασίες, όπως η ανατεκμηρίωση
και η ανάκτηση σχεδιασμού.

### Μετάπτωση

Το λογισμικό, στη διάρκεια της ζωής του, μπορεί να τροποποιηθεί για
να τρέξει σε διαφορετικά περιβάλλοντα. Για να μεταφερθεί σε νέο περιβάλλον,
ο συντηρητής πρέπει να καθορίσει τις απαιτούμενες ενέργειες, να αναπτύξει
και να τεκμηριώσει τα απαιτούμενα βήματα αποτυπώνοντας την μετάπτωση
σε ένα σχέδιο μετάπτωσης που περιλαμβάνει τις απαιτήσεις και τα εργαλεία
της μετάπτωσης, τις μετατροπές δεδομένων και προϊόντων, την εκτέλεση,
την επαλήθευση και την υποστήριξη.
Η μετάπτωση λογισμικού μπορεί επίσης να συνεπάγεται και κάποιες επιπλέον
ενέργειες όπως:

  * Ενημέρωση πρόθεσης: μια δήλωση σχετικά το γιατί το παλιό περιβάλλον
  δεν υποστηρίζεται πλέον, συνοδευόμενη από μια περιγραφή του νέου περιβάλλοντος
  και της ημερομηνίας διάθεσης του.
  * Παράλληλη εργασία: η ταυτόχρονη διάθεση του παλιού και του νέου
  περιβάλλοντος ώστε οι χρήστες να έχουν μια ομαλή μετάβαση από το παλιό
  στο νέο περιβάλλον.
  * Ενημέρωση ολοκλήρωσης: όταν η μετάπτωση έχει ολοκληρωθεί, όλοι ενδιαφερόμενοι
  θα πρέπει να ενημερωθούν σχετικά.
  * Αναφορά μετά την λειτουργία: μια εκτίμηση της παράλληλης λειτουργίας
  και της επίδρασης της αλλαγής στο νέο περιβάλλον.
  * Αρχειοθέτηση δεδομένων: αποθήκευση των παλαιών δεδομένων του λογισμικού.

### Απόσυρση

Όταν το λογισμικό φτάσει στο τέλος του κύκλου ζωής του, πρέπει να
αποσυρθεί. Πρέπει να γίνει μια ανάλυση που να υποστηρίζει την απόφαση
για απόσυρση. Η ανάλυση αυτή θα πρέπει να συμπεριλαμβάνεται στο σχέδιο
απόσυρσης, το οποίο καλύπτει τις απαιτήσεις, την επίδραση, την αντικατάσταση,
το πρόγραμμα και την απαιτούμενη προσπάθεια για την απόσυρση του λογισμικού.
Μπορεί επίσης να περιλαμβάνεται η προσβασιμότητα σε αρχειοθετημένα
αντίγραφα των δεδομένων.
Η απόσυρση λογισμικού συνεπάγεται έναν αριθμό ενεργειών, παρόμοιων
με αυτές της μετάπτωσης.

## Εργαλεία συντήρησης λογισμικού

Η ενότητα αυτή περιλαμβάνει εργαλεία που είναι ιδιαιτέρως σημαντικά
για την συντήρηση του λογισμικού, όπου υπάρχον λογισμικό τροποποιείται.
Κάποια παραδείγματα σχετικά με την κατανόηση περιλαμβάνουν:

  * Κατακερματιστές προγράμματος, που επιλέγουν μόνο τα τμήματα του
  προγράμματος που επηρεάζονται από μια αλλαγή.
  * Στατικούς αναλυτές, που δίνουν τη δυνατότητα γενικής επίβλεψης και
  σύνοψης του πλαισίου του προγράμματος.
  * Δυναμικούς αναλυτές, που δίνουν στον συντηρητή την δυνατότητα να
  καταγράφει το μονοπάτι εκτέλεσης του προγράμματος.
  * Αναλυτές ροής δεδομένων, που επιτρέπουν στον συντηρητή να καταγράφει
  όλες τις δυνατές ροές δεδομένων του προγράμματος.
  * Δια-αναφορές, που δημιουργούν δείκτες για τα εξαρτήματα/συστατικά
  στοιχεία του προγράμματος.
  * Αναλυτές εξάρτησης, που βοηθούν τους συντηρητές να αναλύσουν και
  να κατανοήσουν την διάδραση μεταξύ των εξαρτημάτων του προγράμματος.

Τα εργαλεία αντίστροφης ανάπτυξης λογισμικού βοηθούν την διαδικασία
δουλεύοντας ανάποδα, από το υπάρχον προϊόν για την δημιουργία αντικειμένων,
όπως προδιαγραφές και περιγραφές σχεδιασμού, που μπορούν έπειτα να
μεταφερθούν για να δημιουργήσουν ένα νέο προϊόν από ένα παλιό.
Οι συντηρητές μπορούν επίσης να χρησιμοποιήσουν τον έλεγχο λογισμικού,
την διαχείριση σχηματισμών λογισμικού, την τεκμηρίωση και εργαλεία
μετρικών του λογισμικού.
